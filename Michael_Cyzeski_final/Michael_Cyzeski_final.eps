%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: Michael_Cyzeski_final.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: John Macey
%%CreationDate: 1/11/13
%%BoundingBox: 0 0 612 396
%%HiResBoundingBox: 0 0 612 396
%%CropBox: 0 0 612 396
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 84 8%%BeginData: 13524 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FDFCFFFDFCFFFDFCFFFDFCFFFD23FFA87EA2A8A8FD07FF7DA87DA8%FD18FFA8FD0FFF7D7D537D7DA9FD42FFA828280552FD06FF7E2805527DFF%FD057D76FFA1A8A8527D527DFF7D7D7D767D767D7DA852A1FFFD047DFD06%FF7E28525277522E0553FD43FF282828A8FD05FF7D282853FFFFA87DA876%A152FFA87D52FD047DFF7DA852A87DA87D7DA87D7DFF7DA152A8FD05FF7D%057DFD05FF2852FD42FFA8284C2853FD05FF2753057DFD04FFA8FD05FFA8%FD07FFA8FD05FFA8FD0CFFA80553FD06FF2853FD42FFA828A82852FD04FF%7D537E2853FFFF7D53A8FFA8537D53A97D7D7DFF7D7D7DFFFFA87DFFFFA8%537D777EA87D53A8FD04FF5228A8FD06FFA8A8A2527EA87D7DA2527E7D7E%A87D7D7D53FFA87D527EA87D53FF7D53A8A8527EFD23FF7D28FF53057EFF%FFFF5252A90553FFFF5328A87E28A2A85253A805A8FFA205A8FFFF2828A8%FFA82852A852FF2852FD04FFA82828FD09FFA82852FF28A852777D2852FF%2852A8537E5252A828FF2852A9527DFF7D287DFD23FF7E28FF7E2852FFFF%A928CBA82852FFFF7E28FF287DFFFFA8FFA8287EFFA228A8FFA853287EFF%FF287DA8A8FF5352FD04FFA82753FD0AFF7D2E527DFFA8FF7D28FFFF5352%A97EFF282EA2FFFF5352537DFFFFA828A9FD23FF5328FFFF2828A8FF5252%FFA80552FFFF5352A82877FD04FFA82752525227A8FF77525228FFFF2828%527DFF2853FD04FF7D2828FD0BFF2828FFFFFFA805A2FFFF5228287DFFFF%282853FF282827A8FFFFA8287EFD23FF7D28FFFF7D057DFF527DFFFF2E52%FFFF7E28FF287DFFFFA8FFA82EA8FFA82EA8FF527E772EA8FF287DFFA8FF%5353FFA8FFFFA92852A9FD0AFF7D52FFFFFF287DFFA8FF5352FFA8A9A8FF%5328A853537D28FFFFA928CBFD23FF5252FFFFA828287E28FFFFFF2752FF%FF5228A87D057DA2287DA8057EFF7E05A87752FFFF0553A82828A84CA828%527D527EFFFF2E007EFD06FFA8A8FFFF2852FFFF52287D7D28FF28527E53%77287D7D28A82752FF5205A87D287DFD23FF5352FFFFFF5228287DFFFFFF%5228FFFF7D53A8FFA8527D77FF7D7D7DFF7D7D7D7E53FFA87D77A87D7E7D%A2A87D7D7E7DFFFFFF772828FD06FF7D52FFA87D53A9FFA87D7E7DA8A8FD%047DFF7D5353FFA87D53FF7E7D7DA2537EFD23FF2853FFFFFF7E0028A2FF%FFFF2828A8FD25FF280528FD04FFA92753FD41FF5328287DA8FFFF2E28FF%FFA852282853A8FD25FF53282853537728287DFD40FFA87D7D7E53FFFFFF%7DA8FFFF7E7D7DA877A8FD26FFA87D5253527EA8FDFCFFFDFCFFFDFCFFFD%FCFFFDD3FFA8FD37FFA8FFA8FD45FF7D525252FD07FF59525252A8FF7DA8%A8FFA8A8FFA8FFFD04A8FFFD07A8FFA8FF7EFFFD04A8FD07FFA852522752%27527DFD42FFA852F8277DFD05FFA927F827A8FFA8FD067DFF7DA8527D52%7DFF7EFD057D7E7DA87D7DFF7E7D7D52FD06FF7DF87DA8FFA8A82727A8FD%42FF52522752FD05FFA8272727FFFFFFA8FFA8A8A8FFFFA87DFD04A8FFA8%A8A8FFA8FFA8FFA8AF7EFFA8A8A8FD06FF7DF87EFD05FFA8F8FD43FF5252%52F8A8FD04FF277D2727A8FFA8FFA8FFFFFF7DA8FFFFA8FFFFFFA8FD0BFF%A8FFA8FFA8FD05FFF852FD06FFA852A8A8A8FFFD04A87DA8A8FFFD05A8FF%A87EA8FFA8A8A8FFFD05A8FD24FF27A87E277DFFFFFFA827A85220FFFFA8%207DFF7D2EA85252A85252FFA82752FFFFFF27A8FFFF52277D52A87D20A8%FD04FF7D277DFD09FF2727AF7D52A8277D5227A87E277D2E7DA8527D52A8%7D20AFA827A8FF2752A8FD23FF277DFFF827AFFFFF7D27FF5227A8FFFF27%A8A8F8A8FFFF52FF277DFFFF277DFFFF532752FFFF7E27FF84FFA827FD05%FF52F8A8FD09FFA8F8A852A8A87DFF5252FF7D27FFA8A87DF8FFA8FFA827%A852A8FFFF5252FD24FF27A8FF7D27A8FFFF27A8FF7D27FFFFFF27A85227%FD05FF5227A87D277DFFFF535927FFFF7D27527DFFA827FD05FF5227A8FD%0AFF59277DFFFFFF7DF8FFFFA8207D52FFA84C27A8FFA827277DFFFFFF27%7DFD23FFA8277DFF7D2752FF7D27A8FF522784FFA827A859F8FD05FF2752%A8A8277DFFA82752F87DFF7D27A87DFF7D27A8FD04FF52F8A8FD0AFFA827%A8FFFFA8F8A8FFFF7D277D7DFFFFA852F8A8A8275227A8FFFF5252FD24FF%27A8FFFF2727FF7D52FFFF7D27A8FFFF27A884277DFFA87DFF527DFFFF52%59FF52A8FF7D27FF7D27FFA87EA927FFA8A8FFFF52277DFD0BFF27FFFFFF%2752FF7D7DA920FFFFA87DA8FF277DFF27FF5227FFFF277DFD23FF8427A8%FFFF7DF87D27A8FFFF59277DFF7D2752FF7DFD0452FF2752A8A827527D27%7DFF52277D59277D527D7D5253527DFFFFA8F827A8FD06FF59A8FF53277D%FF7D27525227A87D2852537D7D277D52FF52277DA8F8527D5227FD23FFA8%20FFFFFFA8272752FFFFFF7EF8A8FD08FFA8FD05FFA9FFFFFFA8FD07FFA8%FD0AFF52F853FD05FFA8F8FD0FFFA8FFFFFFA8FD07FFA8FD26FF52277DFF%FFFF52277DFFFFFF522752FD25FFA852F8527EFFA8A8F827FD41FF7D5252%527DFFFFA827FFFFFFFD04527DFD26FFA85227275227527DFD7AFFA9FFA8%FDFCFFFDFCFFFDFCFFFDBDFF7D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D%7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA8%7D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D%7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA8%7D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA8272727F8272727F82727%27F8272727F8272727F8272727F8272727F8272727F8272727F8272727F8%272727F8272727F8272727F8272727F8272727F8272727F8272727F82727%27F8272727F8272727F8272727F8272727F8272727F8272727F8272727F8%272727F8272727F8272727F8272727F8272727F8272727F8272727F8F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F8FD042720272727202727272027272720272727202727272027%272720272727202727272027272720272727202727272027272720272727%202727272027272720272727202727272027272720272727202727272027%272720272727202727272027272720272727202727272027272720272727%20272727202727272027272720F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F82727F8272727F8272727%F8272727F8272727F8272727F8272727F8272727F8272727F8272727F827%2727F8272727F8272727F8272727F8272727F8272727F8272727F8272727%F8272727F8272727F8272727F8272727F8272727F8272727F8272727F827%2727F8272727F8272727F8272727F8272727F8272727F8272727F82727F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F8272720272727202727272027272720272727202727272027%272720272727202727272027272720272727202727272027272720272727%202727272027272720272727202727272027272720272727202727272027%272720272727202727272027272720272727202727272027272720272727%202727272027272720272727202727F827F827F827F827F827F827F827F8%27F827F82727272127F827F827F827F8FD0527F827F827F827F8272127F8%27F827F8272027F8272727F8272027F8272027F827F827F827F827F82752%5352522727F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F8FD0427F8272727F82727%27F8272727F827272720A8FFFFFF522727F827272784FFFFA827527D7D52%7D5952277D277D527D5927277D527D527DFD04527D27277D527DFD0427F8%27277DA8FFA8A8A8FFA852F8272727F8272727F8272727F8272727F82727%27F8272727F8272727F8272727F8272727F8272727F8272727F8F827F827%F827F827F827F827F827F827F827F827F8A8FFFF5227F827F82727FFFFFF%27272759277D527D52275252FD047DF853527D527D52525352527DF85252%7D7D27F827F827F8A8FF52F827F8277DFF2727F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F8FD0427202727272027272720272727202727272027A8FFFFFF272720%27277DA8FFA92720FD0427522727205252522752272720522752274B5252%274C2827275227272027272720A8FF5220272727207DFF27202727272027%27272027272720FD07272027272720272727202727272027272720272727%2027272720F827F827F827F827F827F827F827F827F827F827F8AF7DA8FF%52F827F827A87DA8FF27272E595227F852527D27525252275252522027F8%52F82721FD04522752525227F827F852FFA8F827F827F827277D277D5252%527D277D7D7D5252527D527D2727527D5227527D2E275352277D5252F827%F827F827F827F827F827F82727F8272727F8272727F8272727F8272727F8%272727A87D52FF7D27272752FF27A8FF4C2752FF7D27A8A8527DA927FFA8%2727FFA827F852FF7DF8277DFF52A8527DFF7D2727F8277DFF52272727F8%272727F827A8FF2784A852A87DA8FF277DFF7D7D7D52FF52FF527DFF5252%FF2727FFFFFD0427F8272727F8272727F82727F827F827F827F827F827F8%27F827F827F827F82721FF5227A8FF2727F8A87D277EFF272721FF277DFF%27F8275227A87DF827A87DF8277DFF7E27F87DA8272E2752FFF827F827F8%A8FF52F827F827F827F827F852FF7D7D272752F8FF7D2752FFF852277DFF%52272752FF52A82727F8A87D27F827F827F827F827F827F827F827272027%272720272727202727272027272720272727FF7D27A8FF7D2727FF7D27A8%FF522727FF527DFF2027272720A8AFA87DFF7D2727AF7DFF272759FFA8A8%2759FF4C27272027A8FF52272727202727272027277EFF7D272720A8FF27%207DFFA8A82727A8FFA82752FFFF7D272027A8A820272727202727272027%2727202727F827F827F827F827F827F827F827F827F827F82727FF522727%FFA82752FFF8277DFF522727FF277EFF27F8272727A8A8F827A87DF87DA8%7DFF7DF87DA827522752FF20272727F8A8FF7DF827F827F827F827F82727%FF2727F853FF52202852FF27522727F87DFF7D27FF7DFF5227F8A87D27F8%27F827F827F827F827F827F8FD0427F8272727F8272727F8272727F82727%27F852FF52F827A8FF27A87D27F87EFF52F852FF5327FF7D2752A827FF7D%2727FF7D27A852F8A8FF277DFF277D5953FF52598427277DFF7E27F82727%27F8272727F852FF52F852FFA8F8A87D52FF52527D7DA827FF5352FF277D%FF5227A8A82727F8272727F8272727F8272727F8F827F827F827F827F827%F827F827F827F827F82752FF2727F87DFFA8A828F82753FF522752A87D27%27A87DA852527DA82752847D52A852277DA852FD047D5252A87DA85227F8%52FFFF2727F827F827F8A8272752A8522727A87D7D7D5252A87DA85252A8%A87D2752A8525284A852A87D28F827F827F827F827F827F827F8FD042720%272727202727272027272720272727207DFF27202727FFFFA82727207DFF%7D2027272720272727202727272027272720FD0727202727272027272720%27272720A8FFFFFD0427207DFF2720FD0727202727272027272720272727%20FD07272027272720272727202727272027272720F827F827F827F827F8%27F827F827F827F827F852A8FF7D52F8277DFF52272052A8FFA852F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F87DFFFF7D5252A8FFAFF827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F82727%F8272727F8272727F8272727F8272727F82752A87DA85227F8537D27F827%7D7D7DA87D27F8272727F8272727F8272727F8272727F8272727F8272727%F8272727F8272727F8272727F8527DFD04A87DFD0427F8272727F8272727%F8272727F8272727F8272727F8272727F8272727F8272727F8272727F827%2727F82727F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F8272720272727202727272027272720272727%202727272027272720272727202727272027272720272727202727272027%272720272727202727272027272720272727202727272027272720272727%202727272027272720272727202727272027272720272727202727272027%272720272727202727272027272720272727202727F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F8FD04%27F8272727F8272727F8272727F8272727F8272727F8272727F8272727F8%272727F8272727F8272727F8272727F8272727F8272727F8272727F82727%27F8272727F8272727F8272727F8272727F8272727F8272727F8272727F8%272727F8272727F8272727F8272727F8272727F8272727F8272727F82727%27F8272727F8F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F8FD04272027272720272727202727272027%272720272727202727272027272720272727202727272027272720272727%202727272027272720272727202727272027272720272727202727272027%272720272727202727272027272720272727202727272027272720272727%202727272027272720272727202727272027272720F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F82752%275228522752285227522852275228522752285227522852275228522752%285227522852275228522752285227522852275228522752285227522852%275228522752285227522852275228522752285227522852275228522752%285227522852275228522752285227522852275228522752285227522852%27522852275228FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (R=53 G=62 B=91)
%%CMYKCustomColor: 0.8458 0.7527 0.4054 0.3040 (R=53 G=62 B=91)
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Print</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:MetadataDate>2013-01-11T19:36:17-05:00</xmp:MetadataDate>
         <xmp:ModifyDate>2013-01-11T19:36:17-05:00</xmp:ModifyDate>
         <xmp:CreateDate>2013-01-11T19:36:16-05:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>168</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAqAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FV&#xA;G8tvrVnPberJB68bx+vC3GVOaleaNQ0Za1B8cQr5W86+b/zF8s+bNUsbPzFqN5puj3UMXqTybnmv&#xA;qosnGgNeDAnv9NMzoQiRyaySH1FomrWmsaPZaraGttfQxzxbgkCRQ1DTuK0PvmERRpsed/n35v1b&#xA;RtC0/TNDuJLfWtVuP3UkDcXWG3HOQ1G43Kg+1ctwxBNnkxkUr/5x9n8x+YtOuPMmteYL+8a1upLO&#xA;LT3kBtyBDG5eQEEs3734dxSnfJZ6BoBYm2UX9v8AmfFBc/Ubme4n+tzpb+qunKptUtJPSkFFU8nu&#xA;WTiD0p8QC1zHZojTz+YnLXhdifgbNf0Gz/UKi5FsvP8Au9qmcnjz+HbfamKoLULz82pLqJ7CweG0&#xA;htUWSOWWw9We7icSOxIMiqk0aGL4SOLNyoAK4qmOmxfmLD5dvv0jMLnWVuo4rb0RbJytI5I0kmiD&#xA;ARrLLH6jqsh4huIoBXFUtli/NhvrTxTzIiW6i0jcad6rzNfPQsQCgK2XD1NwvOvDFUbEn5iR3SRX&#xA;L3E1qspVp7caeHakNpRisoQCFpfrXQep9nalMVXaW35iDy5qn11JW1j6z/oHI2QY2pdAfT9P916g&#xA;j509XblSu2Kq3lyLz62uctYnlTSI4HKRyCzLySm5mEYk9AEhhbekX4kLy6d8VZVc3EFtby3NxIsV&#xA;vAjSTSuaKqIOTMxPQADFDx7TfNHnj80tXvE8uXz+XPJ1jJ6T6lGgN3cPSvFCT8Bpv8JHEEVr0zIM&#xA;YwG+5Y3afXX5Qan6NbDz55kiuwPhkuL0zxVp3iAj2r/lZHxR3BeFQ/IbXPOGr6JqzeZLxrx7G+ax&#xA;gaRUDq0KgygsoVm3cbtjmABFLF6dlLJ2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KvAdG8pw+&#xA;btV/N6yKK1zJdJHYuD9meCSdk69KvGoPtUZlGXCIsKu07/5xo80Ne+Vrvy7csRd6LMTEjEBvQnJY&#xA;CnX4JA9fCoyOojvfemB2atrb/Gv5l+adZasml+W7GXR9N497mWN1mZKAgkcpB9K4/TEDvUc0H/zi&#xA;tNXy7rkFD8F5G9e3xxU/40w6nmEQ5Jbpnme88rL+ZWqR3VzdS6DcrpuhQXdzPcRQpcXDoAEldweP&#xA;BWqd6DrucJjxcI71urZfon5dXOteQ4NTvNZ1CXzbqlmt5Bqn165iSCeZBLCqxROIhHGSAaJ40ptS&#xA;s5KlVbJpj/5gyN5e85+SrfVtWvxY3Fqqa+YLm9ZLh7RFVZDFCxckvueK1PU5OG8TSnmGte80aPr/&#xA;AObPliHQtT1D6hqDn9L2yvf2cUjwLyh/dSeiNuO/AfPGMSIG1J3Rv5/eZ9YiktdI0S/+pXGmwHWr&#xA;+kgjLrHKscEQoQXNS7lO4WuDDEcysk4/MLzGNZ/JRvNOm3E1pdejbXltNazSwvDO0iwyryjZCePN&#xA;0IO34ZGEanSnklP5cNYa9qWiJFretXF1b6QLvXLe9nvWt55LqH0GEZndOJR3ZleMFfA5LJtew5rF&#xA;U/5x9a7vl16+v728vZ7K7fT7T6zdTzJFbji3BUkdl6qN6V/HHP0WKefn/qc1h+WGpiElXvHhtSwr&#xA;sryAuNv5lUr9OQwC5LLkqfkHZ29t+VejtEoVrgzzTN3ZzO61P+xUD6Mcx9RWPJ6DlTJhnn/yGuq+&#xA;V7y30Bm0rV0eS9s5bJ2tvUunPJ/V9MoGMtKFm775ZCdHdBDzf8uBL57n0K1kS9soPK9vInmCUXV0&#xA;hublpW9KE1krueUsh6j7IoKZdk9N+aBu15607W9B9LQ7DW9Su/PPmbUZprOK1v7qG3gtpJjxdo1d&#xA;FFFFNxT7XZcYEHevSEFG/mxYX/ljRPJlda1N72O7Sy1HUo7q5E00T1eY0jbkTUnjsWpRd8GI2Tsm&#xA;SOsYNQu/L/nTV/I+qatdXSounWVvqLzyTia3VJppITcsZQXjn4orKGBFe4oDzAkqVflJceXdb1aw&#xA;ii1LUdP120tLmHzJo15c3TNfSuixmdGaQBSnxMVADKabfDyw5bA8lixTyN5kuLuTUfKK6hOmsa9f&#xA;PYwaleXNwY7W0iof3VZBynZvhjAO56mmxsnHr3IB6PQ/zk0KHy3+VIXTLu9S4sJ4fTvGupzMzSsE&#xA;kZ25/FyHboOwGU4pXLdMuT0zy3aQ2egafbwlzGkEZBlkeVyWXkSXkLMdz3OUyO7JMsCuxV2KuxV2&#xA;KuxV2KuxV5H+Qcn1u9876nyVjeazI3IClfid6/L95tl+bp7mMWC+c728/K383tR1exSlnrVncTwx&#xA;ihUyToxoR0+C7QNT+XLYDjhXcxOxey/lH5YPl3yHptrKD9eu1+vX7NXkZ7gBzyr3VeKfRmPllcmY&#xA;DzX/AJxXZUHmm1BJ9KW0Ir4H11r/AMLvl2p6MYMi0f8AKXXrlvOdr5lNkunebZBdcrGeaSa3njlM&#xA;sYAlgiVlBeta9qU32gco2romlbT/AC3+c2k+VR5UsrnSZYooWtrLXGmuY54oKFVrGsbfvEU0Qg0F&#xA;BgMoE3utFU1vyF55u/NvlTWYpbC5i8tW6RSvc3M6z3UjIFmduMEgWp6bmvU+GInGiO9JG6K83+S/&#xA;OOq/mJoPmOxGnfo7QifTinnnSaUSgepULBIi0/Z3PvgjMCJHepG63TPy/wBZuNZ8z6r5o0zRtUn1&#xA;dVOnK0kkvoiGMxxQFpLZSikH4pE+Ku/E4mYoAWtMc038qvzJtfy01PyPLNpMsN5Oslrc/WLn9xGX&#xA;Esicfq/xfHGCvT7TVyZyR4uLdFGqZNoXlj8yrFfL9rNPpUdjocC28ptXnWe6SC3MUMUjvEeKGTiz&#xA;U+dDSmQMom/NISDyv+XH5reXNF1nT9NvdIhm1mZ52uxJdNJA0g4/uj6SioHQkdcnLJEkXeyAGa/m&#xA;Z5TufMn5fajosB9a/MKSWrMaF5oGEgHhWTjx+nK8cqlaSLDzv/nHLzzbRafN5I1V/qupWU0jWEUx&#xA;4FldqyQhWp+8SQs3Hqa+xy3PD+IMYHo9wkkjijaSRgkaAs7sQFVQKkknoBmMzYd+X3n2484W+vXl&#xA;pBEbKwvpLTSpavGs6IisrSMQ/HlyB2XYHplk4cNIBtA/lV5K81eVp9bGsfUZINWunvke0mmd0kc7&#xA;xlZIYgVp+1y+jfY5JiVUoCT6Z+X35k2HnLVfNjzaNf6rqFY7aS5a6420PRUiRY9vhAXr0+ZrIziQ&#xA;ButKWuflj+YOpaD5a0+S/sbu90e8fUr6/up7hmluGneRURRE37sKwHUfLEZIglFJxqXlj81NRi1e&#xA;Qanp+lXN1bRR2Kae9wkYuUnR3nmcpz5NDH6VRX4dsiJRFJQdp5A856j5+tPOutpptje6ZavDFbaf&#xA;JNS7m4OitPIyVSMiSnRm4ilMJmBGgit2P6d+RfmE+WNb0rVk02W9u7k6ho9/Bczo9vdGikMTbV9P&#xA;juadaAUGzLM5hYIWk48weRvzW8wfl2vlXVrjSZ79ZYidVNzc1eKI8h6ifVt5KgVau/z6xjOIlYtS&#xA;CQ9M0OLUIdHs4dRSJL2KJY51t3aSLkg41RnSJiDSu67fjlJ5skdgV2KuxV2KuxV2KuxVAa9o8es6&#xA;VNp0l1dWSzca3NlKYJ1CsGosi9A1OJ9sMTRViflj8m/LHlnUYr7R7zUrco/OW3F0wgmoCAJowoDj&#xA;vvlkspPNACZedfy38t+cZ9Nm1lZSdLdnhWJlQOH4lkkqrEqeA6EZGGQx5KRaZ+ZvLkHmDThYT3t5&#xA;ZRcw7vYTtbyOOLKY3ZeqMG3XBGVJYr5b/JLyl5b1WHU9HutRtZ42UyKl0RHMqmvpzKFHNCRuuTlm&#xA;JFFAiA9AypLsVdirsVdirsVdirsVdirDfN/5R+SPNVz9dv7RrfUtv9yFm/ozGnTlQFGPuyk++WRy&#xA;yighJ7j8idGu7VbO+8y+Yr2xWgFncX6vDQdPgMVMl4x7gjhZj5T8oaF5U0kaVosBgtOZlcM7SM0j&#xA;ABnZmJ3IUdNsrlIyNlICc5FLsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVfH/AOdX&#xA;lu80jzvrGmeV7m9t9M03S4tSubP6zPKiq8yRScebsQv75WNffFIfSn5U+bU82eQNH1nmGuZIRDej&#xA;uLiH93LX5svIexxQkH5/a7eWnkuPQdMJ/TXmi6h0qxVCQwEjAyPtvTiOP+yxV5t/zjDpEGr6vr15&#xA;rF5d6hqGgXEC2BluJ/Tj9T1lMnph+LFvTI+KtMUl7HdaBq8uqXU9lqrR+tewS2qm+uHCwxlHuk9D&#xA;eOvJTxQbcTQ8QcKFHy/o3mLStWjm1rVI5YBYrAYn1C5es4+1L6cqqpr05VrihBXnl/z5LZaZYzav&#xA;BYCxszb3csd/ctPcNLD6Uly8jRo3KKQCSPfc7EgYpR+laF5qs9O1pdS15JdUvbZhp8vqyGK3eVWk&#xA;kk4MRRVuZ2WOg2iVFrtTAqCv/KXm547q4OsGyt/q94beIaleFIpZogkPOdlVmRH5Sc2FVrQCgrhQ&#xA;ip/K/miAOV1Ey237ktHNqN5CZG9KZXHrKrtEPWmQrwry4itKAYqjbPQvM1uvmISakI5NSV00aVri&#xA;af6u7er6Z9OUBU4802QmtPYYEoTSdB14eYLG9n1Xhp8bXMh06K/uboMWigSOPlKEMqpJHLIWbcc+&#xA;IFMKs1kkSNGkkYIiAs7saAAbkknArwfTNc8yfnR5q1G3sNRudE/LvSGEMr2belc30hOwMlKqrAci&#xA;Oy0qKmoUstf/AJxw/KJkqukSpc15fXFvbv1eda86tKV5V3+zitpF+R+mavoPmvz1peo6vc3OkaTd&#xA;wWmmLe3Duqq4klBAduAf0jHyoN8UPYjqFgEDm5iCEkBua0JHUVrirT6jp6MUe5iVxSql1BFQCNq+&#xA;BrirZv7EIJDcxBGJCuXWhI60NcVXQ3lpMxSGeOVgKlUZWNPGgOKrUv7GS4e2S4ie5j+3CrqXXvuo&#xA;NRiraX1k5IS4jYqCzBXUkAdSaHFWvr1j6Zl+sRemDxL814160rXFVSKaGZOcTrInTkhDD7xiq/FX&#xA;Yq7FXYq7FXYq7FXYq8V0jTbLXf8AnITz/a3kQls/0JBps4rUNHcxW7OtPoI+jFUh/wCcbtRvPLHm&#xA;/wAz/lrqj/vbaZ7iyrUBnhIjlKj/AIsj9Nx7A4pLLbeP/GP59T3TAyaP5CtRBBseDaldirkV7omx&#xA;8CoxQxT/AJxnY23n38wrAsNrlSUA2Po3FwlRt254pK8vYeXPzb/NbXbKwtxd6LpMV5p/7tAI55bO&#xA;N3daDb1HYlyN2qfHFWQ/k95B8qeYvy7tde8x2MOu63rwmmv9T1BEuZ+RkeILE8gcxhFUAcKb74oY&#xA;3+bPkvR/LenflfpBs/0yLHVYLKQGKIz3cJkV3gpIVSkjMQEZ+O+574pC/wDNyaz1vzR+Xsd75Sut&#xA;LVtbtLOSXUYrLjNbGZB9WH1ee4YoOR+BgF3xUJ5/zkbqVpdaZp/kw3n1FNQS4vrmRUdgEs4mNrEV&#xA;RW+GW6KD2CnFCM8qeY7Tzv8A84/3c+oxpd3NrptzZ6gkyhv9JtITxcg/tkBJAexOKsS/JbQ/L17Y&#xA;+SeXlWay1CFbjUP8ThYUW4ktmZFjDRmV3VhL8QkCfZ2ripT/APKDQ9Fh/N38y5YrC3SWwurRbF1i&#xA;QGBZ1nMoiIHwB6Dlx64pZz+cN3Pafld5nmgbjJ+j5kDdwJF9Nqe/Fjihhv8AzipFbJ+VpaKnqSah&#xA;cNcEdeYVFFf9gFxSXsWKEo82eVtI80aBd6Jq0KzWl0hWpALRvQhZUr0dDuDirwX8tPK17rV5F+Wu&#xA;v6Vamw8iajLe6neiOM/WfUqbOIfDWkp5O5P2kUKe+KU0/OLyz5W0u5utP07SrbWPPfne6SPSUmhR&#xA;jZW6wxwM61qFRPTJVttzXomKEN+cfkLRvKX5AWujW6pc3Gm3UBe8YAv9Ymas7KTUoHr0/lpikc2X&#xA;+VvKek3Os+YrjQvLc/knU4dKbTLR3WCL1Prw9T1yluZk5QyQLxKyHvUdMUMA/La20TRfM/l3yh51&#xA;8vnQ/N+mXstzpuuxIjLqTOJAEmnpzepkHEhiKqB8PQqUsl1yx8rfmH5+tba0i0211PUrPTJdeFsk&#xA;kOmWtyszXBCAfam4jitOJ41b7IBVep/mJ5N8paH+RWs6bo1lB+j7eyE9vJxSQvIKcbgyU+KQ1rz+&#xA;7bFDI/yZtLW2/K3yytvCkKy2EEsgjUIGkkQM7tQCrMdye+KszxV2KuxV2KuxV2KuxV2KvGPymvLO&#xA;+/Oj8y7uOeGRvWtYIeLAlhGJEfh4hTFRqd8VYz/zkBBc+SfzM8tfmVpyVErCDUEXbm8K8SCf+LbZ&#xA;yn+xxSHpv5H+Xp9H8gW17qG+ra88msapMwoxkuzzXl8o+P01xQ8z/Iy9s4vz38/2sU8Jju5ryS1E&#xA;bCjhb0sBHTrxV+2KS9L038rb2Hzz5g8y6jq0F/aeZYTaanpRsmjU2yxCGKNJfrDkEIoDsVPLwXFC&#xA;D0T8qPNflfTrrRvKXm/6jok7vJb217YreTWpkqW9GYTQChPZkPj1xVT1f8mNQutM8o6fZeYVtk8o&#xA;yR3dtLNZ/WHmu45BJ6khE8Q4Ej7FK/5WKpp+YH5ca15t1HQb2PXYdPOgTxX1tH9RMwe9icN6jE3C&#xA;fu/hA9Pr/lYqjNI8la9Z+etT81XmswXn6Qt1s0shZNH6EELFoVSX6w52ZiZKr8R6ccVY5oP5OeY9&#xA;Fg8zwWvme39DzV6j3kI00iOGaZj6jwL9bPEGJ2TiSex7UxVHaD+Vev6RpOi6GnmqRtF0a6gultY7&#xA;RIpJhbz+uIpJhIx4M/2tumKqOnflP5n07VvMeq2XmwW975ncPqDR6eoCcBIsfo853KFFlO9Tvvir&#xA;LpPKFrP5F/wjdTyXFu2nDTJbt95XAh9Eytv9s/a+eKvn38m/Ndz+U/mvU/IvnZf0fYXkvrWuoOCI&#xA;BMBwEoY0BimRR8f7JG/eikvpZ9W0qOwOoPeQLYBeZu2lQQhfH1CeNPpxQwL8svzHufO3m3za1nKs&#xA;nljSntbbSWCAGR2EnrS8tmIYoCoPYjFUd5R/L7XNB85a75kuNbgvR5hMTahZrYtBRrdWSD0pPrEv&#xA;Hir0bkrcvbFUuu/yj1l/P1751s/NDwandIYLcS2UNwLe32Aii9R6LsOoFTU+JxVCaz+SF5q3lC48&#xA;uXPmNn/SOpSatq9+9orTTzOFCBAJVWMJwA6HbYUxVOtQ/LvzBrD3H6b8zvdQy6dfadHBBapbIv1+&#xA;MRtMwWRubIB8IOKpbbflDrN5qnlu680+ZRrFv5UdZdLhhsltJHlTgUeeX1Zi/ExLsAK03xVrT/yc&#xA;vYr/AM23Opavaanb+cI6ahZy6e6xpLGHFu6FbrkBH6lSK1PZlO+KofT/AMm/NVp5BvPJEnnBbvSL&#xA;qNYYpJ9PLTQR1BeOJxdAcTT4QwPHtirOfI/ly78teVtP0G5vUvzp0Qt4blITb1iQUQMhkm+IDqQd&#xA;/AYqnuKuxV2KuxV2KuxV2KobU9NsdU06506/iE9leRtDcwsSA8bjiykgg7jFWLW35N/lha3UF1b+&#xA;XLSK4tpEmglRWDLJGwdGG/ZhiqeeZvKfl3zRYR6fr1kl/ZxTLcJDIWAEqAhW+EqejEU6Yqq6z5d0&#xA;TWtHfRtUs0utLkEYe0aoQiJldB8JGysgxVjkX5MflbDNHND5ctI5onWSKRAysroQykEN2IxVmmKu&#xA;xV2KuxV2KuxV2KuxV2KpX5h8q+XPMdoLTXdNt9RgU1RZ0DFT4o32lPuDirDV/wCcd/ybWb1h5dTn&#xA;UmhubwpU/wCQZuP0UxTbM9A8seXfLto1poenW+nW7tzkjt41Tm1KcnI3Y07nFCZ4q7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq+Uf+hv/Of/AFZNO++f/mvFNO/6G/8AOf8A1ZNO++f/AJrxWnf9Df8AnP8A&#xA;6smnffP/AM14rTv+hv8Azn/1ZNO++f8A5rxWnf8AQ3/nP/qyad98/wDzXitO/wChv/Of/Vk0775/&#xA;+a8Vp3/Q3/nP/qyad98//NeK07/ob/zn/wBWTTvvn/5rxWnf9Df+c/8Aqyad98//ADXitO/6G/8A&#xA;Of8A1ZNO++f/AJrxWnf9Df8AnP8A6smnffP/AM14rTv+hv8Azn/1ZNO++f8A5rxWnf8AQ3/nP/qy&#xA;ad98/wDzXitO/wChv/Of/Vk0775/+a8Vp3/Q3/nP/qyad98//NeK07/ob/zn/wBWTTvvn/5rxWnf&#xA;9Df+c/8Aqyad98//ADXitO/6G/8AOf8A1ZNO++f/AJrxWnf9Df8AnP8A6smnffP/AM14rTv+hv8A&#xA;zn/1ZNO++f8A5rxWnf8AQ3/nP/qyad98/wDzXitO/wChv/Of/Vk0775/+a8Vp3/Q3/nP/qyad98/&#xA;/NeK07/ob/zn/wBWTTvvn/5rxWnf9Df+c/8Aqyad98//ADXitO/6G/8AOf8A1ZNO++f/AJrxWnf9&#xA;Df8AnP8A6smnffP/AM14rTv+hv8Azn/1ZNO++f8A5rxWnf8AQ3/nP/qyad98/wDzXitO/wChv/Of&#xA;/Vk0775/+a8Vp3/Q3/nP/qyad98//NeK07/ob/zn/wBWTTvvn/5rxWnguLJ2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV7z5&#xA;M/5xs8t+cdIi1vRPOUj6dJK0Rjl0305VaPdkNbmnKnemLG3iWtaVdaRrF9pV2ONzYTyW0wIp8cTl&#xA;D+IxSnH5deTZ/OXnHTvL0UjQreO3r3Crz9KKNC7vSoGwXueuKlnH5ofkl5d/L7TIpr7zU97qN6jt&#xA;pljFYcBIYyvIvJ9YkCLR/DFbYdaeSLW8062uYNUX6xc2k14sEkQiQfV1b1FM0kiqKOnGrU61FcaR&#xA;a7zH5DTRNOkvH1ATmO6a0MSxrU8KcnFJGNNxvTj2r0xpQUZYflVf3d7qsRvFt7TS71LE3UqcfWrc&#xA;G2kliQt8SQvu9Dsu+NLaH1b8tNR06/0XTpLuJ7/XLhba3jAPBGrHFLzbc/url3hai9UamKbRdp+V&#xA;q3EVvM2rLDHeS2sVqJISkhN3MYFDxs6uGV1aoAbbetDhpFob/lXcTJ9Yj1P1bRFZp5IofWccZYIA&#xA;ESGST1DzuRyKtQUNCarUUtoS78jTRz6BbW94ktxr8kcUaSARCFpfS4eoeTkD99vyA6HtjSbVr/yA&#xA;tpoV3rD6iBFBHBLDDJF6Ur/WJp4FUo7h1YSWkmwU/DxboTRW2I4pegeS/wAntS1zQ5PM2tajB5a8&#xA;qRGn6WvAWMprSkEIKmTfbqKnYVNcUWj4/LP5BPIID5y1NGJ4/Wm08+lX+biKvTFG6F/NP8pIPJGn&#xA;aRqtprkes6brgaSwlSEwsYwiuHpzkBBWRcUgvOsUuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV9HeRvOB8k/k15H1hmK29x5kk+uimxtHS5gmI8eOzD3GLFjn/OVHlBdM87W/mK1X/QvMEId3X7P&#xA;1mAKj0I2+KPg3ua4qEJ+VZHlH8tfNn5gSjjfXKDQ9BYjf1pxWaRf9UcW/wBicVLKf+crEM+geRNQ&#xA;CBQ8Fwr71Pxx2zqPelGxUML1HyLpyflv5X1zRb3VZtU8zTPpmm6Y8sfopKZ2huE+EKeEzoeKinX4&#xA;sVVPNWg+TvK2qw+WfNXmDWtU1WMxTaq1hJGLS2llAcBRPzaRlVuRbb79gqmuk+SdA1LUvPFrN5m1&#xA;i8s/KkEt4Lu2njdLq1jhrLGKl15sUK8q8SKbYVY5+XXkzyx5t0/zJqOqXupxSeW7abUwYmicyWsY&#xA;aX0wXHwylwx5fZqemBVP8ovKt35584vZXurXllpMNLq9u0mIl5l1gtlDvVfVeSRVU0PtikoCz0e+&#xA;038zI/Ket6hfwiDUH0/6xaSlZVa4k4CaPmacZGKu38wxVkHnbyX5O0i817QpNZ1me98sW4a0kuVj&#xA;NkZZBGY4UZS7Rlw2woK8cUKH5h+VtA0fyNoOuQalq93c+a4zc29tdSRtDGbb01lMxAq7UlpGRSnf&#xA;FQwnyR5e/wAR+cNH0MkrHqF3FBMw6rEzD1GHuEqRikvWv+cqdbMOvaP5NsALfRdGso5Y7SPZBLJy&#xA;Rdu/CJFC/M4oDwrFk9BsvNukebX8o+WfNzzWOh6LE9jFf2rrzU3DpSWQSKy8FCANTegr2xQyfX/y&#xA;a8qeXvM3mK21d9Uh8u6Jp0N9BqYkt+U8kzcI4krHxJlf4EHYqxO2KLS/yn+X35b65ceXNKjudXvN&#xA;c16J55YbJrRobSNZpEHrsy1UqkXJh19twMVso7Qfym/LzWfza1HyPZ6pqE9naQkxahG0H+9EA/fo&#xA;axkMoJ4gim4PUYrbGLnyt+X2qabpjeWrzUrbUtR1aDTUi1cQCIwzKwknRoRQiKQxhvi25YptPPPn&#xA;5afl/wCVp9a0aa81S31vS7NLqxurz0EtNRdjGClugTn8Pqfzt0Phii1XUfyd8vy6R5Pu9BOoT3Hm&#xA;ZJLy5+tS26QWlnaembqSWQR/CFEoox29iaDFbSTRvKn5ca5+Z1n5X0m71OfRLt2to9SZoFkeYVIl&#xA;VTHQRbHYjkeu3TFLHvzE0HSPL3nLU9D0p7iS202ZrYy3RQyPJGaO37tVAWvTFQxvFLsVdirsVdir&#xA;sVdirsVey/mIv1T/AJx+/LqyHICaW7uSCairO71/5LbYsRzZetfzO/5xs4j9/wCYPKZAHd2+pr77&#xA;nnaN9LjFWB/nfcRaFp/lr8t7RwY/Llos+q8KUbULsepJXc/ZDVH+tioZj/zkFS6/J38vNQCEK0Fv&#xA;Qk7j1rFHp/wmKhRW9by3+Vf5Y6nciOQ+XtUe/wBUtY54WmS3uLqR424K5YlkkBpTbvTFUp/NT8vb&#xA;zzn55l8z+UL6y1XRNb9KR7oXUEf1V1jSJ1nWRkdaceXSvbrioKcflRoyeW9Q/Mm30PUre8SGwlsN&#xA;Fv5ZLUJcXqxsyKqSM0bjmR1qvjipK/8ALHzP5w8xeVvPlrrlxZfvtLu9O06MR6dZO960Lj0h6KwM&#xA;32hu3w++KpB5debyB+VsWpSaXZ6rf6/qEM11bzXIBt7e1o9kWWCVJOTTEuOw79sV5sl/Mry0+s/m&#xA;L5K85WAto59QexbXrQXNvytri3ZZWMh9Sm0QK7H9j3wotR/NhvMeu6j5ut5NW0lPJhj/AElY3Kz2&#xA;Mtw81lbFo4IkgmS4YzSkp+8VqdR7hIQPnryff6/5E/LbR7W70+O60u2nj1cTX9nEbUXJgKM6yTKz&#xA;fCjEhATtioLz7yVPpflT849ODXi3em6Xq/1Y6iAESSJZTD69OTgJQ8/tHbFJ5PQf+ct/LN1bebdO&#xA;8xLGTY6harbPIBULcQMx4k9uUbrT5HFAeC4sk2vfK2tWXl7TvMFzCI9M1Z5o7GUsOTm3IWT4ftAA&#xA;mlcUW9c/N258yzfk55HtLq7Sb6mkg1yETwySLIvCOy9QIxZiImfx998UBF/l/pT+VfysudW8uXVh&#xA;deevMqCFHa/srdtPsm3/AN3zRfvDSpA3Dca/Z3VKv+UHlfS/KH5rWbnV7a4gt9F9bW743MH1eG8u&#xA;iw9GOTkA4AUeO9cVJY7quieZtfsNEXzxrem6f9R1K3sbE2k1jLM0Wozj6xM5s5jFGtuEDBio67nF&#xA;Wba5e6n/AMq181aL+Zl1YX8Wnxt/g3WfXt5bu7mo/pFFjZ3O6JyYgNQsDXeiqYR+Y08veR/Iei6t&#xA;ZW+p6FfWk2k+aLNJYJJoDdPD9XYcHL9eVQv4MFwoYdof5XN5Q/OrRbmwv7W/8spdNcQ6gLmD91Eq&#xA;tWOerijp0r+127gBNvPPzlgeP8zvMMpKtFdXktxbyI6urxSMSrAoWG+KQwvFLsVdirsVdirsVdiq&#xA;K0tNNfUrZNTllh05pFF3LAoklWMn4mRWKgkD3xV635488/k55k8n6LoFt+nrSTyzazxaXLJDaGOa&#xA;R0T+/pMx+N4l3UClTixS/wDIH81tM8g6xqh1n1m0nULdeSW6h3+sQtWOikqN1dx18MUkMPutb0nz&#xA;L57vNY8zzXNvp2pXM9xcyWipLPGrBmiRFcqpoeKbnYYq9U85/mn+TnmfyFpvlAQ67Zx6Kkf6NvHi&#xA;tmPK3gMSCWk71Dg70Xbttiing2LJ2KuxV2KuxV2KuxV2KuxV7T5W/PvTLzyp/g78yNLfXNGCLHDf&#xA;wEfWo1QUjLBinJ07SBw3jyxY0lS6V/zjil59YbXNeksw3MWP1aMSEdeBloB7Vpiu6E/OP8yPLfm1&#xA;NB03yzp02m6H5fglgtIZwisRL6YrRGk7RDqxJ64pAebYpdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVeq&#xA;/wDQsf5vf9W2D/pKg/5qxRbv+hY/ze/6tsH/AElQf81Yrbv+hY/ze/6tsH/SVB/zVitu/wChY/ze&#xA;/wCrbB/0lQf81Yrbv+hY/wA3v+rbB/0lQf8ANWK27/oWP83v+rbB/wBJUH/NWK27/oWP83v+rbB/&#xA;0lQf81Yrbv8AoWP83v8Aq2wf9JUH/NWK27/oWP8AN7/q2wf9JUH/ADVitu/6Fj/N7/q2wf8ASVB/&#xA;zVitu/6Fj/N7/q2wf9JUH/NWK27/AKFj/N7/AKtsH/SVB/zVitu/6Fj/ADe/6tsH/SVB/wA1Yrbv&#xA;+hY/ze/6tsH/AElQf81Yrbv+hY/ze/6tsH/SVB/zVitu/wChY/ze/wCrbB/0lQf81Yrbv+hY/wA3&#xA;v+rbB/0lQf8ANWK27/oWP83v+rbB/wBJUH/NWK27/oWP83v+rbB/0lQf81Yrbv8AoWP83v8Aq2wf&#xA;9JUH/NWK27/oWP8AN7/q2wf9JUH/ADVitu/6Fj/N7/q2wf8ASVB/zVitu/6Fj/N7/q2wf9JUH/NW&#xA;K27/AKFj/N7/AKtsH/SVB/zVitu/6Fj/ADe/6tsH/SVB/wA1Yrbv+hY/ze/6tsH/AElQf81Yrbv+&#xA;hY/ze/6tsH/SVB/zVitu/wChY/ze/wCrbB/0lQf81Yrbv+hY/wA3v+rbB/0lQf8ANWK27/oWP83v&#xA;+rbB/wBJUH/NWK27/oWP83v+rbB/0lQf81Yrbv8AoWP83v8Aq2wf9JUH/NWK2//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:InstanceID>xmp.iid:F77F11740720681195FEAF3CB44F5681</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:F77F11740720681195FEAF3CB44F5681</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:bdb21525-7922-df4f-bdf0-4ea70ef2f4aa</stRef:instanceID>
            <stRef:documentID>xmp.did:02801174072068118083C63D354BEC73</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:01801174072068118083C63D354BEC73</stEvt:instanceID>
                  <stEvt:when>2012-12-08T15:39:12-05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:02801174072068118083C63D354BEC73</stEvt:instanceID>
                  <stEvt:when>2012-12-15T19:40:41-05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F77F11740720681195FEAF3CB44F5681</stEvt:instanceID>
                  <stEvt:when>2013-01-11T19:36:17-05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>8.500000</stDim:w>
            <stDim:h>5.500000</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
               <rdf:li>R=53 G=62 B=91</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=53 G=62 B=91</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>52</xmpG:red>
                           <xmpG:green>61</xmpG:green>
                           <xmpG:blue>90</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 9.90</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -396 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 396 li
612 396 li
612 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0 396 mo
612 396 li
612 256.75 li
0 256.75 li
0 396 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
f
gsave
0 0 mo
612 0 li
612 396 li
0 396 li
0 0 li
cp
clp
178.958 52.373 mo
178.361 52.3008 177.749 52.2651 177.12 52.2651 cv
176.491 52.2651 175.879 52.3008 175.282 52.373 cv
175.173 51.9121 li
175.752 51.8398 176.107 51.7739 176.238 51.7148 cv
176.369 51.6563 176.448 51.6001 176.476 51.5459 cv
176.503 51.4912 176.516 51.4048 176.516 51.2881 cv
176.516 44.085 li
174.251 44.085 li
174.115 44.4648 174.02 45.0288 173.966 45.7798 cv
173.464 45.6992 li
173.383 45.0752 173.342 44.5732 173.342 44.1929 cv
173.342 43.813 173.346 43.5332 173.355 43.3521 cv
173.862 43.415 174.319 43.4468 174.726 43.4468 cv
179.514 43.4468 li
179.921 43.4468 180.378 43.415 180.884 43.3521 cv
180.893 43.5151 180.898 43.7788 180.898 44.145 cv
180.898 44.5122 180.853 45.0288 180.762 45.6992 cv
180.274 45.7798 li
180.22 45.0288 180.125 44.4648 179.989 44.085 cv
177.724 44.085 li
177.724 51.2881 li
177.724 51.4048 177.737 51.4912 177.764 51.5459 cv
177.791 51.6001 177.846 51.645 177.927 51.6821 cv
178.062 51.7349 178.37 51.8042 178.85 51.8848 cv
179.066 51.9121 li
178.958 52.373 li
cp
.679 .611 .6 .485 cmyk
f
190.516 47.3271 mo
190.516 44.396 li
190.516 44.27 190.504 44.1802 190.481 44.125 cv
190.459 44.0713 190.402 44.0259 190.313 43.9893 cv
190.149 43.9082 189.896 43.8452 189.553 43.8003 cv
189.376 43.7861 li
189.472 43.3389 li
190.141 43.4111 190.669 43.4473 191.059 43.4473 cv
191.448 43.4473 191.976 43.4111 192.646 43.3389 cv
192.741 43.7861 li
192.144 43.8579 191.813 43.9629 191.75 44.0981 cv
191.731 44.1523 191.724 44.2432 191.724 44.3691 cv
191.724 51.3423 li
191.724 51.4692 191.734 51.5562 191.758 51.606 cv
191.78 51.6563 191.832 51.7041 191.913 51.749 cv
192.049 51.8042 192.274 51.8569 192.592 51.9121 cv
192.741 51.9263 li
192.646 52.373 li
191.976 52.3013 191.448 52.2651 191.059 52.2651 cv
190.669 52.2651 190.141 52.3013 189.472 52.373 cv
189.376 51.9263 li
190.055 51.8442 190.42 51.731 190.475 51.5859 cv
190.502 51.5322 190.516 51.4409 190.516 51.3149 cv
190.516 48.0459 li
185.537 48.0459 li
185.537 51.3149 li
185.537 51.4409 185.549 51.5322 185.572 51.5859 cv
185.594 51.6401 185.646 51.6851 185.727 51.7222 cv
185.898 51.8042 186.157 51.8672 186.5 51.9121 cv
186.677 51.9263 li
186.582 52.373 li
185.913 52.3013 185.384 52.2651 184.995 52.2651 cv
184.605 52.2651 184.077 52.3013 183.408 52.373 cv
183.313 51.9263 li
183.91 51.853 184.234 51.749 184.289 51.6133 cv
184.316 51.5591 184.33 51.4692 184.33 51.3423 cv
184.33 44.3691 li
184.33 44.2432 184.318 44.1553 184.295 44.104 cv
184.273 44.0562 184.217 44.0083 184.126 43.9629 cv
184 43.9082 183.773 43.854 183.449 43.8003 cv
183.313 43.7861 li
183.408 43.3389 li
184.077 43.4111 184.605 43.4473 184.995 43.4473 cv
185.384 43.4473 185.913 43.4111 186.582 43.3389 cv
186.677 43.7861 li
186.233 43.8413 185.933 43.9009 185.774 43.9702 cv
185.617 44.0371 185.537 44.1709 185.537 44.3691 cv
185.537 47.3271 li
190.516 47.3271 li
cp
f
197.407 48.0322 mo
197.407 51.6133 li
200.527 51.6133 li
200.645 51.5054 200.782 51.2544 200.941 50.8604 cv
201.099 50.4673 201.209 50.1533 201.272 49.918 cv
201.761 49.999 li
201.753 50.2534 201.717 50.6484 201.653 51.186 cv
201.59 51.7241 201.531 52.084 201.477 52.2642 cv
196.81 52.2642 li
196.394 52.2642 195.883 52.3013 195.278 52.373 cv
195.182 51.9263 li
195.543 51.8804 195.804 51.8242 195.963 51.7563 cv
196.12 51.688 196.2 51.5464 196.2 51.3291 cv
196.2 44.3555 li
196.2 44.1382 196.126 44.0034 195.983 43.9492 cv
195.865 43.894 195.644 43.8442 195.318 43.8003 cv
195.182 43.7725 li
195.278 43.3252 li
195.965 43.4063 196.476 43.4473 196.81 43.4473 cv
200.215 43.4473 li
200.622 43.4473 200.993 43.4204 201.327 43.3652 cv
201.354 43.6914 201.368 44.0303 201.368 44.3833 cv
201.368 44.7354 201.354 45.0972 201.327 45.4692 cv
200.826 45.5503 li
200.699 44.7813 200.554 44.293 200.391 44.085 cv
197.407 44.085 li
197.407 47.3813 li
199.442 47.3813 li
199.695 47.3813 199.845 47.313 199.89 47.1782 cv
199.944 47.0513 199.993 46.8394 200.039 46.54 cv
200.053 46.377 li
200.568 46.4312 li
200.495 46.8843 200.458 47.3081 200.458 47.707 cv
200.458 48.104 200.495 48.5293 200.568 48.9814 cv
200.053 49.0361 li
200.007 48.6475 199.955 48.3833 199.896 48.2422 cv
199.838 48.1021 199.686 48.0322 199.442 48.0322 cv
197.407 48.0322 li
cp
f
210.443 44.4912 mo
210.443 51.6133 li
213.305 51.6133 li
213.415 51.5054 213.563 51.25 213.753 50.8462 cv
213.943 50.4443 214.069 50.1353 214.133 49.918 cv
214.594 50.0122 li
214.585 50.229 214.542 50.6123 214.465 51.1592 cv
214.388 51.7061 214.323 52.0752 214.27 52.2642 cv
209.807 52.2642 li
209.552 52.2642 209.055 52.3013 208.314 52.373 cv
208.218 51.9395 li
208.581 51.8931 208.84 51.8374 209 51.769 cv
209.156 51.7021 209.236 51.5542 209.236 51.3291 cv
209.236 44.3833 li
209.236 44.166 209.164 44.0264 209.02 43.9634 cv
208.901 43.9082 208.68 43.854 208.354 43.8003 cv
208.218 43.7861 li
208.314 43.3394 li
208.983 43.4111 209.568 43.4473 210.07 43.4473 cv
210.572 43.4473 211.14 43.4111 211.773 43.3394 cv
211.868 43.8271 li
211.29 43.8994 210.925 43.958 210.776 44.0034 cv
210.626 44.0493 210.533 44.1074 210.499 44.1792 cv
210.461 44.2524 210.443 44.3555 210.443 44.4912 cv
f
219.776 44.9795 mo
218.596 48.3716 li
221.282 48.3716 li
220.088 45.0757 li
219.939 44.5044 li
219.844 44.4644 li
219.776 44.9795 li
cp
217.606 51.3823 mo
217.606 51.5635 217.718 51.6855 217.944 51.7495 cv
218.746 51.9253 li
218.665 52.3735 li
218.167 52.3003 217.696 52.2646 217.253 52.2646 cv
216.811 52.2646 216.335 52.3003 215.829 52.3735 cv
215.734 51.9253 li
216.113 51.8438 216.358 51.7515 216.466 51.6475 cv
216.574 51.5435 216.701 51.2925 216.846 50.8945 cv
219.546 43.5146 li
219.943 43.4243 220.288 43.2925 220.576 43.1216 cv
223.493 50.8945 li
223.637 51.2837 223.77 51.5327 223.886 51.6406 cv
224.004 51.7495 224.253 51.8438 224.632 51.9253 cv
224.539 52.3735 li
224.031 52.3003 223.491 52.2646 222.917 52.2646 cv
222.342 52.2646 221.802 52.3003 221.296 52.3735 cv
221.214 51.9253 li
221.53 51.8716 221.797 51.8105 222.014 51.7427 cv
222.232 51.6743 222.34 51.5547 222.34 51.3823 cv
222.34 51.3193 222.326 51.2554 222.299 51.1934 cv
221.526 49.0493 li
218.365 49.0493 li
217.632 51.1934 li
217.614 51.2383 217.606 51.3018 217.606 51.3823 cv
f
224.131 43.3389 mo
224.61 43.4111 225.142 43.4468 225.725 43.4468 cv
226.308 43.4468 226.853 43.4111 227.36 43.3389 cv
227.441 43.7861 li
227.106 43.8408 226.833 43.9019 226.62 43.9697 cv
226.408 44.0371 226.301 44.1611 226.301 44.3428 cv
226.301 44.397 226.31 44.4551 226.329 44.519 cv
228.255 50.3789 li
228.336 50.7729 li
228.418 50.7861 li
228.472 50.3379 li
230.737 43.4609 li
231.714 43.4609 li
233.993 50.4341 li
234.074 50.7861 li
234.142 50.7998 li
234.224 50.3931 li
236.055 44.519 li
236.082 44.4458 236.096 44.3828 236.096 44.3291 cv
236.096 44.1489 235.978 44.0269 235.743 43.9629 cv
234.916 43.7861 li
234.997 43.3389 li
235.494 43.4111 235.967 43.4468 236.415 43.4468 cv
236.862 43.4468 237.325 43.4111 237.805 43.3389 cv
237.9 43.7861 li
237.529 43.8667 237.297 43.958 237.201 44.0581 cv
237.107 44.1567 236.986 44.4102 236.842 44.8179 cv
234.278 52.373 li
233.356 52.373 li
231.063 45.5771 li
230.982 45.2109 li
230.914 45.1968 li
230.805 45.6577 li
228.567 52.373 li
227.631 52.373 li
225.121 44.8179 li
224.985 44.4189 224.865 44.168 224.762 44.0649 cv
224.658 43.96 224.416 43.8667 224.036 43.7861 cv
224.131 43.3389 li
cp
f
248.569 43.8809 mo
247.552 43.8809 246.794 44.2251 246.297 44.9121 cv
245.799 45.6001 245.551 46.5181 245.551 47.666 cv
245.551 48.8149 245.831 49.7959 246.392 50.6099 cv
246.952 51.4238 247.742 51.8301 248.759 51.8301 cv
249.777 51.8301 250.534 51.4868 251.031 50.7998 cv
251.528 50.1118 251.777 49.1938 251.777 48.0459 cv
251.777 46.8979 251.497 45.916 250.936 45.1021 cv
250.376 44.2881 249.587 43.8809 248.569 43.8809 cv
248.671 52.4819 mo
247.305 52.4819 246.215 52.0879 245.402 51.3018 cv
244.588 50.5146 244.181 49.4297 244.181 48.0459 cv
244.181 46.6621 244.585 45.5137 245.395 44.6011 cv
246.204 43.687 247.292 43.231 248.657 43.231 cv
250.023 43.231 251.112 43.623 251.926 44.4102 cv
252.74 45.1968 253.148 46.2817 253.148 47.666 cv
253.148 49.0498 252.743 50.1978 251.933 51.1108 cv
251.124 52.0259 250.036 52.4819 248.671 52.4819 cv
f
259.007 48.0869 mo
257.23 48.0869 li
257.23 51.2197 li
257.23 51.356 257.248 51.46 257.284 51.5317 cv
257.32 51.605 257.402 51.6592 257.528 51.6948 cv
258.654 51.8848 li
258.559 52.373 li
257.926 52.3008 257.359 52.2651 256.857 52.2651 cv
256.355 52.2651 255.77 52.3008 255.1 52.373 cv
255.005 51.9258 li
255.367 51.8799 255.627 51.8237 255.785 51.7559 cv
255.943 51.689 256.023 51.5459 256.023 51.3291 cv
256.023 44.356 li
256.023 44.1299 255.95 43.9941 255.805 43.9487 cv
255.57 43.8672 255.303 43.8091 255.005 43.7729 cv
255.1 43.3247 li
255.787 43.4058 256.299 43.4468 256.633 43.4468 cv
259.902 43.4468 li
260.3 43.4468 260.671 43.4199 261.015 43.3647 cv
261.042 43.6191 261.055 43.9287 261.055 44.2949 cv
261.055 44.6611 261.046 45.062 261.028 45.4951 cv
260.526 45.5771 li
260.354 44.7451 260.201 44.2471 260.065 44.085 cv
257.23 44.085 li
257.23 47.436 li
259.007 47.436 li
259.26 47.436 259.409 47.3672 259.455 47.2319 cv
259.509 47.106 259.554 46.8931 259.59 46.5947 cv
259.617 46.4321 li
260.133 46.4849 li
260.06 46.939 260.025 47.3628 260.025 47.7607 cv
260.025 48.1592 260.06 48.584 260.133 49.0361 cv
259.617 49.0898 li
259.572 48.7012 259.521 48.438 259.462 48.2969 cv
259.403 48.1558 259.251 48.0869 259.007 48.0869 cv
f
267.31 48.0869 mo
265.533 48.0869 li
265.533 51.2197 li
265.533 51.356 265.551 51.46 265.586 51.5317 cv
265.623 51.605 265.705 51.6592 265.831 51.6948 cv
266.957 51.8848 li
266.861 52.373 li
266.229 52.3008 265.662 52.2651 265.16 52.2651 cv
264.658 52.2651 264.072 52.3008 263.402 52.373 cv
263.308 51.9258 li
263.669 51.8799 263.93 51.8237 264.087 51.7559 cv
264.246 51.689 264.326 51.5459 264.326 51.3291 cv
264.326 44.356 li
264.326 44.1299 264.252 43.9941 264.107 43.9487 cv
263.873 43.8672 263.605 43.8091 263.308 43.7729 cv
263.402 43.3247 li
264.09 43.4058 264.602 43.4468 264.936 43.4468 cv
268.205 43.4468 li
268.603 43.4468 268.974 43.4199 269.317 43.3647 cv
269.345 43.6191 269.357 43.9287 269.357 44.2949 cv
269.357 44.6611 269.349 45.062 269.331 45.4951 cv
268.829 45.5771 li
268.657 44.7451 268.503 44.2471 268.368 44.085 cv
265.533 44.085 li
265.533 47.436 li
267.31 47.436 li
267.563 47.436 267.711 47.3672 267.758 47.2319 cv
267.812 47.106 267.856 46.8931 267.893 46.5947 cv
267.919 46.4321 li
268.436 46.4849 li
268.363 46.939 268.328 47.3628 268.328 47.7607 cv
268.328 48.1592 268.363 48.584 268.436 49.0361 cv
267.919 49.0898 li
267.875 48.7012 267.823 48.438 267.765 48.2969 cv
267.706 48.1558 267.554 48.0869 267.31 48.0869 cv
f
273.834 44.3691 mo
273.834 51.3423 li
273.834 51.4692 273.845 51.5571 273.868 51.606 cv
273.891 51.6563 273.943 51.7041 274.024 51.749 cv
274.16 51.8042 274.395 51.8569 274.73 51.9121 cv
274.879 51.9263 li
274.784 52.373 li
274.178 52.3013 273.665 52.2651 273.244 52.2651 cv
272.824 52.2651 272.31 52.3013 271.705 52.373 cv
271.609 51.9263 li
272.207 51.853 272.532 51.749 272.586 51.6133 cv
272.613 51.5591 272.627 51.4692 272.627 51.3423 cv
272.627 44.3691 li
272.627 44.2432 272.615 44.1553 272.593 44.104 cv
272.57 44.0562 272.514 44.0083 272.423 43.9629 cv
272.296 43.9082 272.071 43.854 271.745 43.8003 cv
271.609 43.7861 li
271.705 43.3389 li
272.31 43.4111 272.824 43.4473 273.244 43.4473 cv
273.665 43.4473 274.178 43.4111 274.784 43.3389 cv
274.879 43.7861 li
274.273 43.8579 273.934 43.9629 273.861 44.0981 cv
273.843 44.1523 273.834 44.2432 273.834 44.3691 cv
f
281.838 52.4814 mo
280.49 52.4814 279.389 52.0942 278.535 51.3223 cv
277.68 50.5483 277.253 49.4692 277.253 48.0864 cv
277.253 46.7036 277.678 45.5474 278.528 44.6206 cv
279.378 43.6934 280.518 43.2305 281.946 43.2305 cv
282.507 43.2305 282.986 43.2666 283.384 43.3384 cv
283.782 43.4116 284.144 43.4814 284.47 43.5483 cv
284.796 43.6162 284.981 43.6553 285.026 43.6646 cv
284.936 44.6504 284.814 45.4224 284.66 45.9834 cv
284.198 46.0654 li
284.081 45.1064 283.927 44.4873 283.737 44.2075 cv
283.303 43.9717 282.618 43.8545 281.682 43.8545 cv
280.746 43.8545 280.002 44.2104 279.45 44.9253 cv
278.899 45.6406 278.623 46.5723 278.623 47.7192 cv
278.623 48.8696 278.933 49.8452 279.552 50.6504 cv
280.171 51.4556 280.979 51.8574 281.974 51.8574 cv
282.688 51.8574 283.233 51.6924 283.609 51.3623 cv
283.984 51.0322 284.28 50.4922 284.497 49.7412 cv
284.958 49.8096 li
284.949 50.4873 284.854 51.2295 284.673 52.0342 cv
283.796 52.3325 282.851 52.4814 281.838 52.4814 cv
f
290.099 48.0322 mo
290.099 51.6133 li
293.219 51.6133 li
293.337 51.5054 293.474 51.2544 293.633 50.8604 cv
293.791 50.4673 293.902 50.1533 293.965 49.918 cv
294.453 49.999 li
294.445 50.2534 294.409 50.6484 294.345 51.186 cv
294.282 51.7241 294.223 52.084 294.169 52.2642 cv
289.502 52.2642 li
289.086 52.2642 288.575 52.3013 287.97 52.373 cv
287.874 51.9263 li
288.236 51.8804 288.496 51.8242 288.655 51.7563 cv
288.812 51.688 288.892 51.5464 288.892 51.3291 cv
288.892 44.3555 li
288.892 44.1382 288.819 44.0034 288.675 43.9492 cv
288.557 43.894 288.336 43.8442 288.01 43.8003 cv
287.874 43.7725 li
287.97 43.3252 li
288.657 43.4063 289.168 43.4473 289.502 43.4473 cv
292.907 43.4473 li
293.314 43.4473 293.685 43.4204 294.019 43.3652 cv
294.047 43.6914 294.06 44.0303 294.06 44.3833 cv
294.06 44.7354 294.047 45.0972 294.019 45.4692 cv
293.518 45.5503 li
293.391 44.7813 293.246 44.293 293.083 44.085 cv
290.099 44.085 li
290.099 47.3813 li
292.134 47.3813 li
292.387 47.3813 292.537 47.313 292.582 47.1782 cv
292.636 47.0513 292.685 46.8394 292.731 46.54 cv
292.745 46.377 li
293.26 46.4312 li
293.187 46.8843 293.151 47.3081 293.151 47.707 cv
293.151 48.104 293.187 48.5293 293.26 48.9814 cv
292.745 49.0361 li
292.699 48.6475 292.647 48.3833 292.588 48.2422 cv
292.53 48.1021 292.378 48.0322 292.134 48.0322 cv
290.099 48.0322 li
cp
f
306.344 43.8809 mo
305.326 43.8809 304.569 44.2251 304.072 44.9121 cv
303.574 45.6001 303.325 46.5181 303.325 47.666 cv
303.325 48.8149 303.606 49.7959 304.166 50.6099 cv
304.727 51.4238 305.516 51.8301 306.533 51.8301 cv
307.551 51.8301 308.308 51.4868 308.806 50.7998 cv
309.303 50.1118 309.552 49.1938 309.552 48.0459 cv
309.552 46.8979 309.271 45.916 308.711 45.1021 cv
308.149 44.2881 307.36 43.8809 306.344 43.8809 cv
306.446 52.4819 mo
305.079 52.4819 303.99 52.0879 303.176 51.3018 cv
302.362 50.5146 301.955 49.4297 301.955 48.0459 cv
301.955 46.6621 302.36 45.5137 303.169 44.6011 cv
303.979 43.687 305.067 43.231 306.432 43.231 cv
307.797 43.231 308.887 43.623 309.701 44.4102 cv
310.515 45.1968 310.922 46.2817 310.922 47.666 cv
310.922 49.0498 310.517 50.1978 309.708 51.1108 cv
308.898 52.0259 307.811 52.4819 306.446 52.4819 cv
f
316.781 48.0869 mo
315.005 48.0869 li
315.005 51.2197 li
315.005 51.356 315.022 51.46 315.059 51.5317 cv
315.095 51.605 315.178 51.6592 315.303 51.6948 cv
316.429 51.8848 li
316.334 52.373 li
315.701 52.3008 315.135 52.2651 314.632 52.2651 cv
314.13 52.2651 313.544 52.3008 312.875 52.373 cv
312.78 51.9258 li
313.142 51.8799 313.401 51.8237 313.56 51.7559 cv
313.719 51.689 313.797 51.5459 313.797 51.3291 cv
313.797 44.356 li
313.797 44.1299 313.725 43.9941 313.58 43.9487 cv
313.345 43.8672 313.078 43.8091 312.78 43.7729 cv
312.875 43.3247 li
313.562 43.4058 314.073 43.4468 314.407 43.4468 cv
317.678 43.4468 li
318.075 43.4468 318.445 43.4199 318.789 43.3647 cv
318.816 43.6191 318.83 43.9287 318.83 44.2949 cv
318.83 44.6611 318.821 45.062 318.803 45.4951 cv
318.302 45.5771 li
318.129 44.7451 317.976 44.2471 317.84 44.085 cv
315.005 44.085 li
315.005 47.436 li
316.781 47.436 li
317.035 47.436 317.184 47.3672 317.229 47.2319 cv
317.283 47.106 317.329 46.8931 317.365 46.5947 cv
317.393 46.4321 li
317.907 46.4849 li
317.835 46.939 317.799 47.3628 317.799 47.7607 cv
317.799 48.1592 317.835 48.584 317.907 49.0361 cv
317.393 49.0898 li
317.347 48.7012 317.295 48.438 317.236 48.2969 cv
317.178 48.1558 317.025 48.0869 316.781 48.0869 cv
f
148.654 41.5225 mo
151.128 42.0654 153.875 42.3374 156.893 42.3374 cv
159.91 42.3374 162.838 42.0654 165.675 41.5225 cv
166.309 44.5107 li
163.955 44.8135 162.25 45.1743 161.194 45.5967 cv
160.137 46.0195 159.609 47.0767 159.609 48.7656 cv
162.325 94.6685 li
162.446 96.2393 162.989 97.2646 163.955 97.7476 cv
164.739 98.1094 166.4 98.5024 168.934 98.9233 cv
168.3 101.913 li
164.257 101.428 160.664 101.188 157.527 101.188 cv
154.387 101.188 150.827 101.428 146.843 101.913 cv
146.21 98.7437 li
149.347 98.3804 151.49 97.9277 152.638 97.3843 cv
153.724 96.9624 154.236 96.0576 154.177 94.6685 cv
151.551 49.3994 li
151.008 48.9463 li
150.343 51.9653 149.709 54.1987 149.107 55.6465 cv
136.069 88.3315 li
134.861 91.4697 133.625 95.0913 132.357 99.1953 cv
131.723 101.188 li
126.292 102.727 li
124.6 97.0537 123.122 92.6475 121.855 89.5073 cv
108.364 55.7373 li
106.645 49.7617 li
106.01 50.2134 li
102.841 94.6685 li
102.78 95.4546 102.856 96.0264 103.068 96.3887 cv
103.279 96.7515 103.656 97.0845 104.199 97.3843 cv
105.105 97.7476 106.917 98.1406 109.632 98.5615 cv
110.809 98.7437 li
110.175 101.913 li
106.131 101.428 102.991 101.188 100.759 101.188 cv
98.5254 101.188 95.3862 101.428 91.3433 101.913 cv
90.7095 98.9233 li
92.8213 98.6235 94.4512 98.2305 95.5981 97.7476 cv
96.5635 97.2646 97.0771 96.3296 97.1372 94.9404 cv
100.487 48.4946 li
100.608 47.0454 100.125 46.1104 99.0391 45.6875 cv
98.2544 45.2656 96.8354 44.9336 94.7832 44.6914 cv
93.7881 44.5107 li
94.4224 41.5225 li
97.2583 42.0654 100.336 42.3374 103.656 42.3374 cv
106.975 42.3374 109.872 42.0654 112.348 41.5225 cv
112.83 43.6953 113.434 45.7485 114.159 47.6797 cv
129.188 86.8823 li
130.365 91.1377 li
131 91.3184 li
131.18 89.3276 131.452 87.8774 131.814 86.9727 cv
146.571 48.2227 li
148.654 41.5225 li
cp
/0 
<<
/Name (R=53 G=62 B=91)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ .845823 .752651 .405432 .304021 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
f
180.79 63.3135 mo
180.79 84.5005 li
180.79 84.8716 180.825 85.1357 180.897 85.2925 cv
180.969 85.4507 181.147 85.6006 181.434 85.7437 cv
181.891 86.0015 182.576 86.2446 183.492 86.4727 cv
183.964 86.5586 li
183.663 88.2305 li
181.69 87.9736 179.825 87.8447 178.066 87.8447 cv
176.309 87.8447 174.443 87.9736 172.47 88.2305 cv
172.17 86.5586 li
173.942 86.1865 174.942 85.7573 175.172 85.2715 cv
175.228 85.1284 175.258 84.8716 175.258 84.5005 cv
175.258 63.3135 li
175.258 62.9424 175.222 62.6777 175.15 62.5205 cv
175.079 62.3633 174.915 62.2124 174.657 62.0703 cv
174.171 61.8125 173.484 61.5703 172.599 61.3403 cv
172.17 61.2544 li
172.47 59.5825 li
174.443 59.8394 176.309 59.9688 178.066 59.9688 cv
179.825 59.9688 181.69 59.8394 183.663 59.5825 cv
183.964 61.2544 li
182.134 61.5977 181.118 62.0273 180.919 62.5425 cv
180.833 62.6846 180.79 62.9424 180.79 63.3135 cv
f
201.933 88.5313 mo
197.358 88.5313 193.62 87.3081 190.718 84.8643 cv
187.815 82.4204 186.366 79.1382 186.366 75.021 cv
186.366 70.3892 187.809 66.6094 190.697 63.6772 cv
193.583 60.748 197.443 59.2822 202.275 59.2822 cv
203.82 59.2822 205.127 59.3682 206.201 59.5391 cv
207.272 59.7114 207.995 59.8252 208.367 59.8833 cv
208.738 59.9404 209.422 60.0752 210.424 60.29 cv
211.425 60.5054 212.025 60.626 212.226 60.6543 cv
211.939 63.8574 211.554 66.373 211.067 68.2021 cv
208.751 68.6323 li
208.351 65.5723 207.866 63.6294 207.293 62.7993 cv
206.121 62.0552 204.191 61.6831 201.503 61.6831 cv
198.816 61.6831 196.701 62.77 195.157 64.9434 cv
193.613 67.1162 192.841 69.9541 192.841 73.4561 cv
192.841 76.959 193.72 79.9473 195.479 82.4204 cv
197.237 84.8921 199.532 86.1294 202.362 86.1294 cv
204.419 86.1294 206 85.6084 207.101 84.563 cv
208.202 83.52 209.066 81.812 209.696 79.438 cv
212.011 79.6533 li
211.982 81.5693 211.682 84.0562 211.11 87.1152 cv
208.281 88.0591 205.221 88.5313 201.933 88.5313 cv
f
238.515 71.8477 mo
238.515 63.3999 li
238.515 62.9985 238.479 62.7129 238.409 62.5415 cv
238.335 62.3696 238.171 62.2275 237.915 62.1128 cv
237.371 61.8555 236.6 61.6558 235.599 61.5127 cv
235.041 61.4697 li
235.427 59.5815 li
237.542 59.8398 239.487 59.9688 241.26 59.9688 cv
243.033 59.9688 244.875 59.8398 246.792 59.5815 cv
247.136 61.2549 li
246.049 61.4849 245.263 61.7349 244.776 62.0059 cv
244.29 62.2778 244.047 62.7129 244.047 63.3135 cv
244.047 84.4995 li
244.047 85.0996 244.219 85.5005 244.563 85.7007 cv
245.104 85.9868 245.821 86.2437 246.706 86.4727 cv
247.136 86.5586 li
246.792 88.2305 li
244.875 87.9736 243.033 87.8447 241.26 87.8447 cv
239.487 87.8447 237.529 87.9736 235.385 88.2305 cv
235.041 86.3438 li
237.1 86.0859 238.229 85.7295 238.43 85.2715 cv
238.487 85.0996 238.515 84.8145 238.515 84.4136 cv
238.515 74.7646 li
224.919 74.7646 li
224.919 84.4136 li
224.919 84.8145 224.955 85.0996 225.027 85.2715 cv
225.099 85.4438 225.277 85.5869 225.563 85.7007 cv
226.049 85.9575 226.822 86.1587 227.878 86.3008 cv
228.394 86.3438 li
228.051 88.2305 li
225.907 87.9736 223.955 87.8447 222.197 87.8447 cv
220.438 87.8447 218.586 87.9736 216.643 88.2305 cv
216.3 86.5586 li
217.386 86.3296 218.171 86.0796 218.659 85.8076 cv
219.145 85.5356 219.388 85.0996 219.388 84.4995 cv
219.388 63.3135 li
219.388 62.7129 219.216 62.3135 218.873 62.1128 cv
218.329 61.8267 217.615 61.5708 216.729 61.3408 cv
216.3 61.2549 li
216.686 59.5815 li
218.574 59.8398 220.41 59.9688 222.197 59.9688 cv
223.983 59.9688 225.92 59.8398 228.008 59.5815 cv
228.394 61.4697 li
227.05 61.6406 226.135 61.8335 225.649 62.0488 cv
225.162 62.2627 224.919 62.6846 224.919 63.3135 cv
224.919 71.8477 li
238.515 71.8477 li
cp
f
261.888 67.0449 mo
259.015 75.3218 li
265.747 75.3218 li
262.874 67.3447 li
262.403 65.5439 li
262.103 65.415 li
261.888 67.0449 li
cp
255.97 84.6279 mo
255.97 85.1431 256.326 85.5288 257.041 85.7861 cv
259.444 86.5591 li
259.186 88.231 li
257.327 87.9741 255.755 87.8447 254.469 87.8447 cv
253.182 87.8447 251.552 87.9741 249.579 88.231 cv
249.237 86.5591 li
250.522 86.3008 251.338 86.001 251.681 85.6567 cv
252.023 85.3149 252.438 84.457 252.925 83.084 cv
261.33 60.1831 li
262.674 59.9258 263.947 59.4971 265.147 58.897 cv
274.496 83.084 li
275.011 84.4287 275.439 85.2788 275.784 85.6357 cv
276.125 85.9941 276.855 86.3008 277.97 86.5591 cv
277.67 88.231 li
275.698 87.9741 273.775 87.8447 271.902 87.8447 cv
270.029 87.8447 268.021 87.9741 265.875 88.231 cv
265.619 86.5591 li
266.563 86.2729 267.37 86.001 268.042 85.7432 cv
268.713 85.4858 269.05 85.1138 269.05 84.6279 cv
269.05 84.4287 269.007 84.229 268.921 84.0269 cv
266.734 78.0659 li
258.071 78.0659 li
256.055 84.0269 li
255.997 84.1709 255.97 84.3711 255.97 84.6279 cv
f
300.228 59.7109 mo
300.313 63.4419 li
300.313 64.4429 300.271 65.4429 300.186 66.4438 cv
298.211 66.7871 li
297.812 64.5859 297.354 63.1851 296.839 62.584 cv
288.691 62.584 li
288.691 72.02 li
293.624 72.02 li
294.337 72.02 294.81 71.8047 295.04 71.376 cv
295.209 71.062 295.424 70.4038 295.682 69.4028 cv
295.768 68.9751 li
297.612 69.1899 li
297.382 70.7051 297.269 72.1118 297.269 73.4131 cv
297.269 74.7148 297.382 76.0801 297.612 77.5088 cv
295.768 77.6807 li
295.511 76.5649 295.274 75.7871 295.061 75.3428 cv
294.846 74.8999 294.367 74.6787 293.624 74.6787 cv
288.691 74.6787 li
288.691 85.186 li
297.269 85.186 li
297.64 84.8711 298.077 84.1348 298.578 82.978 cv
299.078 81.8188 299.426 80.8828 299.627 80.168 cv
301.601 80.5107 li
301.571 81.3408 301.457 82.6201 301.256 84.3501 cv
301.057 86.0801 300.872 87.2441 300.701 87.8447 cv
285.732 87.8447 li
284.56 87.8447 282.745 87.9741 280.287 88.231 cv
279.942 86.5591 li
281.8 86.187 282.844 85.7578 283.073 85.272 cv
283.129 85.1289 283.16 84.8569 283.16 84.457 cv
283.16 63.271 li
283.16 62.6128 282.93 62.1851 282.473 61.9839 cv
281.93 61.7271 281.244 61.5127 280.415 61.3408 cv
279.942 61.2119 li
280.329 59.5391 li
283.073 59.8247 284.875 59.9688 285.732 59.9688 cv
296.283 59.9688 li
297.655 59.9688 298.97 59.8828 300.228 59.7109 cv
f
313.308 63.6992 mo
313.308 85.1421 li
320.855 85.1421 li
321.227 84.8281 321.705 84.0923 322.292 82.9341 cv
322.878 81.7764 323.271 80.8691 323.472 80.2114 cv
325.53 80.5962 li
325.502 81.311 325.373 82.5483 325.145 84.3062 cv
324.915 86.0645 324.716 87.2441 324.544 87.8452 cv
310.22 87.8452 li
309.591 87.8452 307.861 87.9731 305.031 88.23 cv
304.688 86.6001 li
305.773 86.3721 306.56 86.1221 307.046 85.8501 cv
307.532 85.5791 307.775 85.1143 307.775 84.457 cv
307.775 63.3564 li
307.775 62.7271 307.604 62.313 307.261 62.1123 cv
306.717 61.8271 306.001 61.5703 305.117 61.3413 cv
304.688 61.2554 li
305.074 59.582 li
307.046 59.8403 309.068 59.9692 311.142 59.9692 cv
313.215 59.9692 315.28 59.8403 317.339 59.582 cv
317.683 61.3843 li
315.909 61.7261 314.737 62.0063 314.165 62.2202 cv
313.593 62.4341 313.308 62.9282 313.308 63.6992 cv
f
369.437 102.636 mo
360.442 102.636 353.094 100.056 347.391 94.8955 cv
341.687 89.7349 338.833 82.5356 338.833 73.3018 cv
338.833 64.0669 341.671 56.3569 347.345 50.1689 cv
353.018 43.9829 360.623 40.8887 370.161 40.8887 cv
373.902 40.8887 377.102 41.1309 379.758 41.6138 cv
382.413 42.0967 384.828 42.5635 387 43.0166 cv
389.174 43.4688 390.41 43.7266 390.713 43.7856 cv
390.109 50.3647 389.294 55.5269 388.269 59.2686 cv
385.19 59.8115 li
384.405 53.4136 383.379 49.2798 382.112 47.4067 cv
379.215 45.8389 374.643 45.0537 368.396 45.0537 cv
362.148 45.0537 357.183 47.4385 353.502 52.2056 cv
349.819 56.9746 347.979 63.1929 347.979 70.8579 cv
347.979 78.5239 350.046 85.0415 354.181 90.4126 cv
358.314 95.7856 363.701 98.4717 370.342 98.4717 cv
375.109 98.4717 378.746 97.3706 381.252 95.1665 cv
383.756 92.9639 385.733 89.3589 387.182 84.3477 cv
390.261 84.7998 li
390.199 89.3267 389.565 94.2778 388.359 99.6489 cv
382.504 101.641 376.195 102.636 369.437 102.636 cv
f
393.255 59.3604 mo
395.269 59.6484 397.276 59.7925 399.276 59.7925 cv
401.276 59.7925 403.484 59.6484 405.901 59.3604 cv
405.771 61.0005 li
404.937 61.1733 404.275 61.3965 403.786 61.6694 cv
403.296 61.9434 403.052 62.3022 403.052 62.7485 cv
403.052 63.1943 403.167 63.6045 403.397 63.9785 cv
408.188 72.3076 li
412.763 63.9346 li
413.05 63.4463 413.194 63.0366 413.194 62.7056 cv
413.194 62.3755 413.043 62.1006 412.741 61.8843 cv
412.439 61.6694 411.511 61.3755 409.957 61.0005 cv
409.828 59.3604 li
412.187 59.6484 413.956 59.7925 415.137 59.7925 cv
416.315 59.7925 417.884 59.6484 419.841 59.3604 cv
419.668 61.0005 li
418.776 61.0874 418.057 61.3315 417.51 61.7344 cv
416.963 62.1372 416.431 62.8994 415.913 64.0215 cv
409.138 75.9326 li
409.138 84.4785 li
409.138 84.8813 409.173 85.1626 409.245 85.3203 cv
409.316 85.4785 409.482 85.6304 409.741 85.7734 cv
410.316 86.0615 411.151 86.3203 412.245 86.5493 cv
412.849 86.6362 li
412.461 88.1904 li
410.303 87.9595 408.31 87.8442 406.484 87.8442 cv
404.655 87.8442 402.75 87.9595 400.765 88.1904 cv
400.419 86.5923 li
402.52 86.2485 403.671 85.8315 403.872 85.3413 cv
403.958 85.1694 404.002 84.8813 404.002 84.4785 cv
404.002 76.0195 li
396.881 63.7192 li
396.391 62.7134 395.902 62.0293 395.413 61.6694 cv
394.924 61.3096 394.262 61.0874 393.428 61.0005 cv
393.255 59.3604 li
cp
f
427.782 59.792 mo
443.405 59.792 li
443.794 62.166 li
428.645 84.9102 li
439.003 84.9102 li
439.435 84.5078 440.067 83.5581 440.902 82.062 cv
441.736 80.5649 442.297 79.415 442.585 78.6079 cv
444.786 79.127 li
444.757 79.9331 444.555 81.3931 444.182 83.5068 cv
443.808 85.6221 443.506 87.0679 443.275 87.8452 cv
422.517 87.8452 li
421.912 85.6011 li
437.19 62.7271 li
427.351 62.7271 li
426.516 63.8491 425.781 65.748 425.149 68.4238 cv
422.991 68.0352 li
422.991 63.7769 423.077 61.1021 423.25 60.0078 cv
424.718 59.23 li
425.581 59.605 426.602 59.792 427.782 59.792 cv
f
468.565 59.5332 mo
468.651 63.2881 li
468.651 64.2954 468.608 65.3022 468.521 66.3081 cv
466.536 66.6543 li
466.133 64.4385 465.674 63.0283 465.155 62.4253 cv
456.955 62.4253 li
456.955 71.9194 li
461.919 71.9194 li
462.638 71.9194 463.112 71.7031 463.343 71.271 cv
463.516 70.9561 463.731 70.2944 463.99 69.2871 cv
464.076 68.8555 li
465.933 69.0713 li
465.702 70.5962 465.586 72.0122 465.586 73.3223 cv
465.586 74.6323 465.702 76.0054 465.933 77.4434 cv
464.076 77.6162 li
463.817 76.4941 463.58 75.7114 463.364 75.2632 cv
463.148 74.8184 462.666 74.5952 461.919 74.5952 cv
456.955 74.5952 li
456.955 85.1694 li
465.586 85.1694 li
465.961 84.8521 466.399 84.1113 466.903 82.9463 cv
467.406 81.7813 467.759 80.8394 467.961 80.1191 cv
469.946 80.4653 li
469.917 81.3003 469.802 82.5874 469.601 84.3271 cv
469.399 86.0684 469.211 87.2402 469.04 87.8452 cv
453.978 87.8452 li
452.798 87.8452 450.971 87.9741 448.496 88.2334 cv
448.151 86.5503 li
450.021 86.1772 451.071 85.7451 451.302 85.2554 cv
451.359 85.1113 451.388 84.8394 451.388 84.4351 cv
451.388 63.1152 li
451.388 62.4531 451.157 62.021 450.697 61.8203 cv
450.15 61.561 449.46 61.3462 448.626 61.1733 cv
448.151 61.043 li
448.539 59.3604 li
451.302 59.6484 453.114 59.792 453.978 59.792 cv
464.595 59.792 li
465.976 59.792 467.299 59.7051 468.565 59.5332 cv
f
482.548 86.1182 mo
483.843 86.1182 484.914 85.7163 485.764 84.9102 cv
486.611 84.104 487.036 82.9971 487.036 81.5874 cv
487.036 80.2642 486.461 79.1123 485.311 78.1343 cv
484.361 77.3291 483.275 76.5732 482.052 75.8682 cv
480.828 75.1641 480.059 74.7183 479.743 74.5303 cv
479.426 74.3442 478.894 73.9912 478.146 73.4722 cv
477.397 72.9551 476.857 72.5103 476.527 72.1353 cv
476.196 71.7622 475.815 71.3013 475.384 70.7544 cv
474.606 69.7183 474.219 68.4092 474.219 66.8262 cv
474.219 64.4102 475.117 62.5181 476.916 61.1514 cv
478.714 59.7852 481.009 59.1011 483.8 59.1011 cv
484.807 59.1011 487.425 59.4751 491.654 60.2231 cv
491.625 60.9141 491.475 62.0654 491.201 63.6763 cv
490.928 65.2881 490.705 66.4102 490.532 67.042 cv
488.418 67.3452 li
488.216 65.0142 487.943 63.4033 487.598 62.5112 cv
486.619 61.792 485.238 61.4312 483.454 61.4312 cv
482.332 61.4312 481.404 61.7842 480.671 62.4893 cv
479.937 63.1943 479.57 64.166 479.57 65.4023 cv
479.57 66.6113 480.188 67.6763 481.426 68.5962 cv
482.347 69.2871 483.512 70.0273 484.922 70.8184 cv
486.331 71.6104 487.367 72.2222 488.029 72.6533 cv
488.69 73.085 489.453 73.6602 490.316 74.3794 cv
491.928 75.7891 492.734 77.5884 492.734 79.7744 cv
492.734 82.623 491.719 84.7954 489.69 86.291 cv
487.662 87.7871 485.166 88.5352 482.203 88.5352 cv
479.239 88.5352 476.506 88.0034 474.003 86.938 cv
473.944 86.5645 473.916 85.4063 473.916 83.4644 cv
473.916 81.5225 473.974 80.2783 474.089 79.7314 cv
476.333 79.2563 li
476.506 81.27 477.095 82.918 478.103 84.1982 cv
479.11 85.478 480.591 86.1182 482.548 86.1182 cv
f
515.133 61.8633 mo
515.133 61.4614 514.327 61.1304 512.716 60.8711 cv
513.018 59.4463 li
514.428 59.6763 515.881 59.7925 517.377 59.7925 cv
518.873 59.7925 520.354 59.6763 521.822 59.4463 cv
522.124 60.8711 li
521.146 61.0142 520.369 61.2373 519.794 61.5405 cv
519.218 61.8423 518.629 62.3242 518.024 62.9854 cv
509.651 71.8335 li
520.484 83.7012 li
521.462 84.7661 522.268 85.4785 522.901 85.8384 cv
523.534 86.1982 524.368 86.5073 525.404 86.7651 cv
525.103 88.1904 li
523.174 87.9595 521.038 87.8442 518.693 87.8442 cv
516.348 87.8442 514.384 87.9595 512.802 88.1904 cv
512.414 86.7651 li
512.529 86.7373 512.701 86.7012 512.932 86.6582 cv
513.161 86.6143 513.334 86.5791 513.449 86.5503 cv
513.564 86.5215 513.715 86.4854 513.902 86.4424 cv
514.09 86.3984 514.233 86.3555 514.334 86.3125 cv
514.435 86.2695 514.529 86.2192 514.615 86.1611 cv
514.815 86.0474 514.917 85.8672 514.917 85.6221 cv
514.917 85.3784 514.658 84.9673 514.14 84.3911 cv
505.163 74.1631 li
505.163 72.7393 li
514.485 62.9854 li
514.917 62.5254 515.133 62.1514 515.133 61.8633 cv
504.559 63.1582 mo
504.559 84.4785 li
504.559 84.8525 504.595 85.1191 504.667 85.2764 cv
504.738 85.4355 504.918 85.5864 505.206 85.7295 cv
505.666 85.9893 506.472 86.2334 507.623 86.4644 cv
508.185 86.5503 li
507.882 88.2334 li
505.725 87.9741 503.731 87.8442 501.904 87.8442 cv
500.077 87.8442 498.172 87.9741 496.187 88.2334 cv
495.884 86.5503 li
497.668 86.1763 498.675 85.7451 498.904 85.2554 cv
498.963 85.1113 498.991 84.8525 498.991 84.4785 cv
498.991 63.1582 li
498.991 62.7842 498.955 62.5186 498.884 62.3594 cv
498.812 62.2021 498.646 62.0513 498.388 61.9063 cv
497.897 61.6475 497.207 61.4033 496.315 61.1733 cv
495.884 61.0874 li
496.187 59.4033 li
498.172 59.6621 500.049 59.7925 501.818 59.7925 cv
503.588 59.7925 505.465 59.6621 507.45 59.4033 cv
507.753 61.0874 li
505.911 61.4312 504.89 61.8633 504.688 62.3813 cv
504.603 62.5254 504.559 62.7842 504.559 63.1582 cv
f
535.935 63.1582 mo
535.935 84.478 li
535.935 84.8521 535.971 85.1191 536.043 85.2764 cv
536.114 85.4351 536.294 85.5864 536.582 85.729 cv
537.042 85.9893 537.732 86.2334 538.654 86.4644 cv
539.129 86.5503 li
538.826 88.2334 li
536.841 87.9741 534.964 87.8452 533.194 87.8452 cv
531.425 87.8452 529.548 87.9741 527.563 88.2334 cv
527.26 86.5503 li
529.044 86.1772 530.051 85.7451 530.281 85.2554 cv
530.339 85.1113 530.367 84.8521 530.367 84.478 cv
530.367 63.1582 li
530.367 62.7842 530.33 62.5181 530.26 62.3594 cv
530.188 62.2021 530.022 62.0513 529.764 61.9063 cv
529.273 61.6475 528.582 61.4033 527.691 61.1733 cv
527.26 61.0874 li
527.563 59.4033 li
529.548 59.6621 531.425 59.792 533.194 59.792 cv
534.964 59.792 536.841 59.6621 538.826 59.4033 cv
539.129 61.0874 li
537.287 61.4312 536.266 61.8633 536.064 62.3813 cv
535.979 62.5254 535.935 62.7842 535.935 63.1582 cv
f
180.958 164.656 mo
180.361 164.584 179.749 164.549 179.12 164.549 cv
178.491 164.549 177.879 164.584 177.282 164.656 cv
177.173 164.195 li
177.752 164.123 178.107 164.058 178.238 163.998 cv
178.369 163.939 178.448 163.883 178.476 163.83 cv
178.503 163.775 178.516 163.689 178.516 163.572 cv
178.516 156.369 li
176.251 156.369 li
176.115 156.748 176.02 157.312 175.966 158.064 cv
175.464 157.982 li
175.383 157.359 175.342 156.857 175.342 156.476 cv
175.342 156.097 175.346 155.816 175.355 155.636 cv
175.862 155.699 176.319 155.73 176.726 155.73 cv
181.514 155.73 li
181.921 155.73 182.378 155.699 182.884 155.636 cv
182.893 155.799 182.898 156.062 182.898 156.429 cv
182.898 156.795 182.853 157.312 182.762 157.982 cv
182.274 158.064 li
182.22 157.312 182.125 156.748 181.989 156.369 cv
179.724 156.369 li
179.724 163.572 li
179.724 163.689 179.737 163.775 179.764 163.83 cv
179.791 163.883 179.846 163.929 179.927 163.965 cv
180.062 164.019 180.37 164.088 180.85 164.168 cv
181.066 164.195 li
180.958 164.656 li
cp
0 0 0 1 cmyk
f
192.516 159.611 mo
192.516 156.679 li
192.516 156.554 192.504 156.463 192.481 156.408 cv
192.459 156.355 192.402 156.311 192.313 156.273 cv
192.149 156.191 191.896 156.129 191.553 156.084 cv
191.376 156.07 li
191.472 155.624 li
192.141 155.695 192.669 155.73 193.059 155.73 cv
193.448 155.73 193.976 155.695 194.646 155.624 cv
194.741 156.07 li
194.144 156.142 193.813 156.246 193.75 156.382 cv
193.731 156.436 193.724 156.527 193.724 156.652 cv
193.724 163.625 li
193.724 163.752 193.734 163.84 193.758 163.89 cv
193.78 163.939 193.832 163.988 193.913 164.033 cv
194.049 164.088 194.274 164.14 194.592 164.195 cv
194.741 164.209 li
194.646 164.656 li
193.976 164.584 193.448 164.549 193.059 164.549 cv
192.669 164.549 192.141 164.584 191.472 164.656 cv
191.376 164.209 li
192.055 164.127 192.42 164.015 192.475 163.869 cv
192.502 163.816 192.516 163.724 192.516 163.599 cv
192.516 160.33 li
187.537 160.33 li
187.537 163.599 li
187.537 163.724 187.549 163.816 187.572 163.869 cv
187.594 163.924 187.646 163.968 187.727 164.006 cv
187.898 164.088 188.157 164.15 188.5 164.195 cv
188.677 164.209 li
188.582 164.656 li
187.913 164.584 187.384 164.549 186.995 164.549 cv
186.605 164.549 186.077 164.584 185.408 164.656 cv
185.313 164.209 li
185.91 164.136 186.234 164.033 186.289 163.896 cv
186.316 163.843 186.33 163.752 186.33 163.625 cv
186.33 156.652 li
186.33 156.527 186.318 156.439 186.295 156.388 cv
186.273 156.34 186.217 156.292 186.126 156.246 cv
186 156.191 185.773 156.138 185.449 156.084 cv
185.313 156.07 li
185.408 155.624 li
186.077 155.695 186.605 155.73 186.995 155.73 cv
187.384 155.73 187.913 155.695 188.582 155.624 cv
188.677 156.07 li
188.233 156.125 187.933 156.186 187.774 156.254 cv
187.617 156.32 187.537 156.455 187.537 156.652 cv
187.537 159.611 li
192.516 159.611 li
cp
f
199.407 160.316 mo
199.407 163.896 li
202.527 163.896 li
202.645 163.79 202.782 163.538 202.941 163.145 cv
203.099 162.75 203.209 162.438 203.272 162.201 cv
203.761 162.283 li
203.753 162.538 203.717 162.932 203.653 163.47 cv
203.59 164.007 203.531 164.367 203.477 164.548 cv
198.81 164.548 li
198.394 164.548 197.883 164.584 197.278 164.656 cv
197.182 164.209 li
197.543 164.165 197.804 164.107 197.963 164.04 cv
198.12 163.973 198.2 163.831 198.2 163.613 cv
198.2 156.638 li
198.2 156.421 198.126 156.288 197.983 156.232 cv
197.865 156.177 197.644 156.128 197.318 156.084 cv
197.182 156.057 li
197.278 155.609 li
197.965 155.689 198.476 155.73 198.81 155.73 cv
202.215 155.73 li
202.622 155.73 202.993 155.704 203.327 155.648 cv
203.354 155.975 203.368 156.314 203.368 156.667 cv
203.368 157.02 203.354 157.38 203.327 157.752 cv
202.826 157.834 li
202.699 157.064 202.554 156.576 202.391 156.37 cv
199.407 156.37 li
199.407 159.665 li
201.442 159.665 li
201.695 159.665 201.845 159.598 201.89 159.461 cv
201.944 159.334 201.993 159.124 202.039 158.824 cv
202.053 158.661 li
202.568 158.714 li
202.495 159.168 202.458 159.591 202.458 159.99 cv
202.458 160.388 202.495 160.813 202.568 161.266 cv
202.053 161.32 li
202.007 160.932 201.955 160.667 201.896 160.525 cv
201.838 160.386 201.686 160.316 201.442 160.316 cv
199.407 160.316 li
cp
f
212.443 156.775 mo
212.443 163.896 li
215.305 163.896 li
215.415 163.79 215.563 163.533 215.753 163.13 cv
215.943 162.729 216.069 162.418 216.133 162.201 cv
216.594 162.296 li
216.585 162.513 216.542 162.896 216.465 163.443 cv
216.388 163.99 216.323 164.359 216.27 164.548 cv
211.807 164.548 li
211.552 164.548 211.055 164.584 210.314 164.656 cv
210.218 164.223 li
210.581 164.177 210.84 164.122 211 164.052 cv
211.156 163.986 211.236 163.838 211.236 163.613 cv
211.236 156.667 li
211.236 156.449 211.164 156.311 211.02 156.247 cv
210.901 156.191 210.68 156.138 210.354 156.084 cv
210.218 156.07 li
210.314 155.624 li
210.983 155.695 211.568 155.73 212.07 155.73 cv
212.572 155.73 213.14 155.695 213.773 155.624 cv
213.868 156.111 li
213.29 156.184 212.925 156.242 212.776 156.288 cv
212.626 156.333 212.533 156.391 212.499 156.462 cv
212.461 156.536 212.443 156.638 212.443 156.775 cv
f
221.776 157.264 mo
220.596 160.655 li
223.282 160.655 li
222.088 157.36 li
221.939 156.789 li
221.844 156.748 li
221.776 157.264 li
cp
219.606 163.666 mo
219.606 163.848 219.718 163.969 219.944 164.034 cv
220.746 164.208 li
220.665 164.657 li
220.167 164.583 219.696 164.549 219.253 164.549 cv
218.811 164.549 218.335 164.583 217.829 164.657 cv
217.734 164.208 li
218.113 164.127 218.358 164.035 218.466 163.932 cv
218.574 163.828 218.701 163.577 218.846 163.178 cv
221.546 155.799 li
221.943 155.708 222.288 155.576 222.576 155.405 cv
225.493 163.178 li
225.637 163.567 225.77 163.817 225.886 163.924 cv
226.004 164.034 226.253 164.127 226.632 164.208 cv
226.539 164.657 li
226.031 164.583 225.491 164.549 224.917 164.549 cv
224.342 164.549 223.802 164.583 223.296 164.657 cv
223.214 164.208 li
223.53 164.155 223.797 164.094 224.014 164.026 cv
224.232 163.958 224.34 163.838 224.34 163.666 cv
224.34 163.604 224.326 163.539 224.299 163.477 cv
223.526 161.333 li
220.365 161.333 li
219.632 163.477 li
219.614 163.521 219.606 163.586 219.606 163.666 cv
f
226.131 155.623 mo
226.61 155.695 227.142 155.73 227.725 155.73 cv
228.308 155.73 228.853 155.695 229.36 155.623 cv
229.441 156.07 li
229.106 156.125 228.833 156.186 228.62 156.254 cv
228.408 156.32 228.301 156.445 228.301 156.627 cv
228.301 156.68 228.31 156.738 228.329 156.803 cv
230.255 162.662 li
230.336 163.057 li
230.418 163.07 li
230.472 162.621 li
232.737 155.744 li
233.714 155.744 li
235.993 162.717 li
236.074 163.07 li
236.142 163.084 li
236.224 162.676 li
238.055 156.803 li
238.082 156.73 238.096 156.666 238.096 156.613 cv
238.096 156.432 237.978 156.311 237.743 156.246 cv
236.916 156.07 li
236.997 155.623 li
237.494 155.695 237.967 155.73 238.415 155.73 cv
238.862 155.73 239.325 155.695 239.805 155.623 cv
239.9 156.07 li
239.529 156.15 239.297 156.242 239.201 156.342 cv
239.107 156.441 238.986 156.693 238.842 157.102 cv
236.278 164.656 li
235.356 164.656 li
233.063 157.861 li
232.982 157.494 li
232.914 157.48 li
232.805 157.941 li
230.567 164.656 li
229.631 164.656 li
227.121 157.102 li
226.985 156.703 226.865 156.451 226.762 156.348 cv
226.658 156.244 226.416 156.15 226.036 156.07 cv
226.131 155.623 li
cp
f
250.569 156.164 mo
249.552 156.164 248.794 156.508 248.297 157.195 cv
247.799 157.883 247.551 158.801 247.551 159.949 cv
247.551 161.098 247.831 162.08 248.392 162.893 cv
248.952 163.707 249.742 164.113 250.759 164.113 cv
251.777 164.113 252.534 163.771 253.031 163.084 cv
253.528 162.396 253.777 161.478 253.777 160.33 cv
253.777 159.182 253.497 158.199 252.936 157.385 cv
252.376 156.572 251.587 156.164 250.569 156.164 cv
250.671 164.766 mo
249.305 164.766 248.215 164.371 247.402 163.586 cv
246.588 162.799 246.181 161.713 246.181 160.33 cv
246.181 158.945 246.585 157.797 247.395 156.885 cv
248.204 155.971 249.292 155.514 250.657 155.514 cv
252.023 155.514 253.112 155.906 253.926 156.693 cv
254.74 157.48 255.148 158.566 255.148 159.949 cv
255.148 161.334 254.743 162.482 253.933 163.394 cv
253.124 164.309 252.036 164.766 250.671 164.766 cv
f
261.007 160.371 mo
259.23 160.371 li
259.23 163.504 li
259.23 163.639 259.248 163.744 259.284 163.816 cv
259.32 163.889 259.402 163.943 259.528 163.978 cv
260.654 164.168 li
260.559 164.656 li
259.926 164.584 259.359 164.549 258.857 164.549 cv
258.355 164.549 257.77 164.584 257.1 164.656 cv
257.005 164.209 li
257.367 164.164 257.627 164.107 257.785 164.039 cv
257.943 163.973 258.023 163.83 258.023 163.613 cv
258.023 156.639 li
258.023 156.414 257.95 156.277 257.805 156.232 cv
257.57 156.15 257.303 156.092 257.005 156.057 cv
257.1 155.609 li
257.787 155.689 258.299 155.73 258.633 155.73 cv
261.902 155.73 li
262.3 155.73 262.671 155.703 263.015 155.648 cv
263.042 155.902 263.055 156.213 263.055 156.578 cv
263.055 156.945 263.046 157.346 263.028 157.779 cv
262.526 157.861 li
262.354 157.029 262.201 156.531 262.065 156.369 cv
259.23 156.369 li
259.23 159.719 li
261.007 159.719 li
261.26 159.719 261.409 159.65 261.455 159.516 cv
261.509 159.389 261.554 159.176 261.59 158.879 cv
261.617 158.715 li
262.133 158.769 li
262.06 159.223 262.025 159.646 262.025 160.045 cv
262.025 160.443 262.06 160.867 262.133 161.32 cv
261.617 161.373 li
261.572 160.984 261.521 160.721 261.462 160.58 cv
261.403 160.439 261.251 160.371 261.007 160.371 cv
f
269.31 160.371 mo
267.533 160.371 li
267.533 163.504 li
267.533 163.639 267.551 163.744 267.586 163.816 cv
267.623 163.889 267.705 163.943 267.831 163.978 cv
268.957 164.168 li
268.861 164.656 li
268.229 164.584 267.662 164.549 267.16 164.549 cv
266.658 164.549 266.072 164.584 265.402 164.656 cv
265.308 164.209 li
265.669 164.164 265.93 164.107 266.087 164.039 cv
266.246 163.973 266.326 163.83 266.326 163.613 cv
266.326 156.639 li
266.326 156.414 266.252 156.277 266.107 156.232 cv
265.873 156.15 265.605 156.092 265.308 156.057 cv
265.402 155.609 li
266.09 155.689 266.602 155.73 266.936 155.73 cv
270.205 155.73 li
270.603 155.73 270.974 155.703 271.317 155.648 cv
271.345 155.902 271.357 156.213 271.357 156.578 cv
271.357 156.945 271.349 157.346 271.331 157.779 cv
270.829 157.861 li
270.657 157.029 270.503 156.531 270.368 156.369 cv
267.533 156.369 li
267.533 159.719 li
269.31 159.719 li
269.563 159.719 269.711 159.65 269.758 159.516 cv
269.812 159.389 269.856 159.176 269.893 158.879 cv
269.919 158.715 li
270.436 158.769 li
270.363 159.223 270.328 159.646 270.328 160.045 cv
270.328 160.443 270.363 160.867 270.436 161.32 cv
269.919 161.373 li
269.875 160.984 269.823 160.721 269.765 160.58 cv
269.706 160.439 269.554 160.371 269.31 160.371 cv
f
275.834 156.652 mo
275.834 163.625 li
275.834 163.752 275.845 163.84 275.868 163.89 cv
275.891 163.939 275.943 163.988 276.024 164.033 cv
276.16 164.088 276.395 164.14 276.73 164.195 cv
276.879 164.209 li
276.784 164.656 li
276.178 164.584 275.665 164.548 275.244 164.548 cv
274.824 164.548 274.31 164.584 273.705 164.656 cv
273.609 164.209 li
274.207 164.136 274.532 164.033 274.586 163.896 cv
274.613 163.843 274.627 163.752 274.627 163.625 cv
274.627 156.652 li
274.627 156.527 274.615 156.439 274.593 156.388 cv
274.57 156.339 274.514 156.292 274.423 156.246 cv
274.296 156.191 274.071 156.138 273.745 156.084 cv
273.609 156.07 li
273.705 155.624 li
274.31 155.695 274.824 155.73 275.244 155.73 cv
275.665 155.73 276.178 155.695 276.784 155.624 cv
276.879 156.07 li
276.273 156.142 275.934 156.246 275.861 156.382 cv
275.843 156.436 275.834 156.527 275.834 156.652 cv
f
283.838 164.766 mo
282.49 164.766 281.389 164.378 280.535 163.605 cv
279.68 162.832 279.253 161.753 279.253 160.371 cv
279.253 158.987 279.678 157.832 280.528 156.905 cv
281.378 155.977 282.518 155.514 283.946 155.514 cv
284.507 155.514 284.986 155.551 285.384 155.623 cv
285.782 155.696 286.144 155.766 286.47 155.832 cv
286.796 155.9 286.981 155.939 287.026 155.948 cv
286.936 156.934 286.814 157.707 286.66 158.268 cv
286.198 158.35 li
286.081 157.391 285.927 156.771 285.737 156.491 cv
285.303 156.255 284.618 156.139 283.682 156.139 cv
282.746 156.139 282.002 156.495 281.45 157.208 cv
280.899 157.924 280.623 158.855 280.623 160.003 cv
280.623 161.153 280.933 162.128 281.552 162.934 cv
282.171 163.739 282.979 164.141 283.974 164.141 cv
284.688 164.141 285.233 163.977 285.609 163.646 cv
285.984 163.316 286.28 162.775 286.497 162.025 cv
286.958 162.094 li
286.949 162.771 286.854 163.514 286.673 164.318 cv
285.796 164.616 284.851 164.766 283.838 164.766 cv
f
292.099 160.316 mo
292.099 163.896 li
295.219 163.896 li
295.337 163.79 295.474 163.538 295.633 163.145 cv
295.791 162.75 295.902 162.438 295.965 162.201 cv
296.453 162.283 li
296.445 162.538 296.409 162.932 296.345 163.47 cv
296.282 164.007 296.223 164.367 296.169 164.548 cv
291.502 164.548 li
291.086 164.548 290.575 164.584 289.97 164.656 cv
289.874 164.209 li
290.236 164.165 290.496 164.107 290.655 164.04 cv
290.812 163.973 290.892 163.831 290.892 163.613 cv
290.892 156.638 li
290.892 156.421 290.819 156.288 290.675 156.232 cv
290.557 156.177 290.336 156.128 290.01 156.084 cv
289.874 156.057 li
289.97 155.609 li
290.657 155.689 291.168 155.73 291.502 155.73 cv
294.907 155.73 li
295.314 155.73 295.685 155.704 296.019 155.648 cv
296.047 155.975 296.06 156.314 296.06 156.667 cv
296.06 157.02 296.047 157.38 296.019 157.752 cv
295.518 157.834 li
295.391 157.064 295.246 156.576 295.083 156.37 cv
292.099 156.37 li
292.099 159.665 li
294.134 159.665 li
294.387 159.665 294.537 159.598 294.582 159.461 cv
294.636 159.334 294.685 159.124 294.731 158.824 cv
294.745 158.661 li
295.26 158.714 li
295.187 159.168 295.151 159.591 295.151 159.99 cv
295.151 160.388 295.187 160.813 295.26 161.266 cv
294.745 161.32 li
294.699 160.932 294.647 160.667 294.588 160.525 cv
294.53 160.386 294.378 160.316 294.134 160.316 cv
292.099 160.316 li
cp
f
308.344 156.164 mo
307.326 156.164 306.568 156.508 306.072 157.195 cv
305.574 157.883 305.325 158.801 305.325 159.949 cv
305.325 161.098 305.606 162.08 306.166 162.893 cv
306.727 163.707 307.516 164.113 308.533 164.113 cv
309.551 164.113 310.308 163.771 310.806 163.084 cv
311.303 162.396 311.552 161.478 311.552 160.33 cv
311.552 159.182 311.271 158.199 310.711 157.385 cv
310.149 156.572 309.36 156.164 308.344 156.164 cv
308.445 164.766 mo
307.079 164.766 305.99 164.371 305.176 163.586 cv
304.362 162.799 303.955 161.713 303.955 160.33 cv
303.955 158.945 304.36 157.797 305.169 156.885 cv
305.979 155.971 307.066 155.514 308.432 155.514 cv
309.797 155.514 310.887 155.906 311.701 156.693 cv
312.515 157.48 312.922 158.566 312.922 159.949 cv
312.922 161.334 312.517 162.482 311.708 163.394 cv
310.898 164.309 309.811 164.766 308.445 164.766 cv
f
318.781 160.371 mo
317.005 160.371 li
317.005 163.504 li
317.005 163.639 317.022 163.744 317.059 163.816 cv
317.095 163.889 317.178 163.943 317.303 163.978 cv
318.429 164.168 li
318.334 164.656 li
317.701 164.584 317.135 164.549 316.632 164.549 cv
316.13 164.549 315.544 164.584 314.875 164.656 cv
314.78 164.209 li
315.142 164.164 315.401 164.107 315.56 164.039 cv
315.719 163.973 315.797 163.83 315.797 163.613 cv
315.797 156.639 li
315.797 156.414 315.725 156.277 315.58 156.232 cv
315.345 156.15 315.078 156.092 314.78 156.057 cv
314.875 155.609 li
315.562 155.689 316.073 155.73 316.407 155.73 cv
319.678 155.73 li
320.075 155.73 320.445 155.703 320.789 155.648 cv
320.816 155.902 320.83 156.213 320.83 156.578 cv
320.83 156.945 320.821 157.346 320.803 157.779 cv
320.302 157.861 li
320.129 157.029 319.976 156.531 319.84 156.369 cv
317.005 156.369 li
317.005 159.719 li
318.781 159.719 li
319.035 159.719 319.184 159.65 319.229 159.516 cv
319.283 159.389 319.329 159.176 319.365 158.879 cv
319.393 158.715 li
319.907 158.769 li
319.835 159.223 319.799 159.646 319.799 160.045 cv
319.799 160.443 319.835 160.867 319.907 161.32 cv
319.393 161.373 li
319.347 160.984 319.295 160.721 319.236 160.58 cv
319.178 160.439 319.025 160.371 318.781 160.371 cv
f
150.654 153.807 mo
153.128 154.35 155.875 154.621 158.893 154.621 cv
161.91 154.621 164.838 154.35 167.675 153.807 cv
168.309 156.794 li
165.955 157.098 164.25 157.458 163.194 157.88 cv
162.137 158.303 161.609 159.359 161.609 161.049 cv
164.325 206.952 li
164.446 208.523 164.989 209.549 165.955 210.031 cv
166.739 210.393 168.4 210.786 170.934 211.207 cv
170.3 214.195 li
166.257 213.711 162.664 213.471 159.527 213.471 cv
156.387 213.471 152.827 213.711 148.843 214.195 cv
148.21 211.027 li
151.347 210.664 153.49 210.211 154.638 209.668 cv
155.724 209.246 156.236 208.342 156.177 206.952 cv
153.551 161.684 li
153.008 161.23 li
152.343 164.25 151.709 166.482 151.107 167.93 cv
138.069 200.615 li
136.861 203.754 135.625 207.375 134.357 211.479 cv
133.723 213.471 li
128.292 215.01 li
126.6 209.338 125.122 204.932 123.855 201.791 cv
110.364 168.021 li
108.645 162.044 li
108.01 162.498 li
104.841 206.952 li
104.78 207.738 104.856 208.311 105.068 208.672 cv
105.279 209.035 105.656 209.367 106.199 209.668 cv
107.105 210.031 108.917 210.424 111.632 210.846 cv
112.809 211.027 li
112.175 214.195 li
108.131 213.711 104.991 213.471 102.759 213.471 cv
100.525 213.471 97.3862 213.711 93.3433 214.195 cv
92.7095 211.207 li
94.8213 210.906 96.4512 210.514 97.5981 210.031 cv
98.5635 209.549 99.0771 208.613 99.1372 207.225 cv
102.487 160.778 li
102.608 159.33 102.125 158.395 101.039 157.971 cv
100.254 157.549 98.8354 157.217 96.7832 156.975 cv
95.7881 156.794 li
96.4224 153.807 li
99.2583 154.35 102.336 154.621 105.656 154.621 cv
108.975 154.621 111.872 154.35 114.348 153.807 cv
114.83 155.979 115.434 158.032 116.159 159.962 cv
131.188 199.166 li
132.365 203.422 li
133 203.602 li
133.18 201.611 133.452 200.161 133.814 199.256 cv
148.571 160.505 li
150.654 153.807 li
cp
f
182.79 175.598 mo
182.79 196.784 li
182.79 197.155 182.825 197.42 182.897 197.577 cv
182.969 197.735 183.147 197.885 183.434 198.028 cv
183.891 198.286 184.576 198.527 185.492 198.756 cv
185.964 198.842 li
185.663 200.514 li
183.69 200.258 181.825 200.129 180.066 200.129 cv
178.309 200.129 176.443 200.258 174.47 200.514 cv
174.17 198.842 li
175.942 198.471 176.942 198.041 177.172 197.555 cv
177.228 197.412 177.258 197.155 177.258 196.784 cv
177.258 175.598 li
177.258 175.227 177.222 174.961 177.15 174.805 cv
177.079 174.646 176.915 174.496 176.657 174.354 cv
176.171 174.096 175.484 173.854 174.599 173.625 cv
174.17 173.539 li
174.47 171.866 li
176.443 172.123 178.309 172.252 180.066 172.252 cv
181.825 172.252 183.69 172.123 185.663 171.866 cv
185.964 173.539 li
184.134 173.881 183.118 174.311 182.919 174.827 cv
182.833 174.969 182.79 175.227 182.79 175.598 cv
f
203.933 200.814 mo
199.358 200.814 195.62 199.592 192.718 197.148 cv
189.815 194.704 188.366 191.421 188.366 187.305 cv
188.366 182.673 189.809 178.893 192.697 175.96 cv
195.583 173.032 199.443 171.566 204.275 171.566 cv
205.82 171.566 207.127 171.652 208.201 171.822 cv
209.272 171.995 209.995 172.109 210.367 172.167 cv
210.738 172.225 211.422 172.359 212.424 172.575 cv
213.425 172.79 214.025 172.911 214.226 172.938 cv
213.939 176.141 213.554 178.657 213.067 180.486 cv
210.751 180.917 li
210.351 177.855 209.866 175.913 209.293 175.083 cv
208.121 174.339 206.191 173.966 203.503 173.966 cv
200.816 173.966 198.701 175.055 197.157 177.227 cv
195.613 179.4 194.841 182.238 194.841 185.741 cv
194.841 189.243 195.72 192.23 197.479 194.704 cv
199.237 197.175 201.532 198.413 204.362 198.413 cv
206.419 198.413 208 197.893 209.101 196.848 cv
210.202 195.805 211.066 194.096 211.696 191.723 cv
214.011 191.938 li
213.982 193.854 213.682 196.339 213.11 199.398 cv
210.281 200.344 207.221 200.814 203.933 200.814 cv
f
240.515 184.131 mo
240.515 175.684 li
240.515 175.283 240.479 174.996 240.409 174.826 cv
240.335 174.654 240.171 174.512 239.915 174.397 cv
239.371 174.139 238.6 173.94 237.599 173.797 cv
237.041 173.754 li
237.427 171.865 li
239.542 172.123 241.487 172.252 243.26 172.252 cv
245.033 172.252 246.875 172.123 248.792 171.865 cv
249.136 173.539 li
248.049 173.768 247.263 174.018 246.776 174.289 cv
246.29 174.561 246.047 174.996 246.047 175.598 cv
246.047 196.783 li
246.047 197.383 246.219 197.785 246.563 197.985 cv
247.104 198.27 247.821 198.527 248.706 198.756 cv
249.136 198.842 li
248.792 200.514 li
246.875 200.258 245.033 200.129 243.26 200.129 cv
241.487 200.129 239.529 200.258 237.385 200.514 cv
237.041 198.627 li
239.1 198.369 240.229 198.014 240.43 197.555 cv
240.487 197.383 240.515 197.098 240.515 196.697 cv
240.515 187.049 li
226.919 187.049 li
226.919 196.697 li
226.919 197.098 226.955 197.383 227.027 197.555 cv
227.099 197.727 227.277 197.871 227.563 197.985 cv
228.049 198.242 228.822 198.442 229.878 198.584 cv
230.394 198.627 li
230.051 200.514 li
227.907 200.258 225.955 200.129 224.197 200.129 cv
222.438 200.129 220.586 200.258 218.643 200.514 cv
218.3 198.842 li
219.386 198.613 220.171 198.363 220.659 198.092 cv
221.145 197.82 221.388 197.383 221.388 196.783 cv
221.388 175.598 li
221.388 174.996 221.216 174.598 220.873 174.397 cv
220.329 174.111 219.615 173.854 218.729 173.625 cv
218.3 173.539 li
218.686 171.865 li
220.574 172.123 222.41 172.252 224.197 172.252 cv
225.983 172.252 227.92 172.123 230.008 171.865 cv
230.394 173.754 li
229.05 173.924 228.135 174.117 227.649 174.332 cv
227.162 174.547 226.919 174.969 226.919 175.598 cv
226.919 184.131 li
240.515 184.131 li
cp
f
263.888 179.328 mo
261.015 187.605 li
267.747 187.605 li
264.874 179.629 li
264.403 177.828 li
264.103 177.699 li
263.888 179.328 li
cp
257.97 196.912 mo
257.97 197.426 258.326 197.812 259.041 198.07 cv
261.444 198.842 li
261.186 200.514 li
259.327 200.258 257.755 200.129 256.469 200.129 cv
255.182 200.129 253.552 200.258 251.579 200.514 cv
251.237 198.842 li
252.522 198.584 253.338 198.285 253.681 197.941 cv
254.023 197.598 254.438 196.74 254.925 195.367 cv
263.33 172.467 li
264.674 172.209 265.947 171.781 267.147 171.18 cv
276.496 195.367 li
277.011 196.713 277.439 197.562 277.784 197.92 cv
278.125 198.277 278.855 198.584 279.97 198.842 cv
279.67 200.514 li
277.698 200.258 275.775 200.129 273.902 200.129 cv
272.029 200.129 270.021 200.258 267.875 200.514 cv
267.619 198.842 li
268.563 198.557 269.37 198.285 270.042 198.027 cv
270.713 197.769 271.05 197.398 271.05 196.912 cv
271.05 196.713 271.007 196.512 270.921 196.31 cv
268.734 190.349 li
260.071 190.349 li
258.055 196.31 li
257.997 196.455 257.97 196.654 257.97 196.912 cv
f
302.228 171.994 mo
302.313 175.726 li
302.313 176.726 302.271 177.726 302.186 178.728 cv
300.211 179.07 li
299.812 176.869 299.354 175.469 298.839 174.867 cv
290.691 174.867 li
290.691 184.303 li
295.624 184.303 li
296.337 184.303 296.81 184.088 297.04 183.66 cv
297.209 183.346 297.424 182.687 297.682 181.687 cv
297.768 181.258 li
299.612 181.473 li
299.382 182.988 299.269 184.396 299.269 185.697 cv
299.269 186.998 299.382 188.363 299.612 189.793 cv
297.768 189.965 li
297.511 188.849 297.274 188.07 297.061 187.627 cv
296.846 187.183 296.367 186.963 295.624 186.963 cv
290.691 186.963 li
290.691 197.469 li
299.269 197.469 li
299.64 197.154 300.077 196.418 300.578 195.262 cv
301.078 194.103 301.426 193.166 301.627 192.451 cv
303.601 192.795 li
303.571 193.625 303.457 194.904 303.256 196.633 cv
303.057 198.363 302.872 199.527 302.701 200.129 cv
287.732 200.129 li
286.56 200.129 284.745 200.258 282.287 200.514 cv
281.942 198.842 li
283.8 198.471 284.844 198.041 285.073 197.555 cv
285.129 197.412 285.16 197.14 285.16 196.74 cv
285.16 175.555 li
285.16 174.896 284.93 174.469 284.473 174.267 cv
283.93 174.01 283.244 173.797 282.415 173.625 cv
281.942 173.496 li
282.329 171.822 li
285.073 172.109 286.875 172.252 287.732 172.252 cv
298.283 172.252 li
299.655 172.252 300.97 172.166 302.228 171.994 cv
f
315.308 175.982 mo
315.308 197.425 li
322.855 197.425 li
323.227 197.111 323.705 196.375 324.292 195.218 cv
324.878 194.061 325.271 193.152 325.472 192.495 cv
327.53 192.88 li
327.502 193.595 327.373 194.833 327.145 196.589 cv
326.915 198.348 326.716 199.527 326.544 200.129 cv
312.22 200.129 li
311.591 200.129 309.861 200.258 307.03 200.514 cv
306.688 198.885 li
307.773 198.656 308.56 198.406 309.046 198.134 cv
309.532 197.863 309.775 197.398 309.775 196.74 cv
309.775 175.641 li
309.775 175.011 309.604 174.598 309.261 174.396 cv
308.717 174.111 308.002 173.854 307.116 173.625 cv
306.688 173.54 li
307.073 171.865 li
309.046 172.124 311.068 172.252 313.142 172.252 cv
315.215 172.252 317.28 172.124 319.339 171.865 cv
319.683 173.668 li
317.909 174.009 316.737 174.29 316.165 174.503 cv
315.593 174.718 315.308 175.211 315.308 175.982 cv
f
371.437 214.92 mo
362.442 214.92 355.094 212.34 349.391 207.18 cv
343.687 202.018 340.833 194.82 340.833 185.586 cv
340.833 176.35 343.671 168.641 349.345 162.453 cv
355.018 156.266 362.623 153.172 372.161 153.172 cv
375.902 153.172 379.102 153.414 381.758 153.897 cv
384.413 154.381 386.828 154.848 389 155.301 cv
391.174 155.752 392.41 156.01 392.713 156.07 cv
392.109 162.649 391.294 167.811 390.269 171.553 cv
387.19 172.096 li
386.405 165.697 385.379 161.563 384.112 159.691 cv
381.215 158.123 376.643 157.338 370.396 157.338 cv
364.148 157.338 359.183 159.723 355.502 164.49 cv
351.819 169.258 349.979 175.477 349.979 183.141 cv
349.979 190.807 352.046 197.326 356.181 202.697 cv
360.314 208.07 365.701 210.756 372.342 210.756 cv
377.109 210.756 380.746 209.654 383.252 207.451 cv
385.756 205.248 387.733 201.643 389.182 196.631 cv
392.261 197.084 li
392.199 201.611 391.565 206.561 390.359 211.932 cv
384.504 213.924 378.195 214.92 371.437 214.92 cv
f
395.255 171.645 mo
397.269 171.932 399.276 172.077 401.276 172.077 cv
403.276 172.077 405.484 171.932 407.901 171.645 cv
407.771 173.284 li
406.937 173.458 406.275 173.68 405.786 173.954 cv
405.296 174.227 405.052 174.585 405.052 175.032 cv
405.052 175.479 405.167 175.889 405.397 176.262 cv
410.188 184.591 li
414.763 176.219 li
415.05 175.73 415.194 175.32 415.194 174.988 cv
415.194 174.659 415.043 174.384 414.741 174.167 cv
414.439 173.954 413.511 173.659 411.957 173.284 cv
411.828 171.645 li
414.187 171.932 415.956 172.077 417.137 172.077 cv
418.315 172.077 419.884 171.932 421.841 171.645 cv
421.668 173.284 li
420.776 173.372 420.057 173.616 419.51 174.018 cv
418.963 174.421 418.431 175.184 417.913 176.305 cv
411.138 188.216 li
411.138 196.762 li
411.138 197.166 411.173 197.445 411.245 197.604 cv
411.316 197.762 411.482 197.915 411.741 198.057 cv
412.316 198.346 413.151 198.604 414.245 198.834 cv
414.849 198.92 li
414.461 200.475 li
412.303 200.242 410.31 200.129 408.484 200.129 cv
406.655 200.129 404.75 200.242 402.765 200.475 cv
402.419 198.877 li
404.52 198.531 405.671 198.116 405.872 197.625 cv
405.958 197.454 406.002 197.166 406.002 196.762 cv
406.002 188.303 li
398.881 176.003 li
398.391 174.997 397.902 174.313 397.413 173.954 cv
396.924 173.594 396.262 173.372 395.428 173.284 cv
395.255 171.645 li
cp
f
429.782 172.076 mo
445.405 172.076 li
445.794 174.449 li
430.645 197.193 li
441.003 197.193 li
441.435 196.791 442.067 195.842 442.902 194.346 cv
443.736 192.849 444.297 191.699 444.585 190.892 cv
446.786 191.41 li
446.757 192.217 446.555 193.676 446.182 195.791 cv
445.808 197.906 445.506 199.352 445.275 200.129 cv
424.517 200.129 li
423.912 197.885 li
439.19 175.01 li
429.351 175.01 li
428.516 176.133 427.781 178.031 427.149 180.707 cv
424.991 180.318 li
424.991 176.06 425.077 173.385 425.25 172.291 cv
426.718 171.513 li
427.581 171.888 428.602 172.076 429.782 172.076 cv
f
470.565 171.816 mo
470.651 175.572 li
470.651 176.579 470.608 177.586 470.521 178.591 cv
468.536 178.938 li
468.133 176.723 467.674 175.313 467.155 174.709 cv
458.955 174.709 li
458.955 184.204 li
463.919 184.204 li
464.638 184.204 465.112 183.986 465.343 183.554 cv
465.516 183.24 465.731 182.579 465.99 181.57 cv
466.076 181.138 li
467.933 181.355 li
467.702 182.88 467.586 184.296 467.586 185.605 cv
467.586 186.917 467.702 188.29 467.933 189.727 cv
466.076 189.9 li
465.817 188.777 465.58 187.995 465.364 187.546 cv
465.148 187.102 464.666 186.879 463.919 186.879 cv
458.955 186.879 li
458.955 197.454 li
467.586 197.454 li
467.961 197.136 468.399 196.395 468.903 195.23 cv
469.406 194.064 469.759 193.124 469.961 192.402 cv
471.946 192.749 li
471.917 193.584 471.802 194.872 471.601 196.611 cv
471.399 198.352 471.211 199.523 471.04 200.13 cv
455.978 200.13 li
454.798 200.13 452.971 200.258 450.496 200.518 cv
450.151 198.834 li
452.021 198.461 453.071 198.029 453.302 197.54 cv
453.359 197.395 453.388 197.124 453.388 196.718 cv
453.388 175.398 li
453.388 174.736 453.157 174.304 452.697 174.104 cv
452.15 173.845 451.46 173.629 450.626 173.458 cv
450.151 173.326 li
450.539 171.645 li
453.302 171.932 455.114 172.076 455.978 172.076 cv
466.595 172.076 li
467.976 172.076 469.299 171.988 470.565 171.816 cv
f
484.548 198.402 mo
485.843 198.402 486.914 198 487.764 197.193 cv
488.611 196.388 489.036 195.281 489.036 193.871 cv
489.036 192.547 488.461 191.396 487.311 190.418 cv
486.361 189.613 485.275 188.857 484.052 188.152 cv
482.828 187.447 482.059 187.002 481.743 186.814 cv
481.426 186.627 480.894 186.275 480.146 185.756 cv
479.397 185.238 478.857 184.793 478.527 184.418 cv
478.196 184.045 477.815 183.584 477.384 183.037 cv
476.606 182.002 476.219 180.693 476.219 179.109 cv
476.219 176.693 477.117 174.802 478.916 173.436 cv
480.714 172.068 483.009 171.384 485.8 171.384 cv
486.807 171.384 489.425 171.759 493.654 172.507 cv
493.625 173.197 493.475 174.349 493.201 175.959 cv
492.928 177.572 492.705 178.693 492.532 179.326 cv
490.418 179.629 li
490.216 177.297 489.943 175.688 489.598 174.795 cv
488.619 174.076 487.238 173.714 485.454 173.714 cv
484.332 173.714 483.404 174.068 482.671 174.773 cv
481.937 175.479 481.57 176.449 481.57 177.686 cv
481.57 178.895 482.188 179.959 483.426 180.879 cv
484.347 181.57 485.512 182.311 486.922 183.101 cv
488.331 183.895 489.367 184.506 490.029 184.938 cv
490.69 185.369 491.453 185.943 492.316 186.662 cv
493.928 188.072 494.734 189.871 494.734 192.058 cv
494.734 194.906 493.719 197.078 491.69 198.574 cv
489.662 200.07 487.166 200.818 484.203 200.818 cv
481.239 200.818 478.506 200.287 476.003 199.223 cv
475.944 198.848 475.916 197.689 475.916 195.749 cv
475.916 193.806 475.974 192.563 476.089 192.015 cv
478.333 191.539 li
478.506 193.554 479.095 195.201 480.103 196.482 cv
481.11 197.761 482.591 198.402 484.548 198.402 cv
f
517.133 174.146 mo
517.133 173.745 516.327 173.415 514.716 173.154 cv
515.018 171.73 li
516.428 171.96 517.881 172.077 519.377 172.077 cv
520.873 172.077 522.354 171.96 523.822 171.73 cv
524.124 173.154 li
523.146 173.298 522.369 173.521 521.794 173.825 cv
521.218 174.125 520.629 174.607 520.024 175.27 cv
511.651 184.118 li
522.484 195.984 li
523.462 197.05 524.268 197.762 524.901 198.122 cv
525.534 198.482 526.368 198.791 527.404 199.049 cv
527.103 200.475 li
525.174 200.242 523.038 200.129 520.693 200.129 cv
518.348 200.129 516.384 200.242 514.802 200.475 cv
514.414 199.049 li
514.529 199.021 514.701 198.984 514.932 198.941 cv
515.161 198.898 515.334 198.863 515.449 198.835 cv
515.564 198.805 515.715 198.77 515.902 198.727 cv
516.09 198.682 516.233 198.639 516.334 198.596 cv
516.435 198.553 516.529 198.504 516.615 198.445 cv
516.815 198.331 516.917 198.15 516.917 197.907 cv
516.917 197.663 516.658 197.251 516.14 196.675 cv
507.163 186.447 li
507.163 185.023 li
516.485 175.27 li
516.917 174.809 517.133 174.436 517.133 174.146 cv
506.559 175.441 mo
506.559 196.762 li
506.559 197.137 506.595 197.402 506.667 197.561 cv
506.738 197.719 506.918 197.87 507.206 198.014 cv
507.666 198.273 508.472 198.518 509.623 198.748 cv
510.185 198.835 li
509.882 200.518 li
507.725 200.258 505.731 200.129 503.904 200.129 cv
502.077 200.129 500.172 200.258 498.187 200.518 cv
497.884 198.835 li
499.668 198.46 500.675 198.029 500.904 197.54 cv
500.963 197.395 500.991 197.137 500.991 196.762 cv
500.991 175.441 li
500.991 175.068 500.955 174.803 500.884 174.643 cv
500.812 174.486 500.646 174.334 500.388 174.189 cv
499.897 173.932 499.207 173.688 498.315 173.458 cv
497.884 173.372 li
498.187 171.688 li
500.172 171.945 502.049 172.077 503.818 172.077 cv
505.588 172.077 507.465 171.945 509.45 171.688 cv
509.753 173.372 li
507.911 173.714 506.89 174.146 506.688 174.665 cv
506.603 174.809 506.559 175.068 506.559 175.441 cv
f
537.935 175.441 mo
537.935 196.761 li
537.935 197.136 537.971 197.402 538.043 197.561 cv
538.114 197.718 538.294 197.87 538.582 198.013 cv
539.042 198.273 539.732 198.518 540.654 198.748 cv
541.129 198.834 li
540.826 200.518 li
538.841 200.258 536.964 200.13 535.194 200.13 cv
533.425 200.13 531.548 200.258 529.563 200.518 cv
529.26 198.834 li
531.044 198.461 532.051 198.029 532.281 197.54 cv
532.339 197.395 532.367 197.136 532.367 196.761 cv
532.367 175.441 li
532.367 175.068 532.33 174.802 532.26 174.643 cv
532.188 174.486 532.022 174.334 531.764 174.189 cv
531.273 173.932 530.582 173.688 529.691 173.458 cv
529.26 173.372 li
529.563 171.688 li
531.548 171.945 533.425 172.076 535.194 172.076 cv
536.964 172.076 538.841 171.945 540.826 171.688 cv
541.129 173.372 li
539.287 173.714 538.266 174.146 538.064 174.665 cv
537.979 174.809 537.935 175.068 537.935 175.441 cv
f
180.958 306.94 mo
180.361 306.868 179.749 306.832 179.12 306.832 cv
178.491 306.832 177.879 306.868 177.282 306.94 cv
177.173 306.479 li
177.752 306.407 178.107 306.342 178.238 306.282 cv
178.369 306.224 178.448 306.167 178.476 306.113 cv
178.503 306.059 178.516 305.973 178.516 305.855 cv
178.516 298.652 li
176.251 298.652 li
176.115 299.032 176.02 299.597 175.966 300.348 cv
175.464 300.267 li
175.383 299.643 175.342 299.141 175.342 298.761 cv
175.342 298.381 175.346 298.101 175.355 297.919 cv
175.862 297.982 176.319 298.015 176.726 298.015 cv
181.514 298.015 li
181.921 298.015 182.378 297.982 182.884 297.919 cv
182.893 298.082 182.898 298.347 182.898 298.713 cv
182.898 299.079 182.853 299.597 182.762 300.267 cv
182.274 300.348 li
182.22 299.597 182.125 299.032 181.989 298.652 cv
179.724 298.652 li
179.724 305.855 li
179.724 305.973 179.737 306.059 179.764 306.113 cv
179.791 306.167 179.846 306.213 179.927 306.249 cv
180.062 306.303 180.37 306.371 180.85 306.452 cv
181.066 306.479 li
180.958 306.94 li
cp
0 0 0 0 cmyk
f
192.516 301.895 mo
192.516 298.964 li
192.516 298.838 192.504 298.747 192.481 298.692 cv
192.459 298.639 192.402 298.594 192.313 298.557 cv
192.149 298.476 191.896 298.412 191.553 298.367 cv
191.376 298.354 li
191.472 297.906 li
192.141 297.979 192.669 298.015 193.059 298.015 cv
193.448 298.015 193.976 297.979 194.646 297.906 cv
194.741 298.354 li
194.144 298.426 193.813 298.53 193.75 298.665 cv
193.731 298.72 193.724 298.811 193.724 298.937 cv
193.724 305.909 li
193.724 306.036 193.734 306.123 193.758 306.174 cv
193.78 306.224 193.832 306.271 193.913 306.316 cv
194.049 306.371 194.274 306.425 194.592 306.479 cv
194.741 306.493 li
194.646 306.94 li
193.976 306.868 193.448 306.832 193.059 306.832 cv
192.669 306.832 192.141 306.868 191.472 306.94 cv
191.376 306.493 li
192.055 306.411 192.42 306.299 192.475 306.153 cv
192.502 306.1 192.516 306.009 192.516 305.883 cv
192.516 302.613 li
187.537 302.613 li
187.537 305.883 li
187.537 306.009 187.549 306.1 187.572 306.153 cv
187.594 306.207 187.646 306.253 187.727 306.289 cv
187.898 306.371 188.157 306.435 188.5 306.479 cv
188.677 306.493 li
188.582 306.94 li
187.913 306.868 187.384 306.832 186.995 306.832 cv
186.605 306.832 186.077 306.868 185.408 306.94 cv
185.313 306.493 li
185.91 306.421 186.234 306.316 186.289 306.181 cv
186.316 306.127 186.33 306.036 186.33 305.909 cv
186.33 298.937 li
186.33 298.811 186.318 298.723 186.295 298.672 cv
186.273 298.623 186.217 298.575 186.126 298.53 cv
186 298.476 185.773 298.422 185.449 298.367 cv
185.313 298.354 li
185.408 297.906 li
186.077 297.979 186.605 298.015 186.995 298.015 cv
187.384 298.015 187.913 297.979 188.582 297.906 cv
188.677 298.354 li
188.233 298.408 187.933 298.469 187.774 298.537 cv
187.617 298.604 187.537 298.738 187.537 298.937 cv
187.537 301.895 li
192.516 301.895 li
cp
f
199.407 302.6 mo
199.407 306.181 li
202.527 306.181 li
202.645 306.072 202.782 305.821 202.941 305.428 cv
203.099 305.034 203.209 304.721 203.272 304.485 cv
203.761 304.566 li
203.753 304.82 203.717 305.216 203.653 305.754 cv
203.59 306.292 203.531 306.651 203.477 306.832 cv
198.81 306.832 li
198.394 306.832 197.883 306.868 197.278 306.94 cv
197.182 306.493 li
197.543 306.447 197.804 306.392 197.963 306.323 cv
198.12 306.256 198.2 306.113 198.2 305.896 cv
198.2 298.923 li
198.2 298.706 198.126 298.57 197.983 298.517 cv
197.865 298.462 197.644 298.411 197.318 298.367 cv
197.182 298.34 li
197.278 297.893 li
197.965 297.974 198.476 298.015 198.81 298.015 cv
202.215 298.015 li
202.622 298.015 202.993 297.987 203.327 297.933 cv
203.354 298.259 203.368 298.598 203.368 298.95 cv
203.368 299.303 203.354 299.665 203.327 300.036 cv
202.826 300.117 li
202.699 299.349 202.554 298.86 202.391 298.652 cv
199.407 298.652 li
199.407 301.948 li
201.442 301.948 li
201.695 301.948 201.845 301.881 201.89 301.746 cv
201.944 301.618 201.993 301.406 202.039 301.107 cv
202.053 300.944 li
202.568 300.999 li
202.495 301.451 202.458 301.876 202.458 302.274 cv
202.458 302.672 202.495 303.097 202.568 303.549 cv
202.053 303.604 li
202.007 303.215 201.955 302.95 201.896 302.81 cv
201.838 302.67 201.686 302.6 201.442 302.6 cv
199.407 302.6 li
cp
f
212.443 299.059 mo
212.443 306.181 li
215.305 306.181 li
215.415 306.072 215.563 305.817 215.753 305.414 cv
215.943 305.012 216.069 304.702 216.133 304.485 cv
216.594 304.58 li
216.585 304.797 216.542 305.18 216.465 305.727 cv
216.388 306.273 216.323 306.643 216.27 306.832 cv
211.807 306.832 li
211.552 306.832 211.055 306.868 210.314 306.94 cv
210.218 306.507 li
210.581 306.461 210.84 306.404 211 306.337 cv
211.156 306.27 211.236 306.122 211.236 305.896 cv
211.236 298.95 li
211.236 298.733 211.164 298.594 211.02 298.53 cv
210.901 298.476 210.68 298.422 210.354 298.367 cv
210.218 298.354 li
210.314 297.906 li
210.983 297.979 211.568 298.015 212.07 298.015 cv
212.572 298.015 213.14 297.979 213.773 297.906 cv
213.868 298.395 li
213.29 298.467 212.925 298.525 212.776 298.57 cv
212.626 298.616 212.533 298.675 212.499 298.747 cv
212.461 298.819 212.443 298.923 212.443 299.059 cv
f
221.776 299.547 mo
220.596 302.938 li
223.282 302.938 li
222.088 299.643 li
221.939 299.072 li
221.844 299.032 li
221.776 299.547 li
cp
219.606 305.95 mo
219.606 306.131 219.718 306.253 219.944 306.317 cv
220.746 306.493 li
220.665 306.94 li
220.167 306.868 219.696 306.832 219.253 306.832 cv
218.811 306.832 218.335 306.868 217.829 306.94 cv
217.734 306.493 li
218.113 306.411 218.358 306.319 218.466 306.215 cv
218.574 306.111 218.701 305.86 218.846 305.462 cv
221.546 298.082 li
221.943 297.992 222.288 297.86 222.576 297.688 cv
225.493 305.462 li
225.637 305.851 225.77 306.1 225.886 306.208 cv
226.004 306.317 226.253 306.411 226.632 306.493 cv
226.539 306.94 li
226.031 306.868 225.491 306.832 224.917 306.832 cv
224.342 306.832 223.802 306.868 223.296 306.94 cv
223.214 306.493 li
223.53 306.438 223.797 306.378 224.014 306.31 cv
224.232 306.242 224.34 306.122 224.34 305.95 cv
224.34 305.887 224.326 305.823 224.299 305.761 cv
223.526 303.617 li
220.365 303.617 li
219.632 305.761 li
219.614 305.806 219.606 305.869 219.606 305.95 cv
f
226.131 297.906 mo
226.61 297.979 227.142 298.015 227.725 298.015 cv
228.308 298.015 228.853 297.979 229.36 297.906 cv
229.441 298.354 li
229.106 298.408 228.833 298.469 228.62 298.537 cv
228.408 298.604 228.301 298.729 228.301 298.91 cv
228.301 298.964 228.31 299.022 228.329 299.086 cv
230.255 304.946 li
230.336 305.34 li
230.418 305.354 li
230.472 304.905 li
232.737 298.028 li
233.714 298.028 li
235.993 305.001 li
236.074 305.354 li
236.142 305.367 li
236.224 304.96 li
238.055 299.086 li
238.082 299.014 238.096 298.95 238.096 298.896 cv
238.096 298.716 237.978 298.594 237.743 298.53 cv
236.916 298.354 li
236.997 297.906 li
237.494 297.979 237.967 298.015 238.415 298.015 cv
238.862 298.015 239.325 297.979 239.805 297.906 cv
239.9 298.354 li
239.529 298.435 239.297 298.525 239.201 298.625 cv
239.107 298.725 238.986 298.978 238.842 299.385 cv
236.278 306.94 li
235.356 306.94 li
233.063 300.145 li
232.982 299.778 li
232.914 299.765 li
232.805 300.226 li
230.567 306.94 li
229.631 306.94 li
227.121 299.385 li
226.985 298.986 226.865 298.735 226.762 298.632 cv
226.658 298.527 226.416 298.435 226.036 298.354 cv
226.131 297.906 li
cp
f
250.569 298.448 mo
249.552 298.448 248.794 298.792 248.297 299.479 cv
247.799 300.167 247.551 301.085 247.551 302.233 cv
247.551 303.382 247.831 304.363 248.392 305.177 cv
248.952 305.991 249.742 306.397 250.759 306.397 cv
251.777 306.397 252.534 306.055 253.031 305.367 cv
253.528 304.68 253.777 303.761 253.777 302.613 cv
253.777 301.465 253.497 300.483 252.936 299.669 cv
252.376 298.855 251.587 298.448 250.569 298.448 cv
250.671 307.049 mo
249.305 307.049 248.215 306.655 247.402 305.869 cv
246.588 305.082 246.181 303.997 246.181 302.613 cv
246.181 301.229 246.585 300.081 247.395 299.168 cv
248.204 298.254 249.292 297.798 250.657 297.798 cv
252.023 297.798 253.112 298.19 253.926 298.978 cv
254.74 299.765 255.148 300.85 255.148 302.233 cv
255.148 303.617 254.743 304.766 253.933 305.678 cv
253.124 306.593 252.036 307.049 250.671 307.049 cv
f
261.007 302.654 mo
259.23 302.654 li
259.23 305.787 li
259.23 305.923 259.248 306.027 259.284 306.1 cv
259.32 306.172 259.402 306.227 259.528 306.263 cv
260.654 306.452 li
260.559 306.94 li
259.926 306.868 259.359 306.832 258.857 306.832 cv
258.355 306.832 257.77 306.868 257.1 306.94 cv
257.005 306.493 li
257.367 306.447 257.627 306.392 257.785 306.323 cv
257.943 306.256 258.023 306.113 258.023 305.896 cv
258.023 298.923 li
258.023 298.697 257.95 298.562 257.805 298.517 cv
257.57 298.435 257.303 298.376 257.005 298.34 cv
257.1 297.893 li
257.787 297.974 258.299 298.015 258.633 298.015 cv
261.902 298.015 li
262.3 298.015 262.671 297.987 263.015 297.933 cv
263.042 298.187 263.055 298.496 263.055 298.862 cv
263.055 299.229 263.046 299.629 263.028 300.063 cv
262.526 300.145 li
262.354 299.313 262.201 298.814 262.065 298.652 cv
259.23 298.652 li
259.23 302.003 li
261.007 302.003 li
261.26 302.003 261.409 301.935 261.455 301.799 cv
261.509 301.673 261.554 301.46 261.59 301.162 cv
261.617 300.999 li
262.133 301.053 li
262.06 301.506 262.025 301.931 262.025 302.328 cv
262.025 302.727 262.06 303.151 262.133 303.604 cv
261.617 303.657 li
261.572 303.269 261.521 303.005 261.462 302.864 cv
261.403 302.724 261.251 302.654 261.007 302.654 cv
f
269.31 302.654 mo
267.533 302.654 li
267.533 305.787 li
267.533 305.923 267.551 306.027 267.586 306.1 cv
267.623 306.172 267.705 306.227 267.831 306.263 cv
268.957 306.452 li
268.861 306.94 li
268.229 306.868 267.662 306.832 267.16 306.832 cv
266.658 306.832 266.072 306.868 265.402 306.94 cv
265.308 306.493 li
265.669 306.447 265.93 306.392 266.087 306.323 cv
266.246 306.256 266.326 306.113 266.326 305.896 cv
266.326 298.923 li
266.326 298.697 266.252 298.562 266.107 298.517 cv
265.873 298.435 265.605 298.376 265.308 298.34 cv
265.402 297.893 li
266.09 297.974 266.602 298.015 266.936 298.015 cv
270.205 298.015 li
270.603 298.015 270.974 297.987 271.317 297.933 cv
271.345 298.187 271.357 298.496 271.357 298.862 cv
271.357 299.229 271.349 299.629 271.331 300.063 cv
270.829 300.145 li
270.657 299.313 270.503 298.814 270.368 298.652 cv
267.533 298.652 li
267.533 302.003 li
269.31 302.003 li
269.563 302.003 269.711 301.935 269.758 301.799 cv
269.812 301.673 269.856 301.46 269.893 301.162 cv
269.919 300.999 li
270.436 301.053 li
270.363 301.506 270.328 301.931 270.328 302.328 cv
270.328 302.727 270.363 303.151 270.436 303.604 cv
269.919 303.657 li
269.875 303.269 269.823 303.005 269.765 302.864 cv
269.706 302.724 269.554 302.654 269.31 302.654 cv
f
275.834 298.937 mo
275.834 305.909 li
275.834 306.036 275.845 306.124 275.868 306.174 cv
275.891 306.224 275.943 306.271 276.024 306.316 cv
276.16 306.371 276.395 306.425 276.73 306.479 cv
276.879 306.493 li
276.784 306.94 li
276.178 306.868 275.665 306.832 275.244 306.832 cv
274.824 306.832 274.31 306.868 273.705 306.94 cv
273.609 306.493 li
274.207 306.421 274.532 306.316 274.586 306.181 cv
274.613 306.127 274.627 306.036 274.627 305.909 cv
274.627 298.937 li
274.627 298.811 274.615 298.723 274.593 298.672 cv
274.57 298.623 274.514 298.575 274.423 298.53 cv
274.296 298.476 274.071 298.422 273.745 298.367 cv
273.609 298.354 li
273.705 297.906 li
274.31 297.979 274.824 298.015 275.244 298.015 cv
275.665 298.015 276.178 297.979 276.784 297.906 cv
276.879 298.354 li
276.273 298.426 275.934 298.53 275.861 298.665 cv
275.843 298.72 275.834 298.811 275.834 298.937 cv
f
283.838 307.049 mo
282.49 307.049 281.389 306.662 280.535 305.89 cv
279.68 305.116 279.253 304.037 279.253 302.653 cv
279.253 301.271 279.678 300.115 280.528 299.188 cv
281.378 298.261 282.518 297.798 283.946 297.798 cv
284.507 297.798 284.986 297.834 285.384 297.906 cv
285.782 297.979 286.144 298.049 286.47 298.116 cv
286.796 298.184 286.981 298.223 287.026 298.231 cv
286.936 299.218 286.814 299.99 286.66 300.551 cv
286.198 300.633 li
286.081 299.674 285.927 299.055 285.737 298.774 cv
285.303 298.539 284.618 298.422 283.682 298.422 cv
282.746 298.422 282.002 298.777 281.45 299.493 cv
280.899 300.208 280.623 301.14 280.623 302.287 cv
280.623 303.437 280.933 304.413 281.552 305.218 cv
282.171 306.022 282.979 306.425 283.974 306.425 cv
284.688 306.425 285.233 306.26 285.609 305.93 cv
285.984 305.6 286.28 305.06 286.497 304.309 cv
286.958 304.377 li
286.949 305.055 286.854 305.797 286.673 306.602 cv
285.796 306.899 284.851 307.049 283.838 307.049 cv
f
292.099 302.6 mo
292.099 306.181 li
295.219 306.181 li
295.337 306.072 295.474 305.821 295.633 305.428 cv
295.791 305.034 295.902 304.721 295.965 304.485 cv
296.453 304.566 li
296.445 304.82 296.409 305.216 296.345 305.754 cv
296.282 306.292 296.223 306.651 296.169 306.832 cv
291.502 306.832 li
291.086 306.832 290.575 306.868 289.97 306.94 cv
289.874 306.493 li
290.236 306.447 290.496 306.392 290.655 306.323 cv
290.812 306.256 290.892 306.113 290.892 305.896 cv
290.892 298.923 li
290.892 298.706 290.819 298.57 290.675 298.517 cv
290.557 298.462 290.336 298.411 290.01 298.367 cv
289.874 298.34 li
289.97 297.893 li
290.657 297.974 291.168 298.015 291.502 298.015 cv
294.907 298.015 li
295.314 298.015 295.685 297.987 296.019 297.933 cv
296.047 298.259 296.06 298.598 296.06 298.95 cv
296.06 299.303 296.047 299.665 296.019 300.036 cv
295.518 300.117 li
295.391 299.349 295.246 298.86 295.083 298.652 cv
292.099 298.652 li
292.099 301.948 li
294.134 301.948 li
294.387 301.948 294.537 301.881 294.582 301.746 cv
294.636 301.618 294.685 301.406 294.731 301.107 cv
294.745 300.944 li
295.26 300.999 li
295.187 301.451 295.151 301.876 295.151 302.274 cv
295.151 302.672 295.187 303.097 295.26 303.549 cv
294.745 303.604 li
294.699 303.215 294.647 302.95 294.588 302.81 cv
294.53 302.67 294.378 302.6 294.134 302.6 cv
292.099 302.6 li
cp
f
308.344 298.448 mo
307.326 298.448 306.568 298.792 306.072 299.479 cv
305.574 300.167 305.325 301.085 305.325 302.233 cv
305.325 303.382 305.606 304.363 306.166 305.177 cv
306.727 305.991 307.516 306.397 308.533 306.397 cv
309.551 306.397 310.308 306.055 310.806 305.367 cv
311.303 304.68 311.552 303.761 311.552 302.613 cv
311.552 301.465 311.271 300.483 310.711 299.669 cv
310.149 298.855 309.36 298.448 308.344 298.448 cv
308.445 307.049 mo
307.079 307.049 305.99 306.655 305.176 305.869 cv
304.362 305.082 303.955 303.997 303.955 302.613 cv
303.955 301.229 304.36 300.081 305.169 299.168 cv
305.979 298.254 307.066 297.798 308.432 297.798 cv
309.797 297.798 310.887 298.19 311.701 298.978 cv
312.515 299.765 312.922 300.85 312.922 302.233 cv
312.922 303.617 312.517 304.766 311.708 305.678 cv
310.898 306.593 309.811 307.049 308.445 307.049 cv
f
318.781 302.654 mo
317.005 302.654 li
317.005 305.787 li
317.005 305.923 317.022 306.027 317.059 306.1 cv
317.095 306.172 317.178 306.227 317.303 306.263 cv
318.429 306.452 li
318.334 306.94 li
317.701 306.868 317.135 306.832 316.632 306.832 cv
316.13 306.832 315.544 306.868 314.875 306.94 cv
314.78 306.493 li
315.142 306.447 315.401 306.392 315.56 306.323 cv
315.719 306.256 315.797 306.113 315.797 305.896 cv
315.797 298.923 li
315.797 298.697 315.725 298.562 315.58 298.517 cv
315.345 298.435 315.078 298.376 314.78 298.34 cv
314.875 297.893 li
315.562 297.974 316.073 298.015 316.407 298.015 cv
319.678 298.015 li
320.075 298.015 320.445 297.987 320.789 297.933 cv
320.816 298.187 320.83 298.496 320.83 298.862 cv
320.83 299.229 320.821 299.629 320.803 300.063 cv
320.302 300.145 li
320.129 299.313 319.976 298.814 319.84 298.652 cv
317.005 298.652 li
317.005 302.003 li
318.781 302.003 li
319.035 302.003 319.184 301.935 319.229 301.799 cv
319.283 301.673 319.329 301.46 319.365 301.162 cv
319.393 300.999 li
319.907 301.053 li
319.835 301.506 319.799 301.931 319.799 302.328 cv
319.799 302.727 319.835 303.151 319.907 303.604 cv
319.393 303.657 li
319.347 303.269 319.295 303.005 319.236 302.864 cv
319.178 302.724 319.025 302.654 318.781 302.654 cv
f
150.654 296.09 mo
153.128 296.633 155.875 296.905 158.893 296.905 cv
161.91 296.905 164.838 296.633 167.675 296.09 cv
168.309 299.078 li
165.955 299.381 164.25 299.742 163.194 300.164 cv
162.137 300.587 161.609 301.644 161.609 303.333 cv
164.325 349.235 li
164.446 350.807 164.989 351.832 165.955 352.314 cv
166.739 352.677 168.4 353.069 170.934 353.491 cv
170.3 356.479 li
166.257 355.995 162.664 355.755 159.527 355.755 cv
156.387 355.755 152.827 355.995 148.843 356.479 cv
148.21 353.311 li
151.347 352.948 153.49 352.495 154.638 351.952 cv
155.724 351.53 156.236 350.625 156.177 349.235 cv
153.551 303.967 li
153.008 303.514 li
152.343 306.533 151.709 308.766 151.107 310.214 cv
138.069 342.898 li
136.861 346.037 135.625 349.659 134.357 353.763 cv
133.723 355.755 li
128.292 357.294 li
126.6 351.621 125.122 347.215 123.855 344.075 cv
110.364 310.305 li
108.645 304.329 li
108.01 304.781 li
104.841 349.235 li
104.78 350.021 104.856 350.594 105.068 350.956 cv
105.279 351.318 105.656 351.651 106.199 351.952 cv
107.105 352.314 108.917 352.708 111.632 353.129 cv
112.809 353.311 li
112.175 356.479 li
108.131 355.995 104.991 355.755 102.759 355.755 cv
100.525 355.755 97.3862 355.995 93.3433 356.479 cv
92.7095 353.491 li
94.8213 353.19 96.4512 352.798 97.5981 352.314 cv
98.5635 351.832 99.0771 350.896 99.1372 349.508 cv
102.487 303.062 li
102.608 301.613 102.125 300.678 101.039 300.255 cv
100.254 299.833 98.8354 299.501 96.7832 299.259 cv
95.7881 299.078 li
96.4224 296.09 li
99.2583 296.633 102.336 296.905 105.656 296.905 cv
108.975 296.905 111.872 296.633 114.348 296.09 cv
114.83 298.263 115.434 300.315 116.159 302.247 cv
131.188 341.45 li
132.365 345.705 li
133 345.886 li
133.18 343.895 133.452 342.444 133.814 341.54 cv
148.571 302.79 li
150.654 296.09 li
cp
f
182.79 317.881 mo
182.79 339.068 li
182.79 339.438 182.825 339.703 182.897 339.86 cv
182.969 340.018 183.147 340.168 183.434 340.311 cv
183.891 340.569 184.576 340.812 185.492 341.04 cv
185.964 341.126 li
185.663 342.798 li
183.69 342.541 181.825 342.412 180.066 342.412 cv
178.309 342.412 176.443 342.541 174.47 342.798 cv
174.17 341.126 li
175.942 340.754 176.942 340.325 177.172 339.839 cv
177.228 339.696 177.258 339.438 177.258 339.068 cv
177.258 317.881 li
177.258 317.51 177.222 317.245 177.15 317.088 cv
177.079 316.931 176.915 316.78 176.657 316.638 cv
176.171 316.38 175.484 316.138 174.599 315.908 cv
174.17 315.822 li
174.47 314.15 li
176.443 314.407 178.309 314.536 180.066 314.536 cv
181.825 314.536 183.69 314.407 185.663 314.15 cv
185.964 315.822 li
184.134 316.165 183.118 316.595 182.919 317.11 cv
182.833 317.252 182.79 317.51 182.79 317.881 cv
f
203.933 343.099 mo
199.358 343.099 195.62 341.876 192.718 339.432 cv
189.815 336.987 188.366 333.706 188.366 329.589 cv
188.366 324.957 189.809 321.177 192.697 318.244 cv
195.583 315.315 199.443 313.85 204.275 313.85 cv
205.82 313.85 207.127 313.936 208.201 314.106 cv
209.272 314.278 209.995 314.393 210.367 314.45 cv
210.738 314.508 211.422 314.643 212.424 314.857 cv
213.425 315.072 214.025 315.193 214.226 315.222 cv
213.939 318.425 213.554 320.94 213.067 322.77 cv
210.751 323.199 li
210.351 320.14 209.866 318.196 209.293 317.366 cv
208.121 316.623 206.191 316.251 203.503 316.251 cv
200.816 316.251 198.701 317.338 197.157 319.511 cv
195.613 321.684 194.841 324.521 194.841 328.023 cv
194.841 331.526 195.72 334.515 197.479 336.987 cv
199.237 339.46 201.532 340.696 204.362 340.696 cv
206.419 340.696 208 340.176 209.101 339.131 cv
210.202 338.088 211.066 336.38 211.696 334.006 cv
214.011 334.221 li
213.982 336.137 213.682 338.624 213.11 341.683 cv
210.281 342.627 207.221 343.099 203.933 343.099 cv
f
240.515 326.415 mo
240.515 317.967 li
240.515 317.566 240.479 317.28 240.409 317.109 cv
240.335 316.937 240.171 316.795 239.915 316.68 cv
239.371 316.423 238.6 316.223 237.599 316.08 cv
237.041 316.037 li
237.427 314.149 li
239.542 314.407 241.487 314.536 243.26 314.536 cv
245.033 314.536 246.875 314.407 248.792 314.149 cv
249.136 315.822 li
248.049 316.052 247.263 316.302 246.776 316.573 cv
246.29 316.845 246.047 317.28 246.047 317.881 cv
246.047 339.067 li
246.047 339.667 246.219 340.068 246.563 340.268 cv
247.104 340.554 247.821 340.811 248.706 341.04 cv
249.136 341.126 li
248.792 342.798 li
246.875 342.541 245.033 342.412 243.26 342.412 cv
241.487 342.412 239.529 342.541 237.385 342.798 cv
237.041 340.911 li
239.1 340.653 240.229 340.297 240.43 339.839 cv
240.487 339.667 240.515 339.382 240.515 338.981 cv
240.515 329.332 li
226.919 329.332 li
226.919 338.981 li
226.919 339.382 226.955 339.667 227.027 339.839 cv
227.099 340.011 227.277 340.154 227.563 340.268 cv
228.049 340.525 228.822 340.726 229.878 340.868 cv
230.394 340.911 li
230.051 342.798 li
227.907 342.541 225.955 342.412 224.197 342.412 cv
222.438 342.412 220.586 342.541 218.643 342.798 cv
218.3 341.126 li
219.386 340.897 220.171 340.647 220.659 340.375 cv
221.145 340.103 221.388 339.667 221.388 339.067 cv
221.388 317.881 li
221.388 317.28 221.216 316.881 220.873 316.68 cv
220.329 316.394 219.615 316.138 218.729 315.908 cv
218.3 315.822 li
218.686 314.149 li
220.574 314.407 222.41 314.536 224.197 314.536 cv
225.983 314.536 227.92 314.407 230.008 314.149 cv
230.394 316.037 li
229.05 316.208 228.135 316.401 227.649 316.616 cv
227.162 316.83 226.919 317.252 226.919 317.881 cv
226.919 326.415 li
240.515 326.415 li
cp
f
263.888 321.612 mo
261.015 329.89 li
267.747 329.89 li
264.874 321.912 li
264.403 320.111 li
264.103 319.982 li
263.888 321.612 li
cp
257.97 339.195 mo
257.97 339.71 258.326 340.097 259.041 340.354 cv
261.444 341.126 li
261.186 342.798 li
259.327 342.541 257.755 342.412 256.469 342.412 cv
255.182 342.412 253.552 342.541 251.579 342.798 cv
251.237 341.126 li
252.522 340.868 253.338 340.568 253.681 340.225 cv
254.023 339.882 254.438 339.024 254.925 337.651 cv
263.33 314.75 li
264.674 314.493 265.947 314.064 267.147 313.464 cv
276.496 337.651 li
277.011 338.996 277.439 339.847 277.784 340.203 cv
278.125 340.562 278.855 340.868 279.97 341.126 cv
279.67 342.798 li
277.698 342.541 275.775 342.412 273.902 342.412 cv
272.029 342.412 270.021 342.541 267.875 342.798 cv
267.619 341.126 li
268.563 340.84 269.37 340.568 270.042 340.311 cv
270.713 340.054 271.05 339.682 271.05 339.195 cv
271.05 338.996 271.007 338.796 270.921 338.595 cv
268.734 332.633 li
260.071 332.633 li
258.055 338.595 li
257.997 338.738 257.97 338.938 257.97 339.195 cv
f
302.228 314.278 mo
302.313 318.01 li
302.313 319.011 302.271 320.011 302.186 321.012 cv
300.211 321.354 li
299.812 319.153 299.354 317.752 298.839 317.151 cv
290.691 317.151 li
290.691 326.587 li
295.624 326.587 li
296.337 326.587 296.81 326.372 297.04 325.943 cv
297.209 325.629 297.424 324.972 297.682 323.971 cv
297.768 323.542 li
299.612 323.757 li
299.382 325.272 299.269 326.68 299.269 327.98 cv
299.269 329.282 299.382 330.647 299.612 332.076 cv
297.768 332.248 li
297.511 331.132 297.274 330.354 297.061 329.91 cv
296.846 329.468 296.367 329.246 295.624 329.246 cv
290.691 329.246 li
290.691 339.753 li
299.269 339.753 li
299.64 339.438 300.077 338.702 300.578 337.545 cv
301.078 336.387 301.426 335.45 301.627 334.735 cv
303.601 335.078 li
303.571 335.908 303.457 337.188 303.256 338.917 cv
303.057 340.647 302.872 341.812 302.701 342.412 cv
287.732 342.412 li
286.56 342.412 284.745 342.541 282.287 342.798 cv
281.942 341.126 li
283.8 340.754 284.844 340.325 285.073 339.839 cv
285.129 339.696 285.16 339.424 285.16 339.024 cv
285.16 317.838 li
285.16 317.181 284.93 316.752 284.473 316.552 cv
283.93 316.294 283.244 316.08 282.415 315.908 cv
281.942 315.779 li
282.329 314.106 li
285.073 314.393 286.875 314.536 287.732 314.536 cv
298.283 314.536 li
299.655 314.536 300.97 314.45 302.228 314.278 cv
f
315.308 318.267 mo
315.308 339.71 li
322.855 339.71 li
323.227 339.396 323.705 338.659 324.292 337.502 cv
324.878 336.344 325.271 335.437 325.472 334.778 cv
327.53 335.164 li
327.502 335.879 327.373 337.115 327.145 338.874 cv
326.915 340.632 326.716 341.812 326.544 342.413 cv
312.22 342.413 li
311.591 342.413 309.861 342.541 307.03 342.798 cv
306.688 341.168 li
307.773 340.939 308.56 340.689 309.046 340.418 cv
309.532 340.146 309.775 339.682 309.775 339.024 cv
309.775 317.924 li
309.775 317.295 309.604 316.881 309.261 316.68 cv
308.717 316.395 308.002 316.138 307.116 315.908 cv
306.688 315.822 li
307.073 314.149 li
309.046 314.407 311.068 314.536 313.142 314.536 cv
315.215 314.536 317.28 314.407 319.339 314.149 cv
319.683 315.951 li
317.909 316.294 316.737 316.573 316.165 316.788 cv
315.593 317.002 315.308 317.496 315.308 318.267 cv
f
371.437 357.203 mo
362.442 357.203 355.094 354.623 349.391 349.463 cv
343.687 344.302 340.833 337.104 340.833 327.869 cv
340.833 318.634 343.671 310.924 349.345 304.736 cv
355.018 298.55 362.623 295.456 372.161 295.456 cv
375.902 295.456 379.102 295.698 381.758 296.181 cv
384.413 296.664 386.828 297.131 389 297.584 cv
391.174 298.036 392.41 298.294 392.713 298.354 cv
392.109 304.932 391.294 310.094 390.269 313.836 cv
387.19 314.379 li
386.405 307.981 385.379 303.847 384.112 301.974 cv
381.215 300.406 376.643 299.621 370.396 299.621 cv
364.148 299.621 359.183 302.006 355.502 306.773 cv
351.819 311.542 349.979 317.76 349.979 325.425 cv
349.979 333.091 352.046 339.609 356.181 344.98 cv
360.314 350.354 365.701 353.039 372.342 353.039 cv
377.109 353.039 380.746 351.938 383.252 349.734 cv
385.756 347.531 387.733 343.926 389.182 338.915 cv
392.261 339.367 li
392.199 343.895 391.565 348.845 390.359 354.216 cv
384.504 356.208 378.195 357.203 371.437 357.203 cv
f
395.255 313.928 mo
397.269 314.216 399.276 314.359 401.276 314.359 cv
403.276 314.359 405.484 314.216 407.901 313.928 cv
407.771 315.567 li
406.937 315.74 406.275 315.964 405.786 316.236 cv
405.296 316.511 405.052 316.87 405.052 317.315 cv
405.052 317.762 405.167 318.172 405.397 318.546 cv
410.188 326.875 li
414.763 318.502 li
415.05 318.014 415.194 317.604 415.194 317.272 cv
415.194 316.942 415.043 316.668 414.741 316.452 cv
414.439 316.236 413.511 315.942 411.957 315.567 cv
411.828 313.928 li
414.187 314.216 415.956 314.359 417.137 314.359 cv
418.315 314.359 419.884 314.216 421.841 313.928 cv
421.668 315.567 li
420.776 315.654 420.057 315.898 419.51 316.302 cv
418.963 316.705 418.431 317.467 417.913 318.589 cv
411.138 330.5 li
411.138 339.046 li
411.138 339.448 411.173 339.729 411.245 339.888 cv
411.316 340.046 411.482 340.197 411.741 340.341 cv
412.316 340.629 413.151 340.888 414.245 341.116 cv
414.849 341.204 li
414.461 342.758 li
412.303 342.526 410.31 342.412 408.484 342.412 cv
406.655 342.412 404.75 342.526 402.765 342.758 cv
402.419 341.16 li
404.52 340.815 405.671 340.398 405.872 339.909 cv
405.958 339.736 406.002 339.448 406.002 339.046 cv
406.002 330.587 li
398.881 318.287 li
398.391 317.28 397.902 316.597 397.413 316.236 cv
396.924 315.877 396.262 315.654 395.428 315.567 cv
395.255 313.928 li
cp
f
429.782 314.359 mo
445.405 314.359 li
445.794 316.733 li
430.645 339.478 li
441.003 339.478 li
441.435 339.075 442.067 338.125 442.902 336.63 cv
443.736 335.133 444.297 333.982 444.585 333.176 cv
446.786 333.694 li
446.757 334.5 446.555 335.96 446.182 338.074 cv
445.808 340.189 445.506 341.636 445.275 342.412 cv
424.517 342.412 li
423.912 340.168 li
439.19 317.294 li
429.351 317.294 li
428.516 318.416 427.781 320.315 427.149 322.991 cv
424.991 322.603 li
424.991 318.345 425.077 315.669 425.25 314.575 cv
426.718 313.798 li
427.581 314.173 428.602 314.359 429.782 314.359 cv
f
470.565 314.101 mo
470.651 317.855 li
470.651 318.862 470.608 319.869 470.521 320.876 cv
468.536 321.222 li
468.133 319.006 467.674 317.596 467.155 316.992 cv
458.955 316.992 li
458.955 326.486 li
463.919 326.486 li
464.638 326.486 465.112 326.271 465.343 325.839 cv
465.516 325.523 465.731 324.861 465.99 323.854 cv
466.076 323.423 li
467.933 323.639 li
467.702 325.164 467.586 326.58 467.586 327.89 cv
467.586 329.199 467.702 330.572 467.933 332.011 cv
466.076 332.184 li
465.817 331.062 465.58 330.278 465.364 329.831 cv
465.148 329.386 464.666 329.163 463.919 329.163 cv
458.955 329.163 li
458.955 339.736 li
467.586 339.736 li
467.961 339.42 468.399 338.679 468.903 337.514 cv
469.406 336.349 469.759 335.406 469.961 334.687 cv
471.946 335.032 li
471.917 335.867 471.802 337.154 471.601 338.895 cv
471.399 340.636 471.211 341.808 471.04 342.413 cv
455.978 342.413 li
454.798 342.413 452.971 342.542 450.496 342.801 cv
450.151 341.117 li
452.021 340.744 453.071 340.313 453.302 339.822 cv
453.359 339.679 453.388 339.406 453.388 339.003 cv
453.388 317.683 li
453.388 317.021 453.157 316.589 452.697 316.388 cv
452.15 316.129 451.46 315.914 450.626 315.74 cv
450.151 315.61 li
450.539 313.928 li
453.302 314.216 455.114 314.359 455.978 314.359 cv
466.595 314.359 li
467.976 314.359 469.299 314.272 470.565 314.101 cv
f
484.548 340.686 mo
485.843 340.686 486.914 340.283 487.764 339.478 cv
488.611 338.672 489.036 337.564 489.036 336.154 cv
489.036 334.831 488.461 333.68 487.311 332.701 cv
486.361 331.896 485.275 331.141 484.052 330.436 cv
482.828 329.731 482.059 329.285 481.743 329.098 cv
481.426 328.911 480.894 328.559 480.146 328.039 cv
479.397 327.522 478.857 327.077 478.527 326.702 cv
478.196 326.329 477.815 325.868 477.384 325.321 cv
476.606 324.285 476.219 322.977 476.219 321.394 cv
476.219 318.978 477.117 317.086 478.916 315.719 cv
480.714 314.353 483.009 313.669 485.8 313.669 cv
486.807 313.669 489.425 314.043 493.654 314.79 cv
493.625 315.481 493.475 316.633 493.201 318.243 cv
492.928 319.855 492.705 320.978 492.532 321.609 cv
490.418 321.912 li
490.216 319.581 489.943 317.971 489.598 317.078 cv
488.619 316.359 487.238 315.998 485.454 315.998 cv
484.332 315.998 483.404 316.352 482.671 317.057 cv
481.937 317.762 481.57 318.733 481.57 319.97 cv
481.57 321.179 482.188 322.243 483.426 323.163 cv
484.347 323.854 485.512 324.595 486.922 325.386 cv
488.331 326.178 489.367 326.789 490.029 327.221 cv
490.69 327.652 491.453 328.228 492.316 328.946 cv
493.928 330.356 494.734 332.155 494.734 334.342 cv
494.734 337.19 493.719 339.362 491.69 340.858 cv
489.662 342.354 487.166 343.103 484.203 343.103 cv
481.239 343.103 478.506 342.57 476.003 341.506 cv
475.944 341.132 475.916 339.974 475.916 338.031 cv
475.916 336.09 475.974 334.846 476.089 334.299 cv
478.333 333.823 li
478.506 335.838 479.095 337.485 480.103 338.766 cv
481.11 340.046 482.591 340.686 484.548 340.686 cv
f
517.133 316.431 mo
517.133 316.028 516.327 315.697 514.716 315.438 cv
515.018 314.014 li
516.428 314.244 517.881 314.359 519.377 314.359 cv
520.873 314.359 522.354 314.244 523.822 314.014 cv
524.124 315.438 li
523.146 315.582 522.369 315.805 521.794 316.107 cv
521.218 316.41 520.629 316.892 520.024 317.553 cv
511.651 326.4 li
522.484 338.269 li
523.462 339.334 524.268 340.046 524.901 340.405 cv
525.534 340.766 526.368 341.074 527.404 341.333 cv
527.103 342.758 li
525.174 342.526 523.038 342.412 520.693 342.412 cv
518.348 342.412 516.384 342.526 514.802 342.758 cv
514.414 341.333 li
514.529 341.305 514.701 341.269 514.932 341.226 cv
515.161 341.182 515.334 341.146 515.449 341.118 cv
515.564 341.089 515.715 341.053 515.902 341.01 cv
516.09 340.966 516.233 340.923 516.334 340.88 cv
516.435 340.837 516.529 340.787 516.615 340.729 cv
516.815 340.614 516.917 340.435 516.917 340.189 cv
516.917 339.945 516.658 339.535 516.14 338.959 cv
507.163 328.73 li
507.163 327.307 li
516.485 317.553 li
516.917 317.093 517.133 316.719 517.133 316.431 cv
506.559 317.726 mo
506.559 339.046 li
506.559 339.42 506.595 339.687 506.667 339.844 cv
506.738 340.003 506.918 340.153 507.206 340.297 cv
507.666 340.557 508.472 340.801 509.623 341.031 cv
510.185 341.118 li
509.882 342.801 li
507.725 342.542 505.731 342.412 503.904 342.412 cv
502.077 342.412 500.172 342.542 498.187 342.801 cv
497.884 341.118 li
499.668 340.744 500.675 340.313 500.904 339.822 cv
500.963 339.679 500.991 339.42 500.991 339.046 cv
500.991 317.726 li
500.991 317.352 500.955 317.086 500.884 316.927 cv
500.812 316.77 500.646 316.619 500.388 316.474 cv
499.897 316.215 499.207 315.971 498.315 315.74 cv
497.884 315.654 li
498.187 313.971 li
500.172 314.229 502.049 314.359 503.818 314.359 cv
505.588 314.359 507.465 314.229 509.45 313.971 cv
509.753 315.654 li
507.911 315.999 506.89 316.431 506.688 316.948 cv
506.603 317.093 506.559 317.352 506.559 317.726 cv
f
537.935 317.726 mo
537.935 339.046 li
537.935 339.42 537.971 339.687 538.043 339.844 cv
538.114 340.003 538.294 340.153 538.582 340.297 cv
539.042 340.557 539.732 340.801 540.654 341.031 cv
541.129 341.117 li
540.826 342.801 li
538.841 342.542 536.964 342.413 535.194 342.413 cv
533.425 342.413 531.548 342.542 529.563 342.801 cv
529.26 341.117 li
531.044 340.744 532.051 340.313 532.281 339.822 cv
532.339 339.679 532.367 339.42 532.367 339.046 cv
532.367 317.726 li
532.367 317.352 532.33 317.086 532.26 316.927 cv
532.188 316.77 532.022 316.618 531.764 316.474 cv
531.273 316.215 530.582 315.971 529.691 315.74 cv
529.26 315.654 li
529.563 313.971 li
531.548 314.229 533.425 314.359 535.194 314.359 cv
536.964 314.359 538.841 314.229 540.826 313.971 cv
541.129 315.654 li
539.287 315.999 538.266 316.431 538.064 316.948 cv
537.979 317.093 537.935 317.352 537.935 317.726 cv
f
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (John Macey) ()%%Title: (Michael_Cyzeski_final.eps)%%CreationDate: 1/11/13 7:36 PM%%Canvassize: 16383%AI9_DataStream%Gb!j.kuo%<dP,ub_"V4@LY;;^O>%R]KJ=#D";51Z+U!FSD:[S0rUF1jWBofM\%CD^@=<L;k@?a!f[Wm!<%=/*V5dRq[*a8J\UT!P%fP(82WMmX_Nc#P*h^Od^4-(c^G/j-uk2"d5rM=SjC>RLqm7O_4CpfUeQ+q)f`IlkH4K0&Kl]"C*?cA!omI$rM>2Q`+WfN-c[Fol/%Fc*b2ee"c!2]H[rNVgW&kM(;uWG"=FK$>6$H.E1)J/5mUGk^=&nTJ8(#,Lqhh.Luf`Wto@I6XiX3^>AqU+8W4hV+O_Z_VU;AD&l!%gWPUSgfX:C)(8TI\D1!i6"eB4AUB.<?X2?)C`U5lRVeGsHndKO1\<Ld.S#!tn_`uh8c@VQh.bD#O3O#01STr4k3I)jp!f#,(S?,Y%5JK*kSN8L_e=<9$Hh+?g!SeAVZ[`Rk]'W`"0H?b^?]Xl0/]"C@4hc$,m9e)jj2X5&PP%u>o^RE]agu%t)Lq=APIF#pFnYCY61PTJ%F4Gp*ID)mb1kPSS7dWK`!>'pV>i9\*ohb+-3&MXnf_MA<-X2*ehlluaDt/'\"%TQfQd<otU3ON(S[)P.*?@=pM2(+,?/6qJ%Q.[_%!:kbCFns.X&J:b"pd(oP`ulNqXiH4;QR1GiSiN7UZErA5]FRHO22WH):bTt_o"QjXB6'^/SPK,PO:SX%3=,.g>5@*@)u0==`;?D)%#].s!YNT+X(rOc+Lr@JKX]#>#BcC)mVuH/E`nqdNBat'0-@RucIel6W<[n_sReYJknYp6^;q'g*eLK/4>)n63*!^sR%[M,T/EJkA%Wl40!=N:*?N">rm[dR]ThoAXi%6q*sV1PNn's(Q;i0-b:b>bP;Zs%SlXBhsfo4jQV0Z?^=e&*d.;lhF?RqA@IT3)HtKV)?Rq]pO2%c`fq7M.Nn]pkes8SD_!2-iCnifH^;^9["m(N'5$Rlo4o4./!u%A8ZGb=:4qZT3.so7@5&:Umu_S>\#JG-eIFN1\FF'e&JL7j`6;j%$3#^VY^cG)R!8bEfDLRt%0'ccm%58+jpK_Zro#7(_VXhXj!Rcc&H'IEfK];p;.M+a^2j,'U6G\S>fr*I1T$5DNhr+]OtYU3VB.1!%]!u%c/B<ZAaF@:rHRC*QH\]#>fDH?[LS%\+jW"*;4Q3mHM.No8Kp%[:3Hpj3g]C-XP[Q!k;VI4QQ5#Vg3A9H\1>eK\juTupHpc'<%Lrd:bm8uuhcIfZk5NdMi3R:BbAfc$U%:c?b5F12G[WA!+8^>n+Ak>1?ZHprNjZ\nnX<#HFSE\u\9.l"[J.tRM@dT6rP#b/XCmX[4%9jQB7+9#iRW/H.[_,%q_r!sStr"o@oIta&&1F2nAs'1n?LO],lkOEK:PAP[+htfAu$30S2N=Gk-roJW`dcMlD_S?"eCQ![tJ,,]P%r*t/8@u$[=Y5DN'ikNi)_l?g^FgHu'9_^Gp^[%K'[;N'mlX"^4F/r;b'-Qd/N6J0eiH'NN&ajPj-@W,peP46&-O0JR9J`=EN01`k%^YDP")dkRg#5GcifFcET&-kB2s)6o'FWK_o/9hZ7:b!$GD*SQ7[u;oSCI5'eY<f9'<ArjR?T-"4e*Wm?UtZ+R-JC"gQ.k1PS+;d$%3l31,i2o^Qf[ptjQ[Q7ke.OucD,Z\*"HRBs9Ds$6#lLg_?g[scM6TUQpch]6>U(;.aWBEEFW(AC4FHmkGER`efDHH))op!Qnao4D%_@$3NIc4DE[rpcsQJ_gmLMpD4235#rVW=;d,UoEagg[f[c3%tF_A8,T'jC`7qUAIAAR`:()jE"#Ag/%i56h/Ld3PkpR1ECpnsqe!%-/cBg9AiaC_aOq%GG-9s!p>@@X?ehsI49.?Ef'&;_P\qj4A47R_lITEm';9Vn<I4t?EQ(3Bfm5aPT(lHlbj6dDO8@iSQao[3j9%a%NQYecL^!V\F&52C'Y.dgc"F&]]oZUFC$$>Y5>dX.F;5,kr6K>]?2>:F61'3i#ar-^>_;D`>_9?hN>]35+I$S-T!O[0HusWj"eQM)%^qV^%Wn\MWhdX`,pq3I&-/!D94.!j'.-E.V<6s`iQFpgIW9%_m;"B$;Rj?'C4rXN_b(ei]_&-;FQq"sUZE21D`;N#Z^sV=Ji,55n%].RU/H*Ap.PuUrtGYW=92utPQ<]Db#C-1?2c:'2(+PEu"!\X\@7i0?GMi)n'Dr]lsX+;7Q5cYa#01'M"2"R$_!3Ste>Gr:g%A=lP%,Y"TL&:0'+0(b/WC2\rSJN?fp?o`6oX)&(_A4ih`RZD]mU#qHJ7;@7'oWi'J6G((dd7glgSg?K?b[89Jg=T>i=,DK$OpnjP9:M4o%kS>.GY"<G]<Y'HW3#nnBOl*)bPL`fKS,R<2Zu2>8P]LN_B!.9/d@+M@r/7rcC.0a*C=)f*rji_3P/M=EmdQ1U3JO0U08&4`O;YU7%+kN`'hX]A3Y)u6ip7&;X.__a\Qc+Yec/5T0I]nr/&k;)oAaiA;.2=?V5)!%<iG=iY:MZ?]*VWe3:R%W'MXk2f>JV6DZ#.9[&UQ"Z%54#PI._s)G5dhZZ6[DQ!4C#_'T'Ru^%t\Df<pG)aah!2-.CF*lACDZ)BJjnnr)kEH"-5:LIN+_XXgWHoq,?R!WJ?jQj=QAoc$iAh%*j!>+P^P(jV5mjY98>>@>N'7*D8IK1@VnVWS'47\"6*eHi@)ik"eU\bo-@m5S_u0F2`FiETsc=L.-(p)<&%uKO/M%rY8gZ.>8=AM%N4<_r1SSEqCT\mrPeTR<@Lq*dQ+[dB,C44!b9BW_hFqk7GLUEo3,c\hA_O)a-?UNbNNT'8/;\4:S^!oSgC!2bFsNu9?GGb/eu->H%kB]HY4GdQRq'KrD_;FpICI7I.W,^_V>0Q(GD^]Ug];SpZ?O\r!Feem./4lDDrmM;KnS^B2Ebo1Ppi;Td)&F'F.lFWn&ai'Jgu8(Q%m7HONjH"PEe?Gbu[8tX-5L+]<)+u\W+\R>&0feiQSl)QuBbc_QN$nDg+E"VQYUo0V2VBPndcRgBa1UU.*5<X,Ss_!H/0Ur46G3ur%"42W^ZAQq2pD'gm#5aR+Q34[Q@D/YZ[@l0ci!Lk,+'A92oLdAGfMYo*WaS&@<9&;Kl^P7<`=1aU`*jQ'Tinp%Em6pN_fc/\hS$44%"P/Ic[3Ye6ofGskUq^#YYaYSNgD9*ij=efAC>tF>J$J]T2?/kW=%TTXoF:Tqs#4]Qg]ELLba1GA"jd(EU&IL*1g&"P[dDq!PEIuZ%s8Q;<GL%"iQGI1$*3hdar9)f5h_SaAFRB*o)>]tC4$V?\5<W<SmAP^6VK^SA@^;q$s2P'dS&o2&nXl'^?7VcA,\d4s*G0!\KlGh<%aSc?J_W8W.fiF=Q1>9meG=1*9]JC'AP&at3#CC.K]BDDq#I?N<2tF&ciP$S%N,W-Us+U=O[Ut.*#`n]cr'0WeW955VaLhn:[`&-a%s*7uC:MP[_<eHV>rZ)k2*+t6cZ()Z"oKe8Iq7F&NrJ#5*KD6ifW"OmB&c#Z#+@A6KmU\*>OIobC_KWqI-AI9P:\\jdV4Ye.me<M.%E.=mZXDR/`(W'(/P<B.JSLs#ggemTj?2>+8ZC$\Np<_!8hGNMfi\o9I4O7i+E\:,=Wn\ri7p.ash[t/hfZ,93oj[m^SY.?RgHrX-%h^*L+U"g$dE2.a^k-nuWVg<C`0=erk.)m[]97lu.T_DD,jI9Y6*r<^_VXPaG$!GV$9sV4_q+I]LI3c"`-['Q8@X##_*RtAQs3_Q)%7_fDF(f`6E^!#4ho2qhG9@f<i=Rt@rpER[Qr"eHA";0fkb5>SLL7Tmg<&3?IT=$oZH@2$W;"mM+LseQO0:SZti;(XsVnb*jGZ(NB%`Y."Ko#RjP$s-=S:,ITC%-<j%K&f9kSb/>S4NP3ckZaC&OcXe"3jA6udh'S\SY_FfnYA+%iKEAW6`alt*n&Z'X>ps&/Z"W,Pt+1#%`dY7tLj``1>1kQ^*YVOsK[2FClB,Ag?@F!0H0WT[gQp>[)Pe^FqMKDAo2VBJ8adYF:,t\iqO,9mA=^lQ--$<JeJ@3)$Lb[Or`&U3%PI@9uT#JEhknB;I"J6)V,Zm^>EVi"I$)MPl38IYNZfdrpOJ`P]7Ptg*WlfourNl-K\n[#W98<&;6SAj^X*WF,YXemkZGgWqJGcB,%m=fqg6.M/_mGP(*kIefRBuc6O2of6)3Mt.i[@c1Os.=N0*gKM^B,@m"oNh1=,i*sVg6R'kH'6femG<=m^V_`MpA^uC]k>W?oA4t=%D?'&BZ%'&;cFX$?SiUu&h(S6r>L![I>J%@/iIB&K*j4o1Sf.BsXXtc\$r;+uqY\N6SqCMIDecm&4`Tr\Qd=OcWM0=QIH[=@rn4^f%V:*r<4f1=2[n?60'@b_k&aHmVCc!7/=n%uRSCTc?YFO04^MaUO;#9\co;i:SoYe@%DS3f\m8iiGFnb!1ZS9(Ahn6'-5IW?8m@ecH%qn%=/R41l=5ksa=mBKSCf,e:31(dM*[8su^&"tcWP^e&3hQ6`n[[tD%%,H7*X57O(.VJoTmH)(WV:Kt[NV^.^H`=E1":m3T5Q1g^%C;?SUG6lBC[+>%Qgh>2Emb7b;rY`\qYho.Mmk@VA<SV9$[=8oU2k,d,D=g\U?%<6=jo7Er32R$97k`)ZmZp7lGY@A)c@9+M:cc8n%Gkg0T]i&W&*ZnRnf3aS_8IZq-%pIt*r<V!3caV0=A,A9N-O"NqCNU]e)YMRogR\1^(,k6ncc;B!&4BDW+goSX=3S')T)Pb'ed6!P%=-ZCL"pjT8:lMF>>?JttM*=/?"Q.M^NI&4@\G+GLf*hO*/et7e5Uk7?)P(e&`PoaKF1jP?=?M"ZIYFq\,$ON8TSX*3-hqj_OP.'h%"e"VU'efQ@+!9IbDZKa:BGD&8=5UCE4[:Yq$CI$(EF2gYAb<]5>_H_J0+eIQ$H_Vea5^?u%WY?5*8_O[EiY=uG+gGHqY74T-`pT'%)k-(qpt%9D'>KpCj4S<O_Da4/inoHm6uZi(GU)F4Uq32'g'>LF!UAY['c9=eFH%BI"='B87t:V;%%)WOcmgiqGt#JNPeTM%nCQ\@%o"EWNRt"cbllS.Sl\Q/0(T7<3gj"Cj$_Z*TO10%u3\3Aa=EM7,Wr:g@0`q8FWOlMuNVccTL!(=P`EhCqn.\)JJ)aMKVpk*@g,FN3%>4)&<'2JWjfIN)YJ(5HUZ7NlI.HOlD(3;2r8NZM/IjoSZ+6b?kH4K';'>[d5,W>;WOBQu05MO5Fk"?W7CB#3s];PLRT"`=0,9$P)%H`q)U51d;.enuH"4G)I3,l]etoVK<C:N\5b+-pC&hAs:"jZfffr])uDC=gft_DMj'7p^35a6*WQnm=f-J"/+:ohOlqL1j[Mr#t<l%\/.&#*[t.t,K-j(dh_>'buKF&`bi'5\hDq!4*\R3]FETBMMiFXOhl(L?Bf,\O6n:.5R7_JB`ZI0r:C$u7e<`\Hsf/?%>,+D:[5=l%;fGQg?.;FTFuc\FrunGS(r"OUCY4AQGj.U8JA#:8>IGj002meUEV.h-"[]OE0bhj9#C'stemMVKrWW]Nmu-SRs/G1W,%Pc@&Q(U@%ZY[uK4Ye)!Xa7V9qQ!s#>lT#G\97i(WSK`r*]niVK-sJ^ftcMms&a9Up@@]RH`.aAS$-i8j6GND,U6Z3p\-CnGcnHH@PkK"S"3Z\%)Jja<j@UKN^HRqe2['>1fa7k/ICH`cenG<jeh+:YnJ1c2/Jsf:[mhqh6p6ff;0LlE[+8ISg,a?L058XabJCR@_nq/1bV.Ls?(Lb"%qMtL=k_B!r6e0,YE;#/1"mo_3JlKe_b^eL,c""/J^M</bT[13HN1a5LafgbWT!sM7$\-^q3ZoKQ[79QF:25olKDPQ,gTr*`\77aM%H+X4o,1T;K6rX9\,Z^IFB^/@Y<Z/KHkbY3Mh<J4>+]4c]>A\$[Sp$$k9),G$f]HQ6egp/%gY!>0)NV'UL:E-?)eQng1t(gC9PP$`%8r^lXH4flAc)5m5_B#".;?B/Fn!^BUqL/+.-nZQ!4-@Rp.[Da4Y[>Ai(S\Op-J(u3cmWC5'LDRO`^/]!Q)u0U.Y9f2.XTrIT5[Z!%:Q+Be1E3@<6o6ihhJUm3+&OrCZcoF3VD9B2Q7M>I/(%LTPt34?/+mM*?JIS*c-$2ASBcfUZ:AB>:K?XUH,[aC1Q.1cb:TmIRpA11%:MP[(d(!BZh7P>s5'EN537T4oP"OUh>33BY$OCSSQ$5=%A0B[:pl`XUZE="EZ\8geok5BRre/\reSP1[F@h:TU3WQo@U=5c$5>C5%YN9+ObPd]$gZucK;]0C(Y_U0F2r1T+].3<!k3$6LT"baD=m*%7CM7:s:*Q0bhUd7Oq#9UL^@SB1l*%>$5JI&3p*eKign$ZddSbB!%qp>i7;F+\nrP&+!B=Un>fu[O0dsTDG[e9Fb.mN1NAd8N/Qs-K.l.)5"WcJjaW6S7@TfP\XQ"iI!9S,IB[Hk%6DrAs#=o@lf;nd1_%[XL,AZ6oHa]8UMABTRDG=L?8ES8gQ;JYJ%!lRM`!f5`CEO@YQ^Q$gZJ\tGS?>iF\5`29aY>6O1->PG7CFN3W<UI<(s$.3Xg[s[pT%QM/V[oA<^I1+_)Er2R4])#i5%.OIM8TZfP@"UJ7`eN$4TTU_`I>X,XGYBhV,e!p$&TRlNh[so2Q>@9\)H>#::+)Y>I'lo7roKk#N%M2]A>["$8qI;uBJd$D3,4[\UCb=V#npQ>Vir_i+ZjAPBW>,*]iodlH7HuYk3`nfMi!_R%l?J8O5Kea\$;^r9.A51RnK;K]$86baj%AQi!,-BZLZ/2AK-A_M(3Z<(YDibI!CW])\5g[-4(?C=5gl4::A':Gjm?TR8PcR@8h;;p(OaiOXGlLn<H^>>m!1\B-HCSsuf\Of7*%W5Zil0hleBFdB"ZS$.#R-3b2uB69[OgqWNgGE#VKT"qG/hd5_k.0M,+H[1`kN,WFX<N;B$#+Zf-l1A-SZs<N,^P-MsXTQ`;HM[9W%dIHm'nLl,V,$GnRTfm*82[)*"(jf.LX%2hc\=8IISb<k^h,P9jG,HK"'XI`"!nDpk=A>"ja!a`Sf6cR`j!?W]YPATKXMVjje4?0C%Y_YF$qr)nUY<g"O$;=fB\YN[:AurLI<j_o`<_b@Kg@[!XH0pP*9ADPaf@u>s0=>]<BY5I+"#1-/_Z1#N.KZ-k16noJH0_Ii"3J`C%rfhP.^5/9<\AqB_mk``kjJ#3#s(c>F4pRBbD`:K^Y8WBOF[G1t\A<!,a:NSIep_pmKt[4RL+S8$>-PBAg3"[EQ"+od53X]ED`>cV%$IrkOTUr,S-WkIe5;mF7fI;):Gpm,HWhm:K5-*E<=m!*b=8`,@`8bX.^+MLXhIrG1;=u5[eIsG9Y/0nCLOi%Ep_G-8j'Ifsq5gfV%E#!u1[!l33h=^-Z3jK^0cE5_`gptu,gI5t!mU0pMoiK2PDhdrDdukS2p_8+N#Ofpfc^g'?TDnQ5cG[hFD=aZK\Iq"^k*Af5?XknS%cLTW)im^Pn1cDi6oO2Run>ec3s6C7<rV0M:RsS@#*Lf:'fGn,B%Ld2oq/Vpm\&TsST<,KK4ojS#T<-S<+"QK.B6qj)kP=G!KcejB%qo.(Q_l)569taFQ[9>*(\*NXhLEG.Ar:Z#WoAN?QgAG]VDmca_C7AS2Q_1>%lcXMKm(3'<=tqBhbuGNk:S>CL-`t#9TsD5t:BJSJ%$LP<,XnV5/d)c-f[V24P2aY[@?F=ilHuD3^e*c,XeFHIm[e3@1IfS9\gYBsFfK8@XNQ^H_H*QaR>Mc"H^Z"@!");1\7N9$YI64t<%PhbK2qqYT4rE`68o_[_.I\@Hk2JglggtOG-2u6s!]%,A)XlMs4okS?u=IK[</X4+agJd\K$Rq(h^SYdFQWqRk>*g%/<LZ-BCim=9%mhABXm`E[];I?isk:`;RNB.`Lj4!\oZpoOYgCmr?_FC4P9!d7[CK%jSjblM2?iR8hU=&##W>L!,pRT;e2%$X6]+l@899A4Q`lCG_%G,BUcb?*9c6"LNE[@1Bqo_h-7[8FPU1u8NX%4.F3XgPmX/"NRp>.nu`VAqCsdJ!Dq1Tf%Fi)oU9ZC0M"&*).+.JI*uWR9;O&%seU%]mB?'WDTe_Dln\P67^G\SNK&R]h`Oq])8F*^[7O:p2mt$IU@D)4?lPTZr#2ZkMHbJqW^aJeK<A&;L1C4fP8/B:L^**?0qMhSR$Bi%`X\Y=pU*hTpN>BL\.jp//kj;(F\_\'cFM?)l_eKnVdJ&_rMqM3WR4&34hgNcm646lEi@Z9UBe--a4*T1So-%D.?.ZYBW"Mr2Dp@I%(1Zjj_Y)c6ID1otkip@Wqp\(GYBN0J,W1IJhn#h$k>N1',(mr1-f.T?DXY9W7aLi%Ann)RgPaeqC:$f0kj+g`rbAU41qG_hrr($$%ou'>7XPV5L2$uA^S%Z@8msI]8n?o*@48M('h!!_E_s`N.&$q+PId<4_;5:Y8FSGJ(GjaBV>,,*bk0oq5ac.@Dc*XY)gQbm9cjDYB%om=MH@Bd3sp>o-*k=07ISaGX:=`(j#\[&He\ZSMF2"?%WqqL]Obf]g,bH6"rJ'=KXMFO69g"8pg:-1GBWDR/?AU5`XBXuZBpc*ha%/qf3N.mcPgQcH6VS16A,f'ZFif1hkV?(Ki@O0NnF]m;NSNIL1EI>kCSk%sJacLOJ="e&``<eY2_K"M'N2`+]dM`9@9>b)Id/q#3>%Hb+:,;0qtf)DtUBp@kO`Ck_aIERhL9YE#kbXc(#Nrk%]YcDOr]eEG?+XnCG8Zal7p+o1AW#<M\OD#a?Aiq'Y5fEZ9fHENJ&FD=7J%[>u\uT#(b4kJp16PFM>(8]0oM^,U"Q;TIs+@PbailW#QK8P`\sma8Ka48(KJrLH^(doX8pagH?MNNF4Lg%ps([.A`bpZ"Y'q<=LE%X\d`DS$V!MSi\ldCFa=%.8T\e*\Y(e$].Zm_lpXV8WENKNpUVG_,r=35BYhReZQ>];P&?)5-KA/Z5.d*E,:#6p<."4E?h=RcMUDU%q0\b2oO,B/H[3W$8Ubu1!\<j1p<D/nb4CPKcXqOO89t(0Vn):rpQD.TIQM^JC("9*JRdSLY6*tVY'op)>jB4[VmQnBH$nJNVK&\d%EEMUe+4ZQjs4"d]Rej]ZT(o\bjjX2(o[r,;daM64q;tVLA?L?LT#TsTmcVU0ma7qlB7/F0KNd\#cg@uU;k&V>hgR+Nc^$bRrLg&o%*/!Ft1UCk(AntiBQ.ME7YJH7fQ'BdU^GG\T[$S5mj1#_<c.o+sRC]^AS)&FpO3MU7Hl8D<rsnqKS,:NAdoS>Dq!ApmT9Z[8]c420%/tQ=N[^+\9!btK^W4fFs`<5R?$FZ]GDm\2k?..%06*h5_O3>!g@,[)`_00HGW]+/B`mjSLK%TE`2Us*uA\pk.s7)L941CD$:[5Np%2J^QBV`-YCrP"BIW)h_nN`$d<-=E24@_TS`RuK7Nq)tM#m4g]9dI$>PA^IB4eqMPR[kmQpH+TB%DE"9urh_SgSPH3OrNpaB1j]2i%h*fmD[.:qNFr3+V@k^O0CN?3$j^ib5j4+Ad1+T-EdbZ.D;:nU[hVgApd9::[BT6qG9<!=cM^5]-Zq&EifK105b19"gYIj74UT2Xm%X[14\2_bl!Dtgfb*DP$nF$HM^psJY7NcM82S#;FD/[3QP[f#Z82)]TNpAFR<7^INadLY4bB`IH4@jG]>)8CTA!^&Z6(E]]Hik?T9%&FM'Nq%Im7*PV^L3-A45FOs8GJC(.Tb3S]ukIB+LRbq6F<So@da$e:iCs:-M]KJO+eYYOBn[j[49L]Vo]p4kbP4AXB0snED,>0J5%r9fUs,.\`g/q@L"UKo@s#7<h/UEM$I$@8p:[rQ9P-k')M^3t/55MtGBoeoJ1d<nM5WZ<<67ag;V`6pbr0L+5t6WcZPJ\nW-RpFp$%lcjPJ3)TG2$2n)Yp\'gI="(%2UlX6KB$ps>j(GNdIm3'RIe*e2?>r,^1=k8KT_A>#2RDt8htH:BoVF3QAKX'1(\U0ELU`,`dXFsi%\]?:(Tj.a@;^JKDf-[D=qVll@h\SXO*h)]0m;0KQZBuA*4dYanERhC<?$TEh#^RRm4bZe[dJ1GPDgcD>#:Rf,#&`nC'1Q-aXPCBN%l=A=1\pYVaY#M<7([neO#JHJ"[aSmN9PW2'anL/ZI<@-QMD;08-[N,q*RCE96F;(+jt,ka.V"TIc+KfX-*,G:q:FgcdA'&X)J8;]%ZQ.@H_).+l\Q1pI^Pgh2l7f>V?iM:X"TIJu)"Vf_qJ4e7r@&;HGt!nZ16>MY=#l?gUOlVbn\MB`)U8&iX,ZTJaYE7iB,sQaXVqmG%)9_iXH2\@bV8":6`N;.l1n85.70aMkKGGg\G(OP[`Xh]@fi\1&S6M$$7?Y=U-\X>9O0S6*s-VT`q2OVA.kEk0OgCjK-groN,Z+B>%Q)SQjWh+(7a,['t.19'-RkZ+FpY/QIW[pes;P3"HjLt5)4XJF&+T?O8Rp"CY`L\@Niu)WD85B_Z%bge;O[dcfR/;/!0\)s49(qCa%.b!O@N*n<&0)t^SJu-VSOus/Yql/:M2I2#7?=^bC*EdJQcGU#lR`tN`aj@%,!QUq'G"@W^2-SlW':pd!BZA'2j[+(L\q<pmX+0Fp%Um:lU85ElpLZVDAg13A?Y`ig.(J7s;G-\6S'AnWW0e4>hN,NVRH[T^pq)#R-,Wi''O>gVrhEQ5TDu5&D_RAgjcM$dL?8k2C?WPmS%;Fm913JJtuM\dUk/Ytj5H>.pmKZ%`NJU#UYg.Ocn*Z6N.RD^Cdj5S)DDbnYKRXpAY&ju5"M%7X'<7gj9AuEBJ;OeZ;I)<MOL\aQ0%+Ku:o:F2u:lAMSA'gNmOb*;e:4!Fh.rHm/bIQt5iX%T&pZ<:MTan3hQBIi07B1+:re^nG]C]DgQ,?-??0,8[5Y:nSCcEob1mp5=Y%5(8ne4q#%oE3kaPMPk?=`%D@aAIlVY=&ii0=RO*S39i6sj'.OLGAlrua7od5o8mMY'#786bbc`;IdcihR$12,.-S&fcJarb(u"FV%P5BHe!/g$RmL@\Dac"NdY%;kYpVuepXknO';CJC:,k?-Bj'*!8?(m%?cCFP,=EtdJaqeaRVU^_<,gBZuge%+h6mZ!`Rh8F`e<Iu"%A1_Ogn&8#c..[hC*6,?&K;D?W"7f4@@n]\pR8bh435W;Z^$%4b7e^A?/VHch7PJ3CibRHPEk_0[N1TTcje1IDF7lVFk3,Vb>LN7T%Mr$]+i,oQ6M61uS0dbXX=Qj)V;J]LsNn`GP'\K^-O%#DHRH_7qr!)fYi\Z#=A^@rd,_H^NqKr@8mgHBaGFaWRoiE<B`B<aGALuTn%MTE/5F`N3.f\5)AZ:^mXZ/d?HI(f&<2j/Sc':t$oStTd>@C_EqlkQ)H&"Yu:4_;C#J1Q"5f[h;c3?P%3q=GuIV*rt7:)N173O[iS%m!(g"dggfSchPqILl9S>=fId\Ki6@u4O@cJ#o`34IuTcV+b@0Y!fbc[MP!r4\)7p]V'#QT[5-nO&gB,d\!/AH75u;0G4(tKBs[p'%r`T7>/]i3&G_Xg`B;7J6,s4,c7qZU@]lUVQi_rD@C`PqKm(J^rK8pol-JKr"D(/#DJdq4lCb2M8Dr=!CR&c/:e;\SL,C(-O,UFCS%i;6HZJ?0h=963<tc!J-X+8lbCbWi$)=G>2M"q$))biR;-4n6H"\\>"n^.:@RLHlE:6qac]jLlq4oU1nXOschJ&@+L5IT^IF]^T2p%=2Q]/f_5t$^&CB7iG^kBggTkX^]H[MHSkq:H+&d5CLLad!Q^#h\PusilBB,h@UJtUBdKok?\YiS,?Vlf37KGO--<ks_GVfT`04so%b[([RL8g.S(rNG0Z*b-1_WShE:peXcq_Cu-'));KBe9bF8i:iC%)YWD"b<cEWS>f+.qr$rHRs-Bd)2U%@HgCT%*3H`a;gKuTX&oi%'f'oKP[cAC]HbPP13H*/O`R+,SY!\t5lXs`kt?o"mi>.>-Rj>(Z6\V#?Eo3`S?OPMVCkN@roDR_l*d.f8P=nF9Af2F`ae8^=IEZ>%_+oC<i[K4mPW.[*!iZ+:QPO.;qDu;UA=_LBgll5nr5iY#"4<6!8WJJ]Ag0l&0e2;(N8Rp%#`MRp19m4!W%>Ds`oIJ-ADmUt%0d:L%:M<OP2p:j8UcUL7lh;i?`pJg=GRHH%)0CS\BQE=B1[)D*L'GkqbKcd@h<XPjFP.OR=kSE*jNqINcpb8E#LB*ecCc\P7[$3+SO"(8%(*#;h/j"]g:`<%<?$6Dm7<a\5LG$1YANu.sLFtZ@:A)I5P=(\-5pu$(hDo]*JE6>2Ze$I<4#7()4VMMr:L>BDH$YP/[<`!o0AfOf%aHof+^*+_:O5KVd#gMi&"[3t$'2+pG`cjP1*bj1AT=V@F\g,I3F!cOaj`$q^chK8Wbn&VpZ=&#lcK4M%\^u5Nc1KXs:2c<D1EUtR%_(nRH:74K<BV.k;q/jmC]J?T6Ys&%3;"YD-_K.pn)!(SFB[5a"Fu1qAW5#KHRdNJk:![@ZBI%,<N^:4i%-oX6a_o5@2Xt'NcXaM9%6:%@"&f?gPY,cG7HYu1^<KPJ@l[GJIU*3XCBAK/;T%I"PHh)j6a.,2k2L^c/ih1+6$^#WMFq&+B29E5/'N:.7QT'W'pYNWQFI'&]%@r^+'Do^gA\!uH-4"5_oYS4&b00QR).1;)D'iOY=Xub7u6pGsEfrm$L*G9T2SJkq<`a"3mX7XoKQ-S[8'Tt4Fkp-d%&=":=*t2GX%nae,T`PD51a7kbqY(;Eno([On`2!c.,_oGD4+/!+A;)BQl'X"!+H*BP6ZVP)a0)6lNhmhOo\E*4d0A]7eFDk5\cSE`/+&]e2W+f!%@Ad`>UR:>GI`m[t\[](=6P(`;eBGtZ3e-dhh4<*<*1N<^T$:T.CH#b0Qh$.BA)hV-h(U62%4cGMU@)@*O\XklROU8S#^)buV!iTW%;qu]FrSHm35@TS.I4@%;pF>fE8!`8BPPrXfi,'k;lq$/@qmIKP,BnKG`H&spB!.3=oQf]AD:,akP*T!XJm<oY8^E2b)M*J+0d*H[%f52,PA#Xk@9]qtLfkGV.KcWYDj\u'k-Ro0Q__.8]oZE+c,q5.@N9P/,H"8[$1Ab:pZ81e;H";4iVrpU.b9/85mZ(<G@lrh80dlqO%*dbI\*gp#VDg_=.[?!=11;Oi8O);f+a'h(cdCTVT]rBu&QJdl3UHA%EU%Rl:8]V\>rsTegXH$:^7d=CWH2Vtu;Z-I6QsPpK3KnN7%2bktsc5.e3p=>LB^@Z-@GMIEaA,17c'KM#NB6na>5b<r>Hf=Zfj4'd*,t6*K=6)JXBZi41#Kas9Qe/oUTaO$4a't_MC"\*Oo'6(0%APA%Zh9-b@Q^q1oY&Tkt_S$%>.(Lu/,uprjk6ogmQ7&P=@I!o_cAp!*Ks&eorLTe*LZ<WH*cCMAoAKn!s&f<sE61u(UX"W6.RH":%5$X-SeIgo\O\QsD#562p97.stC4+s4q/Gk;.!b_Lg3gD`pPpH'&a.'nGY>gXo&5gQ;+(1LS.Csj(J?d>5u5Xr#B[4uZ"g]Ijc51V%]j`tW[`fBufbGeff\A\15.r#&:sMVQSp7ObK6*[S,+dHL\K>PfH]7G&Rq'cH](aIk1%;k6g0(:?/0=72k'lGL9K:24'Xm?rSB)ra%DZ<;RoGU:je5<+t]Kn35SYsf('KqaC%C`Jn#=p5%=l[<d&PU*cf9*]TR.+W\_gK't_DB+e<3a4a*:dAoN$nQd4o&quWF=A6/Gb6l%?>i20;0BRS&UQJRo3ifDV^\1ETiNpH^Pj?]p%lu?1K"8,kV?&>s,8'F<?J\?Oc`fd5FBd:OtS$pn-l-PQ$fiAD\_M.:#blGhi-(_%YCT```6!"I1dNm'RbD\A&\_+TBmRL/)D4bY(l3Qg/WgC,WlISt$A\=Wc\S0+-O31r9,j5FVSWf(\'1BMfAF;_cr@O-4,@cXs%"VE%U/tdaWGlSNZ(1\I=?lDUK%Tsa1D6=S!>>@E&O()n?&n9*C7&reh8e4;*mES.7V'm_OUkm<gpWt2)=Hs4+e"Bs.50gE_T<'h^b!5Q%+._+XNo]=>8NA(`nW"qI&&JG@M/SAH'PD.Vd05s+c`<]+k1Anol.TTZ@t1QPIJILNoB)6C-ri/@5CV:UW.-qc>b*tT]\NE>kJ4Ro%@jj?;WErh2mu=<3nP-Fuaka#mPKso*h%!N:>V&S$Tp%m4lo&j4H*"T\+t6nM99lR$Zt-Y(e>tI=R8;/MYbQ!A;]9d*n5AXlBut6U%1@/>loLA@SmF4Vq;XK7H>ca?,L0Z@`mFX=]7\_D?FObK[BKXrW0?@t*A_:-A)&[VXeQOu@;6@G(iAdZ2]T97,*H(jI96Rqh8p6\G%dMq$A2"<G>[-Koida@)@/ZmEa%/(b1SYn@QH>IB_X;W,08Ub*!r$H<fH^e;IbZ2riBX)S??fEB>+1"W+3AA`12*5%$dKt?9[,QgR%\4`8_=AUMN1&!guDW;K`Ygo>%Se5i%#]RqQg9VcGX2Zi[IV$8d]IW+oSZ#/AGgbq<O'q]CZCBp<mZC.iVohgpan=nPl[%gK^tFgo%6:pM5*q<oK?fiYT4lZ<-FGX7;s&/95b8IA8PGFdo%HM,IN_mm>]@7&"5;)t`C%cj[IT![k^'j.NH$]A6VAn"qdpG"=dQSfG_Mp%7%/h*,>q>E"bACDk#";Bq@OP+_I\TC2L55&uTSJl3,E&M!\/b.W]&S9E;U$DH.OM8'cOuE"/<oe_8l&s>+PdPO"flTfrFKq$l&S0?:%q,sH\Kc<H=?';BSgqA^tRkE_a=!Pqd9?O)h`f?''RkAF&VU6K"2I-qenM_BtT1tY/IYC[,k%Til\tnjhN.r6#S$!]1cT?gcaJMV>%/Ou4'f,)I3cDKnsL$qnYFZ/'K*:#8I/np)@(jS#F&d$4X*bdN<&q\!AZg!WJ9=eTjLX)bib,($b?AHk(91g:aSrAUPRk?.V0##%.%T1tZjN6#j=,KZh+Oi]J4Cq?EI\r?O]L>N!6:2dRS!uSXWm%K2kOY]:>/B7F;]/fF.53:?2CgE"r^:GSQ19HIcm]4O<0(SP3kKUFI%+UtpqcP,3\@9DS(J^$rWTTGW8S4lm@8\%edY1r(7P,BRg34`TY7m;?-4s^A1A8.D>51T8MhFJtpF@VR7pAFhC\g/PS=_E!APZ9:5%U:WU0erm5IMn\@(T1Ro>20\:'k$sGCiOmdtARoiC9;Kc(:@RWFA9$#QO<+2m"rnR?\L#9RGBl<.+8`h@-e4uZERA'`>bt'D20UhM%Xe.T2<3MCoH8[^EeE=R&F7m+'Z94&qV,+Xb?[IPV6._F"LX,",h9-Ok!V.,HN[?.%osh/t[s[V#GlA:#de/Rt/`b&.9Fp.(S!A_e%ECLR/[[6:UMbA)^)n&:-G39MZ5Gp,UamXsV47C"-[IO;6.`A*U:.H*0FZRZYW7.9a:d"lLO.Z#=^)i]'1IE7<&=1htJJUrWi>HIR%MsQT4c`f3eYf(X->,H9-a=]g140^^(#53:ND=EElA`hd_>L$QOo=l"OO]=Gj=a90h59_n(7><=.="5_Mf4STpb]2NUL(T!fg.XV\%)IW).RX4>=;e)cPqD-k_DTWpO%>MAnN\"]3]U>50d*LKc5NTIiW-@Caqq5E&M+[MHM?c2E-9V7gF/I`&eb+gZ6$j?]-aD!UG[_=3%4-?5_'4/&ZB"JZnVZ-539Z]:(LUuFsbca^Sj)1N(fQG*fi:g:HF2M:<2,8ANN?[t6F)FB)jn5!)\SoV08R><K*Hur+.e2'G?$T"e%/t2/(L:\N$^!:j!Y^52GQhRWE(o/pM`%DY)OhQ1eT3,;:^Zgjg>KEF=>8t=OF;a/lKLR^=8!$i"r?j&+^#/Qh0qNj-=\8(<!'DJs%X@4Zqcma;pef.E]Hf<K$)WdNOWG,%5qT<_PR*i+b;pc[C$OP;O@VENBEpm6/Me+)E5`R+eRoX@/'j\e)VD34)K]Uss/)uf(EPE>O%(e^9^(V/>NH'4P4>-Yd<i;6,?oZWfC'\k.mXginVkNRl70>il-;Tj@7QuX(!Q1@8c0Z7!AjW82/:;cQVeM*f/Mgf_P2_KQU^8W:G%Sb;o8p=,&**o!F%-T92Rp`5=r3fjqRU2t>d)l>-7UZ^T&k1tX,?h\g"VBmlseoPbhG+&/\WE@_m<fUrTHaUiXbsG<T1<ln,Bsh"7%&uXrA??In/V9Q3obKlYb[p!S543m#MQ&Y??V6[A9LLH^NYB&SN259.<mo&Kn[^4T*<Dl"cTnLO%<uDh1I9J[474FB12u!=>-nPbO%r\[pV0\03GE\q2T4nl-C?G0]>D,dQbhY<>bBVEB=Yc1c7nOA"=?$!L5.ud$)`*2Q)\[LM0LgP7:?2WE+T9B(15+S.2ep@4e-RRdQ%a,%PRhENN7cGe6$@^kYlH[:sBq=e\nI'E.r^ZO_*WK"XHYQ)10CUB\_W4_lL48a2_b$])Pn7k%];/[h&H""A5:Xl>K,#?S8'ElcA%ObC9p2>YGVhPZYQZ.?5Jlht'*XdNZO-^Ml&-c,#2'=[hhkdpX?dndWB[+])F:!W:`j^P]d]kcbi+3RiWY;W0=$:YL98U="WT=cFh%#"/YmI>,P6,rVG<)c:;!eRiQ(<R_8C_io1)'b<UR0m#uGZWqA@(L!)d!#C(UjPX0T]co:%*,I6QC;tpJd+Fr7IR5r>OVAPTK_^e#%l1q*]aIeuf$CL6/mW6*Q`+c>.4l*BJ;0>lVFramrc7AX#->.A\;chkcnfD.MpgE@"E?faEg_PqLLpE/WDiN\>#J,(A]RT;Fed1-e%#\0HJADQEqXU"JLa(%WK7e%*pbQ5qW0@k3rK#lB8[.="4@R26J7PgVn>8uJGmW2\DF)/FJC6+n&*LtRr>YU3Gj3rZDf@NHYFccU.%X!F#PE@gEZ)1"),,_0:7pKJHnp.4IDr-g_;EU5?@bj4o81F75hg%Y8g%`6W\43+@fnJ:Z78s6dW?`'.TWUDjg@?%<5Fi>d=OU;rU%pPGl>Z1hM"VZI>cIZZaNWTE`*OU8pN3O\>dKkrIK?.&#m$tMLSs6YSO4n&-ehaq=B*&C+,0e3uA=1W@[FVrDj6*^L^joECG\d(b;%bH^`)Dq.BGd51/L<t6@5rnpq0naT8q!E:7B#KQtjcJdtJ(E5%90IA9K43[+PfX)5/k!hMrfUuAtOWhif!URt68nH$s2sMi=j8lOd%dn,Gn8n-tK9M\`n@b+K8Qh'fl,MU##njRK?qPPt-9CaQkr_gJe2mSG&;Eiq^:Q:*)WL*2'8Rd0.i!jWS?]l4CoU#,[hN'e)9DS/8%?TH'$HkEO`'")X`V\!umQ7FgPj]9,n]Gh4Hoc$ILf>ueX2;GlodB:G%Rg+\W9t](2gFJMM@l;WHIPIg\h<Hr_]:n6YqIP#-;Kq,K%hWpL`6K2%\[!+n1H`pd/8KR_7^[0#Q`H*od]m_ss\OLPA+(oVj\T<DrA]T5sZFe\9J)t)4qISRL2p`!V$2=:-G:5I<[JtUP&r.q5%Xl]`@l^&W3QLZZl.!P6Z+/L;+.9>>&p\JGSFEGY]Jp[I%DtWGf%90>$qIOSf;kfr^^=P"eC+?mHDs7)n7Zd55s'EHV/2[2J\CWD2%5XgOn*pR(Hm)7S1N7<FHoh.JFOgk2+DJ'g]?GGn^3;$<:)5f<1HA]5a03ahZ@VaSgp\H2-df_!#muiF?f.T5D3gu0lpq;-=r2m,+%rOUj,2;l/sfaO*(Z42/a?fkTT6V/?<]meY4_gU=\2oJo_UA+0eTD+FpX'bn[*6IsOAKMM^8)*`]Y@"^acT1I3hs6VWX5@TrdX&lF%'M>.2f.[$63?CUCke2Gu\,$PR+($*U)Hlh)%K/&Qi)[UTgrJ#f0:h.j%GgdTolCjT9Z%9_Y?tA:7H@La+Cf*+Hi4$99"`\mOK>hg%c(%`NlgnGt/2QJc&+'$\Ej+@Knm6\#l^'9nFkD'>!\?A#7N^u'^]%]F'(5E34;g>meLtr-Z?iP#GKs.<XaV.+3U?!;^D&gXb^cir%CqtDrZ3-Z/HqFLtl^*nYBD(7drg]m_l$TgXk^3:)gK+l2Y?s\;Fku=A9_>!(Y@"_+'QQ6[Hen"SD&<I)M*p.cQ^n[,Y/nN:l^*%#%?\1F!d(Om27M+<.UU\o/Y73;C]me@kN8NoeR9eRf]meXm6]WeDh"UYV0+Pis_P>7ofCH.aAWY.%6?g@<m(H<ZV#RgClb;B4V,PUf%l'rc=+&,sukqQuQ,^Oe./i)glT2h3o.H]PT&5!Ut.8ZW$m#FRI@7Jo%o[V1?fYZXt6.t&f-Y9"MG,o2]f>hJF>+ZQH8k\Ws0*h3^%mEDtfm4L<SC/[3:c_"LVRf#31[bI2f>HaVLNaI6ZQ6oDB9Pg#d?;C6mlG$XA$74kWs3H]%FMIj[p@RD7f3\F*pCFHOrg]VGYBrK0%IslWZS8Bo#]UdqrcV36O<9@eA?eW8USr`'ks*UC7]%1S\:8b!n/TYrK]NK/*QF+b@mq9B&hjr*hEsL/EIjUf^EUK0"2I!<6V;ni6%DqbM,`l:kcmer]aVH(%S's7?.93'`<BHCpC7u+i_XiJtGf%[BnWV4j>i@T5#9Oq>0r7RNCp("9F8B*(F:"q^QDd)O`NtXK'O6VQ/%8W4&=Q`d\WRpW5^qpjg$jh(!h8A7T5C?*W31:%n1Fo(E?'("]1g5C#3p>p73/uc&0e$gF\ak:m7MrRCtI:K$oI(K8rlGr/WZK8h_%E9;c5:`-(qXT`qKh/<j_\S?K(]"9ZIHMdu1N!Z"%Yd>CXU@Y@Y:7iW)7`;cnk(N65DM2:'=!*\<X6rpf"K,s9>@0;fS?FMfAiJn#%lZR8XbLfr"fYPV9T4ac,f6<`,LNC2C]NXtU:[Taj5#1H@:Q:@W\LjE(FK2XPrFHn^:![\%Qenak41i-$f(Z!OKi7$;[]&6E]PQCe%rUI;7Ml-a=B'4VL>HId+^bpQR,9do-2Ct6=bpRT*CqNGTV/DomU<Se.BNm:b'0*GOKV(nYoTS.cFRfY:CP6=-0\5FORlU<'_iO*-%bgi<YoD@7ZgACiR(=9am&j!50r!4@fWXgSUgY`*%%P*Uco_[QD=afeDr%iSj.1[1@GCR^>LGRFYI=$IV(;T(2E1t4h\%e9uJk$1U%T'b,U%:P0(8[&^_9NZVlGFX'`Ii=:Cp3S7(rFq:MgqN(KQB"`Kb5*k"_D7,F_gEqTTf]0(GWoj6g3ER6kD4Qo[!,l\FP<U*MjMu)%`IlVe':sZEVl.OnZP9Y*F'5rGbtNGPd5W^pc20<SfA:<+PH%0rFA1P"`cePj>pl:NN$0d3#-FbqeJBUe+6Ll*\"&^>lYt\YG!F5u%Ymk4*lfjdujNB&`rOKJr?JkYNj[U_4`m!39P@VOsq/GPVc(/FQ$,<^7)k12YFe/T&G=OQ>"%h?cS/DD)G4hE']s0Fn]+NqZ#9-Om%N8j!c)IiVJVJI"-V?*02WdF>\,&mRL\Hq9aX.d\'n`0THn)0<c[rm/)K719>qXRWlF)`L+Z?2F?98^RmoKfEpK$sk%Ek2sFD1-qQ%+$QhZ[U3*-lYO;cNfOef:@,]$+o@YucC5tZ'P=;]TJo)uQC*kicMrFkQnRKe:W(NE2EkCT\pH"QW,6sOY4\S038pbsbIXQ/IVSE;%gEc3breSr,>sl`iBZ#3$9B*V'e"V<XIUHaco5*Y@d2<%TkZUMgnA.1MI=CJ5,&3,U<MfI2oJ,gZ"XJR"U3;+-PmZcfBajBVg1ZG[%<;$(UDI(XS/+34.ji>jH4kQd<)l/F4Xk[6O_8/.)bEd]@*Xdn?I5^K/pc][k,+06>lG5e)4"Q:EcQs19j4h''55)d*MsZMf9'<bH%e#dt*/hGmKbUSdL%sttTU;BC]o<"kW.g_)O"?;JkI[&h?hJSDSJ5,"9Z%;T9X79%i6jYc[I#7;!53\`*FV`0%8))4u4B>>3c"\5P%\U,'c3/o9!o>CeMF'haUVi7&,%2[VdcnM-b+#I4GB*>U8B3)g>`oh<&m6CgB,Fi[98_[`H%o&#9[4ejDZ7aKP6-Xo7Uj#5FDG>jW%7B^;4?FUQW4kUnn#$BpP&.'At#FEiFs64K-0#j?<>N1VIXk(K<qI'k?W6skaacgKO?#)P$g'<c#8fW0s$a%,tX*sY9)LQX0[Qb@%%'Ch-'\fNY9c('^)K]@huK!e-C#cN$+-^QOq2VY,1$a/aNl@91Z=%<9)@P@5<O"hf7"m4O:l"Rtcg?MQ%/8;(8QiPA\VCrHO$5:![%3D&p'B(c9Am!L=Es#qYCJ-?l_6BW>XbNW/ch4l@6"QN3X=`AS,O<t32_B'A4)\8R(74An(,)]S0f]Gst_:LIR5m&fVAQITH4kP^\%inGPrdXZ80kshA(j?VNT2D-Tu65`+Mp"Kr$)X)s2kWSBTIm/ff,tTD'/3f#+[MfcjGP9fmm,Vk\0)ImG,#G+V0F]fYb%28U*f4:N%e[-fmW@1^aiiEQb12/`0gg=?5HBBUf95tZ'>Rht1(^Jg)>fKTn;OPZ4kY('4(WrS_Z[$j9]T;5%>&GZ$5'h?M;!qOm`b'85=@TK+%;Dhf\`\LDeaB0KDB,R0FASeRg5Ei5FUl8l[:h4C(krPT^fRVdKPHjGPN+GkK@mqH.g:[D1&/ag';$=5Q'mU?cb_B#`9gc-/G>jX(%qsr/H?',A[n[!M:1/M2^,0(GMm%>jaD>WV5l\iWZ]R4Eb:G3[Umu09`J^%6fpVLQD]t'7e\`7:Eb;f"Rn@a&Br56DZDen#:o/'dN%\fbk9*DN"U0Ci__?FuU@?3Rok!:&pTis?r'E(d_t-[m[BUJ88)+F``_!X3CK4*&*JWs.@?Dq[sgisRVDg_kE7..Pkfl+tO5>ZaM"%9idSAK??OU^tAF.[ONBc/qsn\anH>3o"gHk[.7M8pMYD(2CSQ1D0``KY<5WbhVKiZ37!2&\0g\'%*\;"Dt)[QVk<,:g"769o'on>%qh>/#!*1DT,"c?nK.LX,!I3\N-\j8f3EegZT8*XM9Z#+369EACZZpk/#!Oi%;HoRa0L<tkBV5d'`ln=B0gB2!5@EE?Y7$hX[1D_l%*aY_hWZS[Nhob`sn"mKH5'7%&)#HM1+loIT1`kn5+Y5Dk]hcAO?!Wr"J)8to?QKknim<;c?-;GF6ZIS"1i=Y9j/chrSZJfbFF-FT%N-VZk^-,[7,(=m4l*pQ%1H7"r=1WAHgjV1_r*@tK/`,&Pq<d#_'Jtb&2bjY=!hE*&c\k4hpZY;6hnJCW27LTTlMaE6[=5\GPt0`P%bT$9FrAaRNU:u`\.hm`*D^sKt<>^j:.bcaJ3Jf!M9kA[KTTtZ7VQr?`'KOsl2t_Z$$EiRFA\7/oSe$;d:Ym#_ektc'iUNa(?[,p[%>i4*)Z^:Q$[8jD[Y5c,?ft;ZYY.o(99?"mCe&q*]B5cAiReQJ!]e78&i<F@6:.Vp7BW5X=&Pq#*>dlXMJ,7nq3tj!b[EY>tjbi%&%UK)!Igf_Yg4kQ-]c)j*V(n3P`lAs3iHA"dQI[8%:hNgpWjps(&`tl#a"':K#;f_FNQlFCXkH"4Pou"Y-C=E,jCA4uS+'d5pQ>bC<%?OoB(mJ6,aDs,$)Ejb_n3o=[XJ(<b*X)p0fo<8$BGMc1ZZK)M?I]J(cKHC'*(n3bi^'2H)\JUfBW/Y<e52sW[Z%[>l(jc/Kqq0,&%@qBK8jjWnTgg/UR-+"@b7U!L3k0[E@[<^i#Uc/$rc#[o?q3$0iGRdJPH9m@+0WW.1g^0kAc8<4O'#R7RFds34T0A:LS=Or94TDLI%;9X4+5t,@BWm\Lg9e2._rUf`FI'>H.XFtgT-6K<T/';%OqF<`LQB_^4hS-28#Q)YA*1K'tL8cbCYKa$SVqUif2-at3!s?k7dqnJG%%Cpn_U!B&>/(aK_5ms*\YE(2T[+5P3ID!0'3rRrJ`DekS0CscT[=$AVT-kPW"<B\on`L(NL&(;VArJH#=e:aG9Y3-EF6_2&GuPQ]%ONbJCJ"QO>q;kS:2B(G*VhcT-/Y8=bZ?Y;,Gf5)WZC$<K:`:>6RAS3NZfS%+qUrLT5:XG'^";r'lRuUi7GYJBr=5"7VabkHO2953%)2QlTFaS-%kEUab/V`#D19[*Mf:+SoXYtXRlR9"8PZA-=jk7XTEsI-eQQSmBG3PJ5g=lk%(J-NbT$GJl.dJd'*]`j.!;H=HIoB%?%Vja<\NbH@b$g3-gNI\4\B76IJ-t*lgpHRR?=d!N3.9k&IL-\6A=#6L3Vbrq47(ml)\n5SkIV/7oJsr*dWu74Jd'(+7@!B^94#&6u%r9:71<;V<Fng1H;f!Mm<R7>G?duiHTjjI<-K*M(?0Y!2$4f\e]AWop!NN'=jDdr?9_p$TlJd,lXnY/tE\G+&>V)^SN!FpB?@oDq@%#fttr>i3L*4ua4a"5)e:L(SJA9QNerSle\LcZJNshI<uM7niN&9s\d40M6[f<tD)cr]%8;doq#V)tX]DQ0WQI,JYF7(g@5YL=;OQ%OU+.E<C1V8XEYS''8afh#ar(AV_mG!p$pt)jufrs6Z%\,)&:-gj&QT->\.qu90&-'p+O\CH.;Wab3HDtO(ut[cD(`Cp3<uK$;kL0%EI0Epio8sB4[ANsXTU&7kYfn6NSi=[qZZTIq^W\3]K)#b"S:WQCkBO8G[>"G\+YeQl_5)ERneY.JZH/=4g(5g)g"Uj6&@OK0,rk9%#Tc*U90!BSKDX`9TL(*R6-.41r(H`L8G4bDD4)$MUj;nREs`;X>3;qt!?KJm()0@sQ*9r>,nnE/&LPjt]s80eAg\</XB,<We[(q5%bndR7NdQ/D$7;>Jp#EJV4MY(CE?LQi-9*f`E"S0$jKW/nPVQ+[`),M[&AQk0[XSug"ER0+J]9#)N0p"TOG<6NET2G=+hCNGS^sV4%o5nJ^(`GA*8K1^/oP=ZiJ344Yr(N.(SMdn>B+(PE;%0X:k3#Z>jHYOH(+I))<"oo_i[Dr0L6E+l8LJ^&Rj3faKF/<E+pAr*%#(:*%Q/Tr[\K==M8/0?;35+&+gO#2V\]*7+*8V$B*4sWC-o[Jc`j0ouQq-HV8sq(CL6V;KZ6Ee2c1o95!YWRV(CG$3DCA\d:`?DS7UJ!n%:lbkhZhJ:jZ'Go.>>I)_<bsRD^kccsE(/'q#pVs-9UpjiMJN\O<(8l>,.^h9XO/`m(cP%652hB8BR/\p7K[N)@/I^iB)aZ(Z_G:g%]R,Wn@uiYfRp1`)@uiYf>Pe2jiRjn8`l@M[mVqMi#@irmmL$uUFYL8n>K4Obo*&XI]l[0%F>OIhDg6JDN/8_1Ki/b@rQg1*A)Oa'%_Z&^bY\EaEWi'<O6ElGt2i#-toMu_+6%;nuXeMVLJ&kt3HE1_-q1nlJF+LfXoiOt=<Vuft']'WuG_gIJol@5W+;IKpJ=P1PDm*9Y%^=fGL4ML16riW^;HBJ6Vi'7-]rM"1S7DlRmLQ0[ZgVPe4/a>.2IFsA2/?ZHCRu_caa6$$solkB^5o0e'B=jYPV';8>J[4a&dm/n9%"/Xu(%%^YY!/3?8Xgel@?i19qNXD4gqPg+o1>pR;nDba@q$j!H's6I]n`lTE]Z42'<9(OIkQVYiIs'3n)`IW@jOXU$g+W@Tr./d`%mt_nWD*OtWAK'S(Ic4Ae9AtS=.QbENpsaHaK`<XM"q#M)/,QbV1bH'#(bX`7M!8RSjSM3#l]ti"-\-!L(BirVVMC6pW90<r+6a))%fk&M&HkhcL2E\k_>,r>KUq6gHZHAU@1c>X%g'3+M8&KXJ=k=WGA/L>%&ArTQL3QO^.52cL-Q'5K;(9[$V+fe@)<*\^`j.1%e?_"u%Jus<'cdkN6gUE.j`79"&8=)#70Ddd?QL4f3FpMdn7+\\"!4#<c"WbS>>1n+>Ug:=n4#d?C0ar;[W6MX0Qp/>[%0iRn0[hhfS8VLN%eMJl6,M\UD`#tZ6Eq]X&;:[m3'QOT`=H9HedfTW2jnb^;kD3;"L^K;^lCJ".-?mBcW;cpNK_rOub6VMcK)(/`.lBKRQ0\8iEWC?U%ks[!cQu=a+b<ph)Lo=o&\tMH`^X*'c9n4dV5;$K9$HE2*3ee5e[mJUR=)a[!TtrE-10+D&%9jiHkaUa\_2'<D@($nQ<%K:c8l$Z=%'/Bb'e+$Bt"GgP*;/$3$'QOt'\*VL],/gnri#;`YWJfa-b*j_g3&XMSR,tKjG]_F8#k;^;6':9fe/UP.4/3\r23RBC0^Q4M5S"P<%bb\qU#(1AH$`g9Mf.>?gc*DThFPe=!jllj+dXWMI(rZ>/:k0.P)(%^U?jf:p*Z1ZRl'a-fl'?6Bbh#]'Hk6aB9Bin(&DMq7&B+<7%,6?#174A>'0+K,?/6D"T%dMDq^ooabLdB?1`,S2'KN@j?Z=\GY#XQ%DTp4&)^2$4miA?WP'&*N"!9RIR)q*7ZQu8<s';h<q\3/R]%S1n6'\@*aZVs1pg_)3O./XL0j%9![pNClKj32T.p07\U93&]9%6t*O'M4,b$.uGo-@\P#B`0M[bofY`J,O$OK(_Ta(p6dYH_5L57%hGK=kbOZFY"c2,pepnW!6#7P15\a<e+j;f@DF6#a;<H0n:sbZm0k8-?,1j51:mKQa)#CJ$'TW5m+@P2R(W`&@MWII:/Z)LVD)!IJ%bn@@LEEfTbI'IeE$T+1Y_0!`ZC1:)X^]6`r&BD+[X9'6;%Fd*\mP^$"P6M\C)c7H]J.O_'9Edaf0c6'SK__J^HQ/4e5f?KlcE\8g%X,@gA(GKhlchAu%n3*uaCe$2&1`0\;RN38nJ2sdZLiW!iS>Sj]+4(C8$\ll[2:ke4hm:J>DaamQ@#cSp-n(q&NiQW@'jYmUK5V*n%V$oQ'I*EK+Z!>.VaLQt&J,l1]Hnde)'a0o8,:B#$"IOqI:.c6f;n#X1@<.5aU+fUNK\_j764sHB_%8$<,f'8u+J5Me6?G^KNP<]g%JA$hX]&O:t^9)-a?m9)IS`VWl?mUj`Ber``JWc<M<g7\[&:nR*"tNNb_2p-=3Z.XrPSB,hPE[1Y8I(EU-ts3/<S8O"Lm;lc>ad>.%NCukP+bhYHh9h(&@%_$!SDa3tHoL,6P7X^h_c\E(j$plec-*O'*$[1lH&f6(=bR1Xg+O9]e2E!Y9s=i<*6VgU[?,eBEBTk.\sCSP%+2uX7^reT-:gi#X>pfA914cb;!V=Yb#Zrh`imQ%i?k/qXJfrYgr='lD-ON[8%E8n3d%Pb<M&\d2,7JR.K4dC%'hj/FM1ruh@@89p%.<[hfW!0d93QZ+n&:Fd7C0uNL#\Nq1!X#8%L90>_'-A?m^6FHb+PkM;W7FJXC"gH#Jp%D7bS#Z?!]e@';/Ve<9fQCJ'dm+G#k3NP%Ys8en&B>Ln\V-[3i%R'`0XCW`_@m]_Yerm)T"ub`#"C))!/*D!R%G95EWW;[(6k"/W_VN'$Y7MoA1.],_C=SMT&>Rr=CNcV-Bi!E%p(CS+Ec<;"63:ocQ84/Jcl0JnN^VA5(81'k4SUThKc5O<,%S^#/Y;5M.AE'eb/rn[;$bEN;,>%;`tJ%^'/Zea?Qs;^@khNJ4i:m!%AbcAo^*dmY:5l'HD)0&[\21"c3U1K-R*OZ.,b3hd$ZJUl0X+8&h%*p'Jq6MRKeS2,!^I;'n9e7e*Y:d"i:@##0]*M>R)bMR)gYNn%RRp*Og3#fE2-Z;b^pY%_#JClYJq_8Z9X&d;ol624IC=)*8Mp7S+,(QG8`LA4>["?G4MVBI440K)>6llOPQQP3g72Ohknk4+&sO)Q%cPF$(i/'&"c-;C,bA?]BJY+j!`*Z<)o%@I[7R9<-&p,sFDF6q)&BcZm'qZ5.U:GDK-T0jUOd[4sQ7f:0dbFi-*MIjg,3!Om-;6*`%D3Lgs^jJejC`>C<KD'>9^SJ>9!?ach9iKTs3ppm"$]CIkV*RM:B/;"RbQ%]H#-S$(k;"C-_+d#VD+e@GYR@&T`;2/+">NUD-]q%)%+g=d7;p=CG"J")6Luq/Db^Ujj+U$!j,LkM'k+O4B>)8!W_l:[eBjaCA.M$j#0g!KMKb0oF9BhJq&;7/*,i-sA,^m%):!jp3-OO6'%AI9q_ckJ`ujpkftbqu.K&&sEe4(@[@];EL%e"rUhf"iA(%N@`GLPuebdu;*9+s':o-PUdGK[BE"Gt#.QE.]%gHc#1oMi"t3Gfg4.%AQEk0;mj:MB"NesQI=H6#VkRiBI$K&-u-8.H%L:LHOse6U8G)elI""+Ai"T>";:g=lWE*ia!<X\_ImXXW,7uX0R4*sAGMfKN%lKM%!-?)mg'&.a(n%>0cur4@8tfFUI=o\84u?]e41ab+S5s%%UgeIC.8g;*jTtAWUY$c(2Y"Xo'9#WoMff%/Xs:A-e@Pq$FN4tKNoNba%qBU,=1G"+pX:5:83sl@uY1[P=Y_>d*;DE`+0Kc0pUrs6R"%64CE9Xq_V@--*_I\XRSq2o:KReb(HAu*pBs?F/46CK2=48#g8t@-B%3<ko\c$lGhUsO-5iE3H=U;7Z"NQ_CPD?cI=T$*;7\."TpiAUp7Ag&c/FK'1.p_s?W9NP&a@t+L<3b%r<J]eVW`(?jIGsi&C=J>t'%4UkW&,j-Id!90B#)=jstok`*8N[s*EF]0.eU,;Acj+nQW=9PcI)-;?VQD'>QJY$E:ZY)rcVgQOBN%;d;fXMi1<f:rT4N?LZY36Ct%O@4_uM_P?e`tU@\;A\Yd6">IFBn9kQUC`kEP'.0'1f;R1>__("6P.00`O^YZ!n.Xk)iIdCSEr@>@($qMQlGUfl8BKVMn/!P+iWXr%#$\Xj4g/kBlbuS]\j5q%#)r=5[;>_.1K6`Em5&t^gdH^Ek4D32dW#7i9IRlWE0XV@m0FQ]Cr$.*,G[KV0%q#GB*Aa$12mgAmX!U<%4ql.kNN/_'%@\AuJQ!X6/g#NJ#S)]Dk&R8^,Fn9),*uS#at=T@jMk#>d0S2Y\Ynp#-<',J+5/u16`3hh`+c(k5kkK#*h#[K`"@jj%`?5Yl49=CRVO:[[f@[-BK1X?"gk52a"4I]0UM]O]'_WD*NK]-DO^ZTC$)8.O"Gm9r60oSEW_aL?VBucUOBJI,0\kZVIM?Bdq\i-a%FOqa2Cb=0q9M:<^_DGBW).r@mKT/mPjW*61'Kp4ca:gmNj/Rq9hj1kp2\&,`jfT/GGr@@p0Yn0>4_^9;!0ju43e]%OPV768+mkqM%FOdpS<Pa.7'k'GqNoV&!)c0r,G!m_Z'HV+2+co"-E`GM8Uhc88O\1<&IT.ctAfK`/N(dT3J9LQPqZ6ee-:H5/R4k^&cm4qr<<GDE%fut:R:Crrb/5M&GQ!d;(RD=Gn8r'g)^nc/K]ZW&=?Utf'&O,#k4^UgJY7pXeF>Og9-G$>L3l$nm4-$MQ@(>Q>;F-rd:uVRlGnKW;%i/[\fUCRpp._s/=&:i7W0ukOU5:IOUq!g2!b#gtKR)QGBM1\;:Lq<el74JbJ.WTb?>&E(?FbX*ZlDB4PT]Xp15V=/]+Wt$YmY?*.%)F8#9kOMk)bJBj*9Xpp81h7>Wn==V`!V8SpTWM"WfF))4\?P#=7qcehpS^_UP:#'5\<\AmL<oRKMu*qLROpW:#_4sd:G[ZRL<AFn%kX*orgf`#RROVuQ$OWB;)i=]!*U%t7]f2@K$3V(^)%.UD(.kT>LrkT[6F7Z03E$pV^s!u\,#&9r%s31h<(eAMit3B@@*Q&@Fp=$f%ke8$4gX[)Vo$6o&(-NId(PnQpQu[:$J/edLj*Q0L:5>eQD/RH1kbIF$5_=H?+IL/n'S6nBUcfi\RDf;rUr-kR2-gWhD[Qe!=cu<8%0L5F.*1t:$[H73"6EhL_f=k.?>XcLgB^7#:=^rPNd-]%ifKM%6_k","gi.MV4?O0U+JH<"0\Aj03#Tf/+?))[*>T7FF3&kkDJ.WY%?#ahV'C3H\p4On0_\+%RgA;/n_hK`mXBA5SDUQV[+S)CALTl1A#0I%d'ig5#K5FYO!1#T;(I('n=)^:-%;aPj_Ht0kLB'M>VB\[W%,7(5l!R^+)*9IaT3aqU,3VbkTkklqn9Z!g69aiRlK924p*ukq32B"rc!^Wi*n"UpN)7D,@%fn$4ChR6u8<jY.ZNC<b+;/M_5)MTD%[#>Otjb3a'U>A2sSo>6l<oWYYV5jj1Qo`V$HkEtegPS:mB-Mlr<gP425b9JS+B:_M?*h(g*kA5jV6$/<!aE5>kZEoBU7#J3mqZ0h%Hd)J!?#Y?46iLTM'O5T?@6'E"$E<#Z5[XQl`%asi;B^&P2+)oq/r'Kte=$k:<pA&SJN\*_-L/GXG"eD%K.oq<=.(+-Nt>Ohg-tBM%6I;4F9;)\Ka]Ki_N\L?)Nr^N#2?d%+83!'jd7=p9ONsF;SW-U%(pmMU`Baht1e4)%Z2ZeR=FpKSR;4dOBepAs>m<.lA2m`u63,[1%"p#\b;h3NA.9(VRa0Gq26h@jWkArMd3*@-HOp2Ji0I'%p0Fnq%U$O:Qaln<4#]Csm-..Q,pQ/ts7^hO9AV9-)a1M$N`%]ko*5Ys(%7k0="Z;-Y8KWd@%'u4q9&:@pT(9Q^?Zb\PQNjD;)UJot+emK7a^;/UV'GOYS$M:Wu)S6_4C0/;=A&id;C=No/DlQtM@A-k)@AHqp%@-M17MSD==T+ZJ#5p[bAI+#%qE&HTnB"dI4lXd"r*F'U*Gll!3eKIlI<:q_k^a)pf+h$Rtb)neQ@#sM@oVs.<b-2Rp9&3E#R;r<6%oW!NRF>n07Ynf$)Y_U`/%f2gZYs%>OLS><T$]F\XK3rJ@<i8k>Ec?\X<J<uW)Se\QWe+?V,&Z/>'YWe)45.(dH55Z9>f0G2.eZ:P%LU1:rHE?>\J2)pfV&oK)U0!Jr>&_&b1;l+g4/,ds%o";sW`NX"Bnib@o[n/ckZ&_N&?Vm;"dgUEBgT!)`0S)K]c'-M]rJl$?:@PZ%UZb]7eMS_S=$>Ni<:t!6KElf<'V6We4eYq?jfjj>C+ut\]c'YS5d,o`2peT8.>^mu+ooh=WPN7A>o@Jol;`AN%a5FU.KXFT\PfUT%`&F3B??K(/pf:@tH=`!=<Rn/&6c2jp.KBn/;>$pj$1qs4$hS1a8F"`u[8=&]</#W5WHTpudAmO-"=hj#%Y[hB&\X&Uc'B&G>`)<W%"23Eb5tS7hKWMP(E9I$:Jug(U:'K&(/cdM3E'\h76QC*K`PHNsnoZ7C)'Q^?ci,XYcCd.+;a=Hd>nJb2`((uh'TQg`NC/4HgrCBS%Kb+in*<\l0.5mLp]o0C+:H]e@;%9O[.KE#iWG:$B?k=kV/S,2`>)5^C9L\?[k]Tm]C(Mj^$U^]Y2p<'_?iU3i>7"6ep)REAJ<3Qh%+C[nU,8(&G?rR+5j.]KaKgd_.@@PZD3482o_R7J4/dQKFiU>cW1h;9H#`D$*-26aM/;j:]UDt?"\Z!h2Z#rB72KI%TG,@Bj$eV>$%c3!D`T!Mf5!f'i2:;NW.0Ug/3S/h+(OHbV6OVAhTEu'S!i]4nQGusX,]TOQ"VPT&qi0bb$YTe1SkDs./L9@Ni;2e1bB$teoFF!j\%*X,600Kf!Aphg?n>T_:Z)<,EgK0[\MQ<]RJUqq1.SV#Z;Q;(kFB4M3bXG'UW&5jF,W$bt:+/(A8<s3j%GcZ_g)8\`JoWgOI_g$G?%:EGU<Ef12f%iAFj$CL47&?+d.TP0@`Q858*&R@SF</cr]60LJ#;-;-YO^(#K=:45]f]<[>4LFj1/j_,)C,#9XBF-%QHpK'\dpT\Z%+YAS-1FF_!cDlFMN14=mn\EC\J7Aue'Gq[/C4d4_-eZ@(%u\^j0\Xk%KhE)!@S\s!*do1m8hB\\'G/mZP=4J_-@O7NR6j*b;%60r%c2;]p\.V*q8:Ff:3$Ld?N"-G(.LJ"PI1G0Y[hBgAiGdchm"t'=oEZSX0uT*l+ISMq==ZNu>7NnNH9/U"E32,?cAmmh*t4]8(2G$d%=^Y#D>3oq?H^N&#]L`lrS0rmk!XO^E,Mc1$aM_";Tj0IA+b>Ys9V*-CDbhoV'Wkh@@&VC.fp[FnjN9u*R8!qE,Qj91J2(`%/3k<b%qo"@SF<DC:`SnCQ5)OBsa[78-7`[1g+YG+%b;)k+&)f).dKQEi0_!fjGtTNZ+Ve)r;r[s-F?^[B"#/1</io#l!Joj[S.CL3oM+:T%:nf+];e0sj?qB0c9c""$,)"t5_Oqg>6Mm.&+rJ`E-_k*(,XQaj/V>3p1a[n?+bCkc9:d]W?q>qf-?I?H[<0HQl!GE.K6\-!&j=\d%OQP4g0uNVP-sa4t4CG7kWVKm,P1q7mc?ik7og5pC#Q\WTW@>!cmFWUH8;';RbS,d3(^WdKI7*.CR8+G?G?4erN.d/*kbs;Wb<-m(%@9g/Qip@IV;=(P>>YTHFM#]a;ZUH,b68Vto[`#0tH!gl.O<LOg+:s_5m#&3:p*^u:q'Zi8_73#9apMg0buJ.<>,BQf(/dXWr>bgp%o;Iiig0kO<Jh0Ep6CoUdLdP#LJlEmK#Z?@r&7gSg#!iI<Ke\\'.@7Ou"qh7:`@2J@5iQ=]6kUQ[nGtoH9QdBNbi*NA'i+';";2TK%S!I2V66HkPHEIjs&7V-3W$q`gQOjaj#]`Uo@ALaG6Mq9:+>FtWA,lj";M'cS+p&mlDiSdYaT+k^l(/0WV"dF_fU@WOV"dFp,2s\3%OGJApd)b^sYcTVW0dJ1VJ&IrR5)1=Y+:^[g7R\QI*"e<n,5RGT-IC4e!O:3uPupOf!.sFTDOi>=otUpo(cg\[cd]b?E'<;"$!N#D%8/QSnXG7A8+Ngr1/H)g9'[%gDl^=1o6TW2kScT5D8JIOOeg!j.bTP4(W'/S#iP?R4-*91LDB[hr'->k)k=f<"nA-0I\?Jdtb'4ah%,[;F)WG'!OIL6VZ9T3/M:euA@B2\MoXrQdW&:)'fJAf8F,BEQ=Mo1+E3>#B>kB]N/Vrrkg4et+E',)T'+#eJLLJMTaWuUILB7umM%^qfH%-V36)%jC;Z$P2rm__sqJaFcX/n.EDtfM`nY^I+)BfL(IiT'Kg#Oq6PS%m`LY&dO5,G*lo2#Bn`[%Nc+?ooM1b03+8-6>%M`%lOccI>D."cYo[qWX]9YJB53"R-][j6La&u&9H<@A"La)5MMK5ufUT!XISi,V6^Yri'^'d5\;;)ob,E8!:-$o^0e1Mu,NjBMNe]QZ%?W8#l$7p-]7ptQX,_.&$VJPeW(?nZ4!DP7TCtZo,Tjs7r.fedF6AXQ.i.+9X/]/53#'N8$'\+U!h-<7.LbTTMA&<+e8s1$mXfqfh%$3Z2P?a9(#V+aSYn5W-d-,#&q&OM9gMYe:Wl'=j^iA>q@kb^UOl$au7[R^c<mUq3`\gR*$\JjcJl$eXXKRjiS!r$a=7.+]>(rE7F%mUr90PL3M!IR[GtXsNfu69o*T-O*1Ld,WLO*:P9H4qi64#51lD\P<p9P'W-".l;ZJ*op_H*I+2bUnFS*WTa_)>'ceQ6@gqMpDID2%/cnVdqb.Q"FrJ'?$7,+)7ptD+-A\@bJbPQ4]H[lucNo/,T'C_nQu7`AKgX0?)VC<8f&UWI#].W4*;+8S"X]?ee"l_@RCL]BN4:^n%2?FEk?knfQ?5c]X`m&-lZg^-lbVOs<jE!0gSs/#DJoJY>i-cr>oLKAY1\FP--[k?0jrUfq)P,4LS)ZQ*o/Qjac=[;-SBi?"p,spC%"hnW'VSMq"0MCJ?ORJSuljNcH^1RN:VC(dq'CT$T$/[PD=.V42>3o:]W*)!"+a[TBC,j/!c]8t6TM1:g*`-(>h!o>"K9S7K++\mX%-a7X.=u(N3%.)eV#-p.QI=6iV<c[a!Jo8]O"renLlXDiR:9choAnnW@7CQ"MBX_u6D'6cZDe]iF4/h<uGJ[7<Jao$U-9Sfu/X0qP%;Ll.iII/eid`8o$j6<"LbLeSj-<u;eMsqB:&9J-uq3Hh__h1j[JW=8pW;*TU(6L(:oD,K+2kZB:EB2D^Bu$r]'Lb^?1AO'S!4+4=%f^jMd6puil"N#\1W,t9P6Kg*5Bg@/0PsWA)Zf<#68O`XgB(l!P69KF=,)!7%OTpjk%;9C-]>Fj3U)7Ttd2=_5cuH!2mcZACM'>tg%)1pdK=M0Ph8g2qo?,;2[!sKmkp4*>SMA)3m(k)rOTW)]=/i<;W:Q]+=0_ig]22\n77=#A^E0Gl1R/FN'jI_086:_j9#_Nc0J6N;1%q4R5j6LndD3ZkCaR)#t&0TGdN\6#pqJ!'jK71t0+r`Z,Ijg7pE@+S,)n;4)tF29."(njPn9OQ@00Kfu6Bo,c$c/N#eDW68,LJX?j%W*rGjC%)G'6)fVRLp*<?-3Rm:J5ub^9luj`=I?>ppaMY8@la'VW,r--F@0k?BNM#LoKj4\%;)7(7aX>?BS-GORc?"dGKMaIbVJlc%!Fm2RqLUhbGQp5CcdL'o9P\[J`S<B[,oB;&Td#L'\c`$CnAf$pUXLuY0Z3R/j=!.n+V*T]@#oDW#mo>-FJc4^J0o:^K)'t^qDr5+%i9W^)-lAQrA5BPLoOs2*gq<E..#7[&dnt=fo)l5]'IXhi2>"r0Uk_e;0hL'l,P/fCO#mP%8.]C6@WFqga4FJ(PfWqF;j+:kc8H$D%_2C:)kcG?UVUKgnOS^&^Hmr#X<"L09P^4-Z&]3`%6ids[!3F-nEuJmVPQ]cJMF\7^ZaofK\mpG3_eghhF@.%t;OSrW4eH"0B$bhe%4$21G1C*$p'JVkW/%)StXsYusaR')#a7B=-;:>=Fm&NGB#==aZ5B+!N'dFGWk,4Z.V(;sOE7C]dKu16?[?Q_\$bCp]`rcL>5Vr`=%cq9PB(PVVKBG[-^`0k(GFL8o%&VNQgJ&"_[e:NGf-($QF:4Eg.;\R`<L:Voj0aQeb50`)^J-J_nSJ(((*kEcJ!3p@/b%R4eod7D9%`FA``l=O)![O[Yd0EG:``g:&TdDn$IYTlj6+??eS$]'ghf=/_WM?JU`C3nnP/RUPZ:h,<j+q]?gRJ93B54,.cDf>GR8>h)?"Mgnf%+oq41f6H:`2-h1rCREXF05iW,[MLd'NG8UR`8D"NJLu2,-Nj!5.uf]s/b-gba"c7C5SKqZp`3.HL,BBK_j:pSDigaXo_j9mqN<Bk%<b0qsBF]4hD`K\^UT7Nco7uJcrOrXANg)%5H"5#.N`-dL(#-Z=eCHq0r^Ffb4CncpeP_.0/"cQei[Dk/g\hc8(*iL'O\H't$,K.T%_HFfg7KrpW^.DSLJ--5WGS^Vd7Uk_`\IhT/37*>t,lcZP.tHAn>8`'NM#RnJL+ZGI]ti7(U'hJp$95<uP*+.7>a,RR/K:^u,8Wj%%I>at]?6\Hdi3#KU14!sJG4lgo]gc42Yrh@p]j`Y8mpB^lR<pZ?##01/@PiV,q8*FHWI8A9ORHOhme9Y,II*9n.Z3uVX"F1%Q,WZP%W@pRp',Q%b*f31K%jXS;%r'c;Ko&89pXHR``k#dEY:W@ZdM$Whmo$37#.936)?WX:]9BqeZ1/St*@&O\.69EH+%S53'NsTb.Ir@o%_<ZZN)E*c?h>@1o5p-d`#7RnA?n?Rl*f0s>>I:u-?GY>a`]7r)\-<\L5u:/^B<8fLbg,;TS4i69^>CRripaON6;GVK;m_>@V`P\!%;q7-XoF?Vs5$j2l2F'[OJglHGKB^@glZXef'l[Oj]oV>#dYi5P+Uq!,i4(4Wb$Rl!JJHg\$k-5.&2J@6mp%MDT[>&&*cQ`9:ttKc%PZ_(nrLkZ#9IMP4CB-I;?^l&=<,<$?a;@W^\TL=D0r5dH`U_[7$S*YR$Bm.bNPMSKC=@4=n@]t)i9qeZ3%E:[@.l&1s"T]D6dGhM%FG?&)0X,*sblW:(AEOM\&i,4\1SD-2+j9Ej2':JVFA%'_g8DB%,?^<`nT4LYr>p-XAqSWJBrO9?lZbpKi4P'2/=(o^Y<8-L@s3N+%P3gn$K+_em5VOV-%Dqf*4OngOo+Xh99W!8;jH`n0moU$&S#V\P43\WSIf_YOdRZ.]@PTXF*,U;X<!iqR./I4$O&ghK"B#C#i/;Q4%P/Z:*,'N9>&s+7Ah9Lss$JFpP"JK'Ldh[?W4LKD,r`g9cOT!!#.rZ*8$>,\IG0DuKiecSK,@SV;%%,JQH%+]BpEGG+mPmJ9;3AQ#%U?st+0SpLT_:?XuOiI=,pUCc4(g0q=rX,@qqSaGgVntetI+S4s]KQO::n[DT`^IFR.DZk1>[YYI;igLE?isULK%udgo,1MQSjG,/%]3AaM:ho0A?VDoCq"4[)0nm*-jC[UkEo%<[@R+U^ac&sX)QgDjqNj_Y0S2:$J\2>)^#n;sq\2%-ABc@-M1ab6qBuN,Y0]L%!aJ<)%)J=jSPa*O*+S4'_Y_O)`n/gY'>&@aZ>'DOY;;9AU*4>0mf2:;JW.qU#7QqNl1I"BH40uGhg*r<!--0M2S4d]\lNTFN[L)m&iJN8&%MUY+s>m6-r,T&:g24m5Lc?mg:%sq"Em_S#h8';.SM"e*"0>8N_:%MRLNtb.b$]EpAHt%C(&:,"6065NiiU/3MmNH92N,$Vu9[Zk)%nZ'-fcK1Mp*,?A^O,_*UkoA[sV?*K8P1P4oMTbm`d[(iB(#uBS:e!S&oDcOGOeua:=t]fG4gQ"arr+qXYI_SdrcnhWn4Y:`/LB%/%/.#hc'6AE\XgTJ%^.b_1?CaZ+6.tpmK2tMJ#91\A4fh%`Yp?V7JkU5V90>%D/e6mSq"<r\7rQ/Hf\%p@;j/QSVpGZ;iEu-h`r0`,%q!-_t5>qrK:r'F$/\%7GJEMu5#W_RIR#$GKq2%tF7s%BeN'+'D[q+:cF32a59]C)aC)Y6qV2;jKq&qus\d>pM'`P#AYDR\Mh6+(^%`C#7.42$W8T.ljMbpOi_5^o#m$t/Iod)ds%aNq1/I9-@FO7P0uKTVYAJB!8PbH1'JNIaF+.q;?bBe0uq![AXVJd@htmCXP3Sn`7/%b:-?Ek?c)%&JXgQ=1WJ3#/*!C2mfU&s5#QQ];:O-Sk=1nmZucO@4[(=pVesekuc?6+6IAt\l3+^BDSFDo)2l4`+7>i6</qiOIau.%U)[d\+q1io7u.%?$N]PN:pH[JI5.3ce<7$)Sk3G=iR05_F/(2kkLIb0OI)I$4;D]hD8&!(Qin5Q3Wb1Ck\!Jq'd0nd'cc.i"u9f\%\%j\L\B8\>)'gF_B1<EdCCCOuQ+7H8ke7`6/Ao;qd'rhrR++8.UI:>59\")1o0&cLl"0T7,O9p!*2b*Y9T<id.#3IA8b[o3m^""5%3_fOn?KcAY/nLe?j@#)0B0$Xb?-UQD*h7uHc&/o)CZn's6^1-JYnlR^i^Y4^P;5Els.)jZTNn[%`n=R!C2sfd!o.]FQmgt'b3*:<%*\`abIVdgMDs4s*H)H_<CN*08k:(&g+([)t-6S^tAgcUmN:I(')]ImSG4_K4M?l,sk#tR#'!n!4X@`?ho@f+B"m1$KrTOOQa;7rl%M_:O%ObDc3P2crmX#59'+;-JU8O#H[(C7Wl$>(8H8m>J]%g75jZL^WoU@0$K.!Y"1.$h/=>BnRkEM22*`1t1hCHZa/LaY<lPd-jS%V4AJ]R>EDtR5^M1Kle?Y+G6Hl#BCeC.9mk/F9@."3HBZ6[Ztjc)#@F39-]5sa3?.,fHZo_#bK?&X\'Xc1:(/ZYEnU1:@h"r^AL:&%;VAg7?!("hJ^Y8,GLB[pSbF:h!"Ogs?T@<a4e'6UACa)5;rSUMbo6LYQn+1*W91T&9i$E3X#02h,s67%Bd(S0ZLgKM=YOkl?XWX+%@A?K3hk+RQUX_@hZ=GT"qmuLRlqOW(`p5F\,HIRIhMgl\216W%dP+(c_:gM08a.?+;j7K">BOLqi<9E4PBjJ-",+<oN%5b[`CY5f%8qQ=^.iU?f/)X>acSF:T2'K8]KE0"oJZ:9QK./-Q@5V7ccR`\-,H+Hs@.oYFGM'fY$Yn>AR7](NZbk4k1s!V*).9Y((?tjZDLWHk%%23gB6csPj`%]0r7W9&krAr<;\'9kUTOR@DE^R,E$%N=TY-5;F8mQhNhgW]S4?sa8]s%+QX-%tk.&qV&TW#_QoUEAt<dJTm<58(Q%2#_KNWrij?$G*,^&8X#@cMO@)7E[+LrCco5q[,\7]kW$)?Q9ec;2iGG8Ie-bIkH]6TV><S@oX\VGG.>UA04Wg&`cL!_D+M@.e8[4%m1e3chfYB-\dV#gAJ4:kip]'"R,J;SM&TTl&;<%,Mk_t:BJ&r#;^T-''F0Z#!c)t6BiAGK9\(Ygn#B:;qBEg)`GC_"TVPkToC1nJ%pBde\(p_0S?RGqb+K3jNfT/?.f/!rW85T-3H)k-XOq_C4p'HB-kZ8_g!M_Q&(]c+\a+mR0Tp3guN!AVd1.^t2=&3c]P65M#I]TEo%AkduVN>m_6EZeU3^g[.^A&Tm4L_Y/NT']H.j_fu+chVM!Z\j^12nH)^dhK8s.el&nZaEZmk9q%.f)9c&ZYsd?KMo#Gd9+N8\g^qX%>4%B1W=3;E6nrpq3]^'1.aM%rQ>hsu>af$_\@J$@V;]a%.-+il#t7/-dcCX,eh8N,\CfL31fj66Bp,<KY3akZ`Nd)Ulp'p\^.a-8%492>Kn#l#u%`n<NE"YC/0:3StQl#QiZ@]d'W(H_ObR.'gmha0nK2'3bdf=FFU#H(f(hX`$DmH]NS&KtVUq2-t8IC\!l%L`9kL@9H%nNMZJ*@B9G"^k]MGC\22g0j"?)>oTBk>Skk0es_tBt2L/Ej@X!HocT\\Xa_%[E'6e)4IH7%Uh)c4tl[*ab&3^\Km,+8!/YhA.hc:%dl3O:NO/2".!)*WWM[0rZp](D7&a/J3$=om>KjG?aLe$M&^Ect0"OV#)4b=!?`D^*+=-(u2]8J'F9YLQjNP-BMM>gKds$`o>b&/<%+eB;Y2?iVMbCi;PhVUUpY<el'V])9IF6)('"hF"oVkm0Y1^3M19_jOrPA*1\m*\1O-P=*$/.EDh6J-DdXsH99?j]7,3?h2%G_0.$%N99U+hCC?kOE&'mT4g>:o!Au;9@MBq:JKq$1+7om"O?G4;t+)Eg_`STP>Y@RZc;$k1)Pa*N:.ap5U>pd;fo1_1(]tfNrgQ23Z-Po%n;*ghdCN7-BFDlGO>.#WqG$j@M5s(uB];_&/R90Hf]N2>",[A;=j_gfT-LD4($O/Prg4!nT]!sb%u2E`/OGjhORHPAAI*2?4^M!C%Wh,M+geA3jNq[u#W][U=kEeLllGFlK@1u*P+SML0SL/#ubUs,^\L5aZi^@aa?r1?a4LFe>n:A"+"(@RTIV12^K:jt5`D/nh"9@mU%B[o;7iH>t!2%LdjfYTcIqc?3S[[\=?oK_m.5];c60?Xe36iiZ.ZMM1:/d1(I^%6fgf=^gL=qWM$FMcY[Uf/QgEX\<d3AE9(7lG9\%V7IhK/U#bt"]bVde;MHE@8i+.4];Vuo@DAJc.'5hDN;[9Y?u&=@R.<i[->^b/NZ2#`UI?m>!T.m`0(XXA6Dh6M!c\d)FPaCnb1U9%qArGg>u:J)N"nl=JC*ZhKK`.Q?%KmQTuN%"85'TsB.R<;^FoutR?Q4cKd@S%L^]c,-8+dQ13:=\UE'&Ir_DQf?p$b[5cXaVO,Qk"%1ojFhF4^.KrZ*jkIeETtApZ[Fa)pQoBG*_G?_"u)Xqn[[Qg$r])[$o#a&DpraTFROCp]H62Wt'o^!jZi"8V(ce[=?uQ2bd0]:Hu9%,4RRM1=")-5ba%JIf-@2Fe(_)UeN4b!P0anqC)nl_h^VaeF&Urq%6C8]#;8P1G]8LZ$-:j[.C=W_Lf\DKQgACiVZ&:aq-]M=EMoR%W+I^l#0R==(9O;_M97?+=*F@4kL#8g@?PiS3em9<8Aed$hu?%f_t6q@,f.E/DC=5C?;8\b^S0P<7,qB;l0q$D]uA6Mr'N,lK:!An%"8a6BM]HsL7XHfF%a`!p5qj)dI5jUp00q6$H2uj"@$,`"9+sf>'EAeI<OC,@!4X^`Ah8(YlVC"A&SbS`"O-99dU^S'U=ua1"\l:3%P=GJ>T02/"aTP0Xm;]MfqbSK2UZ5Us.P+QC9FD8=Q(7Ng=GXLI<[/;3he%=Y1)uHdm-R"gC<U*R`!^TU.gV`7MGP?D%@+NL;T&qf%!7_NJg]D!>qTjk('d>oSk+Wu"Sq`&d!Kn1<ZnPWrWB(Y!=sJ5)DRH9aJA?RL(]#Ps.Bf+g<Y\Sc$9k>)aj#-uIu&4S)AkkAOn$;O%pr\CHUp`BLC=-'W19WH@lg6)omaRF3<E4<%!i?)JQti<c<[KmBSX9e/pe$jXVJXr'j^)/8W^C1/0+>M&P9KG!''D6^_!oW#)MX6b%.]ntI&BSDk""@bV_<>LdPQ>KmiEF7_*f-fu@`Auk!+[7m+8/W>!V"bnXehG_/HO[b_H-,HXO[)5CbXTtgHJJ+)V::W_;bX>6*bN>%/u!DjJqR?uTQhR6RuP?/VdH[7:>/(^s%2W4E;sE$nZ/)17@sOYDj4_!9tRO4d1$,"<pWcqEgQ=j'tEK(Sd?Y9/-^:D@`\3!f-^d"%iEG(*'!gh4/MS63L/sDb!7A1ab#9f/0%PlAH'IhAPr)lI(OS\E!ccshk5pBRq<jH8Li.Zp,mu2A'EFM]n)]fQ94),$:#b++k0MOS%T'&[@A`f3)K!Zkek>Q?YN]KZ,n$4$8,WRYL3j?a>XO#uYXYiWmBP5lNf6QunEs>TA,297h5-RX/Q;m2NH]P&Hd.X7;QSt3)COifH%[;soN6k"SMoL<"sRbklRGu&oc3`,nebQgD]%`6192i<u3F-..egh5@d7?KZ1C]UgW@4*4/gdW/f.deIq&_nd"E1&<D;[qSj]TlQC%Q!)6PK^#(q/PNFY)Dc.<H+buj0RhRt#7^b3.fTi`MIkT5WZB?*-Apn&jA(8+Ye[%?6&4d7i\oN63/@Go:aiqGqa_@k<h7-P=6pKs%"rC1FK^lC.20"qT+fUS`a>%1L?""(eEg.o"#A8t$4/pJuj#W=O;X>;c:D^6o/@;3j5/*)nC^aV]+A-"<1C9r\lo@VtU[72J#9XU&%B6V@<)uV%9:m#8Q5nOtWU`cD4.Pi?ZNo:ouc<Cu7W$<.7@7`pX!"d.rdHT2^hM99tpUPhlgPT1k]`$n@/f,YiNIq&/l@Ldk.pX:`%8RE.IBi#CL&\\f\SFemO`RG')?06G-)3M(_5*8V[9-)/>IPtI>TpWOlI8Zg@KG7(EF?o.Y1jphZFe0K`'o^PU5cs*X$q(S`K7TDT%'N3`e:`\-H]G)LJe7CbM,kD),!]U-(?)'0#W(CLGpS'hrc.,tIQ/B85>pP$IAr.*:dM,=GLrKfC(KE9Zi<s7OM1N+6W@1I]gV]0N%gnX>4B!N8KEtDZ0EDd-g+Q(tJj=E8$nMo"DfFb2lRm2i!j'&QCFbJu[]MrFh.&p'c!KVQ-T*`^'?pisHbX!p[k2&n=&VbB6pQEY-%TpstE>-aKI@JuE7,dbWF3iG=n9S:YFS6BT^0,sS1:hB_1rd[<=#[d/I8^R-colFHa%X!3A`e8@g`NuP%/bWtG+U=9dZS19"'.YM>%aD$0mL'Tt6<sUj9\$88k%lC(=IbNJZkiQoHaN:\<fiU\=YZM\HV2;^6dDT#d.R-\B+egu)G4^%ei^&olTs+o@<aE/tDr@1?q(bsa%9TjN28WH]ec0>:3<G;<2,hFa!SHt=4%,s6NHouIB*7KT87H$WM/O[KV-@_U^df8eYjIQW"+T5r=E+D@+8lB3lXbt<!eKT(FfkIi)%T>-F8Qg/<V%&MT/=[bCN>hH<[Hsd@k,-m_L7264:*VX[HOs^gf.->,eeI)7k=[/l.'5WI@=0B/&5k)*,h39(smp9faD@FS4;akHj%>\-VDVr?t?'hj(a+._Zj00I8Ch7D,I>8P7GBOL4aHU?@V)Ih8H+HA=UTjT)5HJ=moVZ!5nQU@HD3Fe(%a&8p!LebP:)D\0eQ%M>P%+a_^aWH.LtZ4!!K8$?iuYp`e+n4FT4o7;Q`ARdI>5;uUo"4oYZ2AWJ$@`r0T^L!PrK*-"KFBeIPg,DKi-m2P(X'Acar8bET%V0<.%ODN+<7/ko;aeK(.d0n^QWsA&iAnZW8rZ'/doK^@nEP?2OD\(GN&fBeeD&dUMP,InNPK:7;)DKk+o=cl\/?r)@^U1:I9%VaKjfZ1h%:kiD8jXutH?=;-L[Y\+]RK$=bJ(MF,jSZVgZ%X,+]Qp+Bs*S:WVq+sV19;1o@Q)l9FT=?h_7X->_RG<(<&QddBffGKajoCjFiFgO%U[_c&D@?q+f/#EXqfb-C$dZAR\%Opigof+tfVu=^\?AdL`%XPW?rPlB!6t<K<PVXGppHq>i5.B70He8%T,:MIJHp63O=++4O;Kp3%BjJ0<A-_\>63I>/1p+WL]1?;[W730MDDNI:dJ;R7n)D%`,*rX2Ucba5HiCaG;e;1kJ2a"Ph;h("ODhKZp_:l)QSDk\r5U@I[cH]^%F"Ve3.MJ/)i`E>S@2<b)q\eFCW`fYa/\s:B=E)tJ%#bdA]3de@)ANWfRZ2,i+WqUR+M:.lb[$G/;!d-DL*-[C`UOP!Erb]ebC&BJ%I`?G^(q]p0A3a.hPQB/sA.0b[eDRR/i-<<?_U8W6a89P*jWF[[]oK.1Y;gaKUPJR;%N(pkLcu\4>,[ejdk-3dS?1>a'(KXVh>j[Q%qGfd3m`_QMabLgEiS[`Q&5=KBrh@n69H1s:.]e#@@7AJchti_nY3#Y(?F^6c&KXBmPCH#[.BsdbS>C]"%NFHe"4ucB6otsBn_C,H%69*u'Zg,?9VRfb44X>OTef>koVHkq#MJUA(WVOs^?GOBqTfJ@Y:;9b`ZHPLSW=F`G@*QY`F^QZ)kDG18&52s3,\eVfK7T\"OfZ*c%_M+tL96Fo.q!a@0!6g9h>BR_7TBc>qRXnXfSAl2Q"->XoL[G/d*)5!)M"$jPB')DuXk*e=Wl'P0l,:T6XZEs"b$j&)"#)`H6Zleg%F1tTYI%ID`7s+g/^l;/2)JZh-HrL?0<0%_kWt&e7Np:RQq5=d90(sk2kKC<,1T:TJ0er:sR=:['DC1[rV)Rb;G3KI7X>e2%2j>q-%l-UHkmnuCC#1Xj/onKe#pWWQK9?Fg<ha=]Fs!RLCn@=i1ju`)g'X3j8L/`@0(U3NK.3UqoKI[;nK`lu9G=MpG:CXS*T6>r[HM>UE%GX(8W"\/KZ+(Clt,;]T<l;cN2\FLaRg2f#Sq.(-A7(n*^if)QclA$4I7K``B7)WC;9\C;*l@>'#8Ff\9R=-4-LVA4CfFg:CDfRdu%^d"J66KI&,`[(2-;Gt`VA*3]&@XMcCC2(MZ:pICs&61LU.$P$m=o>Kfi_`ON%$hTZKKbK`Q,e8^Uo5$FU2>r>c\N]b%s1./>7Q`#%KBo;B2=__@V&6!kK7Ar@n(6H(A@ta]Kb/630P)GW1X222>",YL):l!8!s8uKIt_QJ+o#?:KDcHsj#K=[7XG1KAn$(f-NcX)):pP@%MBRIrr'diOo0#YNemcM#k7HMSPLQ2f0/>YG)!YE<)tUZ:q8BqWQM`Sk$A8t$VX_&h(E'Zb`Oo._RL=R`MO$fmM3KL8KnmYWDOjib%jQ7N?\dQLrdR#c8$<tRF0q.jnP^a&JP.H/R(Hsc'8^l8`kJe:9BlIO/@&-LCJg/U46.BlZ_HSCMPsjSmV9s?\Tqr?PG"2\3Q[tBg%SWTK9TB4H(7])!KBMd;Z9X"aGdV(23Un%aBUuA3g*WDNFN=T9g6`_VN+'JGFaIq_tHSB1`ERAt'X2lR#&[;p=,i)8Dm;TIdR(q:6%UT7`-TmarFf+5->aBj<m,Lo$kb6pi"4_[;f^^Ak.7<rTV--!JsompioB8?+&2o<2Df<5S"0!6+J$d5I^YLY_;=[BR_6\s\kMg7=?%p'>I+]eI,AOekXairR8eg:Pp'eXc]@?Gp^i^(3VACD#Orfo,T7r(nqq0dUJ&@n#^11`JQ_Rel,5,`]8qYLhaBBE((//*+&Olf^D.%c?aQH['l>PVW0=VB/&S:S%+?\Jd4K[Zol0,nK)3^H-5fdl`s(O5EP_4E#l#/&b%`I>.?$]2s0#sHt%C(&C"&D!m!q(UTZNB(XG=g%e-#5W5^"Fsgs5i_<AoI<R$fVl29#C-dAfhF':\Id-cpe/+7kQVB)8$I\05>+C"?Zbk5hu'G'5n5n+h`Kipg4+:GJp6C8iYPlCNJd%jmqU4:I_,VMg>s_:+fl5g^-A>0uH.SReo?[]lm^`+./sPG3=j(%tFPh0^n\,:J;CPXj<(IfWjYXC=TUYner?%F^j/)5Z632q&WH1%h)iQAPkrri0?\X_lfid',%:b&a,_M<Qb5NBGNAE<k=].Mg"92Gce+Q%HX8@N]k@@-'eA@P'^OtGf4Vc;H-L@@nO4:A[T0UZGVV%/%:W4Ji,^0Igk_ipWY?eV:_u0ZDH$qB=bs26g][eNl5X2s`Bo&VW']59Zf^E/iY%bGMKDcAIU.NHRfd%MHdP"c&&W"M:E!L),3J4iu%`>)WGJI7'EP*tPKfnbGfMAU6GpcHoi'#VT_&]XZh\-M8Xr^S**I3_*cQGe'@%AkM>-r2<T:SddNUDe61PTDu2HdZU`AJ<hN%l*VX%C^a9.;]>Ns!J[VGJ"-M!5lWeE+@D&5(`?K(el++5(=.XW=+Fhu6]P4"^lrt$#rd[A2+!G,T*U@hk^/7?0baM5@SFQbZM,s;[-Y]S%d^Y\X.KUlAhmoUmScI3JSjG=qjI)lAk<njpj07SNrr)/A(O"A==HU>0)Pd/AE2dXOeu<,-!r:h:V/(Kh?FqnuD2^!1$NUM@>EMNB%,Y(d9.?^0$m<BsQ&F%)ZPUn4A;O!;_@8i;jV^:+T3-G+HTR<`OUS([6#:>.%DnGJ>7>&$nH[?aK:77(A<t\607q5.$Up#,P)uG%n%?)1',ans*1dZ+2:He6V,(_Dsk6UV@5EZhI-!LlTI)R#fq6JP=K?Xq!iBL2md_6Hd]0N?[khu-)57ip9^+bTX<I4\5-iW0\r)HrmK%#m@N8l5,3>7\7ZtIq)2#f[Wl`WTne:Q"'X<Y:>C15*.CIKKbPYY,XeA+05I&c"_PHeMiHs9/rm]7=86A66V>l\M3UQ5@cYtH"KIK%cPTt7s4l7hj=D7snqSJ\TQ%23.7p,T^EZ=1O+Tg3\Li,j^A5C;p7:?6PIZJuaeo^d'tttS_N7o<("gD<`N7Es[7)Pi,1U<+HO?Ql%?L+q,-,98f_F/V%K9gsfEm_jmp(B.)E0DA8T'8`5+-Kl^GW?k)N-NSO.8'0TM#VecNbAgj&?*,D8M2Jl?u>`U5\UL7ejiMuU^2d!%+)DU1&2Ja.lPlHqe-E6P;j+'XM-,pJR&/*S-cS1fCqX$so+'"u9P`s)@M=(K^=kVN-:s(Db@DVc:WT^kaff^:3nYCSUQ_s2"OV$[%MBgHLZfQ2$BqsHE)).3k?V_D^7BVr6[E#&+!FpCQp0RS,YWQ!#?sTRb/%=N#^u5BNf')dsHg3tZZV\Wo(_9No3f2M"n(,uEXc2]*%ea>.L6drGQMoPDX4mZPc&25ggN>#W5j6"'0dJs:c)ZK).EC:ZhWl<QpAsjl%\@,3q<(nd*KY>F#(=gfB4sSa")dDX/Qe3?^`)%'R%7RR?tJiVF]-KMdB)QH-:htKS)WtADRp.LWG.@&O@@b)b'W'8:->IDM#_%QT&;cFU]5\UWpl%V%8(&`%)d--M0cle1VHPPQ1+(CCQ%e-dDHi9gaV/J+(j!+GEuOLA*r*3S'sY4fggVF&/`75<,VW`n]5/4<`#]H;@&8)`Ae\%k>]WBK_j(uu9jF?E%]Ma(ugr\^`B,I$?_%*So:nr!0Rl8,JZRpo8,Dk8qI*:C'V$<3/)cZ^Qdb54;XN-ThMTWqc[@%o[u9dm]>jd%\`00Tco%Pga4Sdf67I:P_J>@(d0?Pj!I%%ZigHP*b=Y1VACd*/`;=\hj`9q&DtuIViXpU`_mA^a)=D@el*;QGP0"*'j]'K]6[ERJ8IT(B.B82&)SqX(id-Mc3L*p\&sD9"J"_c%n*ro6MJV]^$C2rlPaku1>,L]P`W#\iMrR<$B/]!!m,JVM%_J=N05#=8'X$g%pj:@BU;+H3X7jd'M()C%Bk"%C=hFtq@F>a5!E:X4%0,5nrh4gm>;Cp-Es6fGW/YrmAh)<2&T4dN8A&emOqATGI5]f"/&-NY<DEQCQ^];\,KG8N9=0u$E)@ZRr^PT4e+srlBY_?)HanU"5%A289+33[4;!CdRpc+o2<Ld/*Z.X"\6)IQkC$Qnj$SuX%>1-o%q$J#g<@l(3Lr\AK?4[)]KDBdDAETO0L!Ptsc@9\k$@tlbU^IP\;%T(\j2p1VG,nFV(0OnJhgDe9/QkugGg]>n<YMq+[CX[BU3_p@FgZ?"[L`0(l*>)7^M5^"_I]%lWbZ9)VH=6XB2FA1AFcbL%\L>'+n%V74D9a[dfQjY=O;eC'_)EG7g)D$c[%deY<oqhJEamfLU;5\h]l(E%()/;Qc"4JgBd`387`fXh$cnUbRqf*D"es.%O%YDsTkY0X>&%_C@)?1)V>+\Yg8dQ-"c"Bd6YGe*h&:f0JpaZR;'fnboYYg?aWUo1!pA\+PN(K$kP>b:'M]@mLDF2H3S#dQ2FGS+Nro*R$fe%>:ef%3#>8D]+H"1ofH[$H`AP?PB["]T$QqV+fSC<Z/s,XlS^fN&\H,t6Oe\V"s;H5Wur#`LO%]O+[<t>?Ml!<ONI6S_s^^rB>fZ-'-1RN%\B.k6k9,0hN]e3i7aaJH1V6=)?RDO\Ak>>\5\?Sa*OXAKkuc&rOalM1T9<T2m'6(';`1>GOk^dCO"l5c]NMA.77Fhs!E]+V8V24L%j`[?B[CWdibn@Cm*9;M@_5^$<JM7ZGh^p<8'^Cbg/)'N^e(&7a78t-cri.ueoANH"cXZP#7PJ.?W>sMg]R@:5bVk8\AB:!7f-iGI%"s&61&:g7LN:sf4ZWI_B`jqe?.k:i@(a\\^d'&ZL<\+\+X*NEM5]V*Mo<b1>SGY0a=0Y1*%DH&HW%ZeTi]#*CBa=N`@p*Mf5G+;e%=W.\GBQtpn!6hqm9^V#O<(]S3G5oe3AlsGbTA't^M+k##n\Kb)I(f)2gRjShgU2]AY2$M3c)/Dq&j@No7l%(.ngjelmIi)^D09YV%"reKCcF]#I?upbMf!p@/[1A&CBEEnolXX"Mgd0]DQB((<#&T$A-]@MP%$rt*8q$YlKIu1k9=+-ZM(rM)XZ+uK7aCkE)(2WRmK$fm%bn9gIR`G/>;NY7W]VJJ?(c4(V+K$'30gfrr.Fk<'Id6uNWkS:hCr'Rk8El.N!B$asRe\n<InaoK`#s1j=^'u?bq,X/SCJ=ekVSA:%+3S!H8Bj0uDbMM_>I':7'M9QQR8XOl?gOWX/i`jnmWk1i)28GClWUqpg##McElGLmRqg!Q>Z_do_s_s4p7Q.#`hLZr"2^f#1aR30%J[">X9X_:k]>7@XoK-+Q+O[9=a34i6lOi#8[1:G_-RC!s`6:CmRAilA.++,='J/I=R@2AmEt&S$X56*?El@^U%ub%q=$mI`^#!?7%nOKd_Mm0MYZt7'gb\/aSfeVu\efH;%[9tje.gCaI!SIYVN/Tc$2#]!j=`shFc#R)1Z._c(2a51F_2_X20o=Gpcb5F@5\AZD/6=pO%N)+iC<Fg292Dn.1p3g6g\Ve;0LDNX)Fc(S8QE/ikpfe`tFZj%0Gp!Ma\`IS`HKBUUMmMe-e3a!R\_<PJgb-.kgPPlj>X^,^%M(bb%.b^J&g9=h1Z!:L\10:)>\W:"/OcZUK4*(#6,ZiB>bOq%!TQ59HrK+'*A'VP=NNZ2)6cdgLa[`N%Tt056^N%LC=1_Te[Z'QR'=M-d%O!=7W>TJl'@H'6+;(CCaX!>H+=?kjrYj+<=j=66,+%s.j,9^-,9QHCMd97<+'o5oQOfRLKbN4ke,F%XK=3%'[2Fjp1kAh5>Y+ApA%jQaQ6\[m"Q-!-Erj[ZJjqO9g%EC0Eeo9-.I3F%nU>qVLhjQ_o+q*V;;&^fKVFZ`9]]]:P,1XA^s!m.2Z\U&cN=)UcQoe[A'ot9[T%X1MG'XuaM\P,iar?ZL:GqrgDM/eNdW\[oYW]&i57&sRDOnZnkS<11]`[);!CLq[-r2>hD-;%1+.iL*WJJ?<pI2?Vo=gsL/1@DsPP%!CVZ+G)7),9*$JB*>pC5?s%POW"_h`,APu,;LE61.rbAUNK8?H`P<B6XodHp;!G+5FHCDRhToGFn(O^K7GA7dV3TqiG8)@9>]CDO%AU^dI.0.RUhh+1)[OYlW?!p7&*@O@p#Fjo<!"P2Rd#O:#+U1N;Aa=&)'33!`H3HkPlcU-J^dO?fYRH\(?%<og'ag,`kH<qd'HM3b%.ipT?b)D%JWt%E+LYNcYj,i"_Ho^9]6u4g9Suh<ogJ`DYjC6ul6a8IC6a;.oJ)"1?4%9RE\<r1a>.N(>_l>^.g*'6#knpZmWeZus%XnRSBh#+QI\S]13+n'bULu#[]5rq'Y3#IIF)([(T&G?]6X@r3f=`Q2)LM-./h`6P#WU#/,6,J*p9uN=nS[%.27Vld,]E_WWqm&qP%%t%"oYhm4g\l9it45$S3*b'g;g'clj)u19DpXA=(P]J@3+QX*Oe3!*cI0od2S)_(:X*=uKA)DPg:gI$B9J,HXoJ9?TWO\LsC'8(X%Q]bs%7'R8515Trj&(sCrMIli&*BmJ$%R?@]k8^ZYr[Q$W%*%XhmL7&59j8k(R74JkG''<t7l#]8iJg4^9@c8:%WG7gWWhSQVXa$c%[7'*QQ^H9>Nq?7B;GlIK$]=1RoWYEmEI,R^6%^]dLf;g74Fe;Y[fKQjd'!S'9k<HX2Qmia>N'-OL(t/oqO!!^o%ojf8^k?b=MU:s%B/lQDLmCdH>?(2b^.nABdMcpFCpIeSCF%L__A(D7374QddDsM.6ZYG:KPL6t.cm>E+/m:d$3De6F^Tg+6VXVlMo^ae<?)mHhrTNG%198OL>>"WBs'$7866I1n/R@``)gPj>U'BDSBmiJ#T`/tO]VGps1[rEk+hZ<unq/QP-T2SP(7'\ATogTY9X6KJi<-qN\1=4aFn'\2%Tom-*;rEXBf]2,-.q3_5%I_Y7Z-`@nV&K_3/fHEt7Nr;V7t-d,C62Eb>c7H0TkCh"Ymce_nI\PQ;5X6da:&.d=/ItH6-WV[R+b[-%qU+tX#=\dZWkYtE,CrSdr>uc>a(ELV&ZgF*ERQu$Nf3hN(`00kD8p+6#eMc7L.$$Dr+>6$,o"b7I=R?9"N#KJpYieU@>@:C_)c"e%qWa2==<rVaL$+AlE_O^m'F?85B3^f?D&BRi(S=;Em?ktK]'S`-,SC[`^eREGOD[:Min82p66ZpU+d'C5*>06n]-8G%De,aFmYFDU%Hs+b\Sr#TJP#r<YW'TFi,R6_DRs>6,?J#R?7(Q*lj^9\G_ibZp+;2dDA_;mZ)`!MS7j8ueR4"g=;`l=eC#bQ>+d'%Hh0-XY<t4!R%KL:n8g=EG5LKodDr9m$@Z7bFKr]AMh2\ON"#E*9:h,"5AT!t7uaO@1'%(WD(:$l=Z-JPIJ`BnTI*;:;TOK1iA8Ami(J4E!to&MdZ%Y[\jVQ-o=!+h?=TDgV@`Dd]Yg0Mn";;#!EjJb8ccF@3:A&*436T,$4snrsFL[(#Kj[KGX.m-S:U]R5FFO72C8L$e>=YI8U5`P`ln%-p2eQ]OCu$rI)n2?iBQi\aEH77uAg#Ku)C?54TR?qNLnBeg&B&o(QG2G'mRt2._j%>IV@C0@Nb?h8^!o&eFqh.NRP_1!du!1Dg$S%r(Bm@nb2]cBH5-(N5[ZcdoGW#A'p/G:@r1[EDnuQrI$rlrssV:Kq-IQ=H+M<NF00NI<]%VK=u[aUlcm)b2cOI`ipNq+6P&hmHkRH%`H-;)aVc7[S@j7idDoicH2C\tm'5TY5HYG>2,N/D$TO(;@.s;Vhh4;/iU%kf5^Ga^CEQW],`HMKR*ti1pQYS=EL49Je7%G!^$O/i%.X[i!rk%OF(Ui_Z*uGH]6umHK$>TVABot(q]/6eS9-!?I5a!a+[S)f'q6;52G%n7PA`!]'QR5(8fcb:_Samhc248<JH6n`*pe0/U%O'*B'b%og/23k1%%98*C*E@r<@Ir/lJ,cLF8ZK4NC]%=9-XGRm2VjnD@]M=7bEDJk<8Ro$MQ@m8$G6u:8f+q<dN=kP@ElKnXjZRR%MuYG4V1HaY)cgYqc^6V+Yjg$8jDC1=,BJglCq`D[<YDYpb;.bdN5+[ZJb17.q[TAXl/ntKqDTN"WfC*nV)H2);01tW8s:2M=^KQ*%/[imu<ZW):@\`Q#V?6o+9;.&:R`ON>-6&e4OU:\98s?S;qbh.RPnb1>2G+(>--T4A8mbe;)l53()l9`T]8b5iQsNr[(_EQrDPK%M%=)^/a6Ukd!ZWJ_MrgfhKCm69p*S=qu1pJ`6gF1=MI)5ndP.NT0hFO,X+`5_N2N'"[%;_O+#H#@k]:Im!3UbZKl)RTgOsX/!YX+I0%5Bp>Fd3MFSpR?#_k28fXaX#.$%JQXIQ%+H7&'G`.#o2Q@$Z'%(OZ&0&:U6%o[gZK`/'LT+&8O)c(Q<bA8gK2SjWU5\'l6Ba9CTR`%ee@NLH@Nsr"V-96W1KmSdH-gMMN"ucc\:e<pq5,$\"\MCGp\A#<R3*3L=%LhFKf5qM/eWWWk7Hs_L0JZ!9P7jUB.D<MaijTe,+YH%'^.n&-psJJ5FJ#k-IKbXT6q"/rP2JZQkZ/';[?hd'3nR7R,2<W0h:;ZGSD`kk2B73K+;5h[L($86qV@rd%jjE\UO?DhCbIA0CBh3%;i!"Il"[1A@'Eo)Hi(UG2KlHb9_@]SaHJ./C:]<M#5:5H.+(r1AS#Ib!0c+YCPEN=JAa7j\eZo^<H6gqnh/[4eA&Nih>u1"JZ6f,%M*8G5eYp<D%q=TZO#,-!TVI.MU#>2:EsE8%1\4S'aP/m0B?3/,bD"O)[NIV=KL>#T08#+NKF-=q1q8CD6:2u-`l,e&pZ7j%\#Xd(%p7G;$Md`67Z-SJcJjcFA9Pk[I!P8S9d"E83`r&X-.l\/=[MPX#V!rZ!IqE6>il9?V0j=d<P5Bf1PrZV2oAe;]8]D%0jAU$]ECS$5%nb=`VUuomb(0DVaos?(I@<lsD&EI&I-B$(&[/_8$eMsIt>6>mO#lb.H/;TORio,G6<M`?!Q!<LS_;E15*qA)+TZJ\JhAbA^7=N*V%odj[[553&!1HG#;"(OdKSkh_PZ1QYn!&<lYe8F[*T3nNhRZk>.)q,.^JD>/^)3LUC3gD99:c&m.Ea+'mA8!`P^ao64OoWBFYn5eS%,"O\`Nmc":N+p(0XaspjjkkWnZnk,m#9LiLMkbuuoC_Rmb=&KS9O#VHB#`60])J>%7:m'2;\dJ-Tn!*Zf4N[?6BJr,!ZqShl'D%a%/M4YB-UOo)qqSum)!s@WYUim&k-P9J]h3d)?haO0RU!*JMPU!'APB+_+7G$#PET,1:\qq,`9(!]R$JCYrc5X?;?66Jh"SX2S\UV5%8+%4!7=Vi-'9WA/NB49>"JdsDj<eKRUk5=UI_ZC>\Z18/33sE8p&7+#R:ZuM^iI-b>fa9@"M($_dD!;V.DIPcN-KSUH-I]?oo[[o%1[E$]dOmq=jN\tXocE`:fr"ghpm=9/k[FQ^[kb/g7h,\F2t%YNqp8;aL:Pt9@]k!^b93sB-)Gl.JoD92`?"Nep0YqJL^b&MjegMY%1f\r=4],Dg0p<EM`-uI:MOj4%i#`t854?B<>BN0`r=Wt5(rKH;%cRQfl[^U+$]0HdC"0-6J!5IXam0de#Yb:)UGu1n&5SqNb_YXX%rqXL"Pc2Ti0&g0\/th,M&=/)M(M'I2h%4g/fQAN'-#k:5OOY0Fgn<U((?$*944tUnU_BO#"oPBF.a]ckVW$Djl'OsO(pfobs4X6,%`$egF6tjTN@-SP5K6t>"^kFQi-8g>B?[Lq]1L;'!R92fQA_0i7S\h\L5JrM3cUl<\4\ZFhcT:Cu'Jn]mNkJ)Q)T4r9iSsg7C&)Oo%df&bs>!:7Kg7"uqR!uP"r!,sHM9_A8@Deg(>V<=Ej1H]h..Xo_8B4"m:l6EKh3TAp#6AhF(;e(S\H1?G13//W+;,5/.gNb#rGeWh%j(_kaX!j*eUiD.[Ae:Fe[G8au2Y-fq1MS0h^M,odgX`;uX;gGr;B@Mp.Wgk?pe&+-V!ZRUq7+-J-^dX2<.&Wm!b*5O$q_f:,@*H]%LJh29JT?V.m;*.ol9/[<$\j9bNCkj7_Ktn*#^%?R&jcYG,1-&U46=<;.RuEEBOr(C"*4u1:Y%>A(W1cbb&CfGCS(WSAr.dF<h*W^%.^_4f1-&R+$+b"FKZeXcPZ!@C!gs7ALF#U:+k8-@X<IB?SH0T7j2V5;n%u"7(`(cN9VD/.'Ieo(N%sYiks4>;c-E4o9>ju/X(8@i%<Q9ZQ]9@#K@k_6[\cNJ&1<F!7=j;`@ChI%3SfkqEcLjt3.E\4uo:e($M_435_=o+`B@ZmY&SLdD`fFSX%iO/gEh9[nhDa@MO6^R*%V4Hc>i,[-p&Ikd)(]@1EE>;>%0Wkp4Ks,4I)Tk\qoH`IVROt>*o/<urjQJeChSI%*-A6E^R;?8s'`Z;h8f;.Je+h3$oWLg_F()<=%]S[2FG%7_#OTe?e&#o7^"].B(MS@6\WK5k63(c+',NI<?A3D/A?Z"g5?(@BbL)6iLDPpMGQ_42!e:`P&RIS6Y4L.Kk_k$,&Eq:,h%60YO%oM#2*/^=@]KOTB!.?RIMY,qfa>FN'`cSKO.[C[.Y<U<e80dGo\cf'LE(#%t1R2ie@S@(]sCS%*@OfR<KYXjXG:ZQGN1]V#e%o[%rMW:qQRjAFddf<:0*?P#H?_5:_[d<H"(0)>D.o*<-k![Shkr\IQ`U3*1.bbM[f&>7<UMVB2*96&^=FX_3T7(9b8#CWX`HY+nL%D,9&7.^C6o9CQ6HC47ULHbGLXBZ/>D,c6=f$XmhqZ^Gs7HgTumKr)7=VJ4lhl91>5:r.$b,>1$B?e<SLV@5u0Q*SK@df4mchu;D5%]E(Rp44T6O%O4pE("b:JP+ph(OC/^QdM/E[jYckel^!a\>8a`<F%F`6]2W*G(ZBs:h0I(PW/=GQ676&BpZ049!FhHQAZ.efYDHu4%``i=^o!,IBD"gkhEWJp.@&'okIPLYTff/NRg2Sg1'L"*US]O5"H):2L&Ts@9Y(oNh[&b$>I9%c&gBGd'RFm>)iRb8mmHsakA$N"1%g'X@mh"R9#a5QV[AjTZW1d$s-8b<jAP?Ik8Z-:Q@C#AY-D"7.eR,TGFM2<CP__PaCSgRZK8Agg`94I$qU6Y]$!%i+PX^E/3itBYh%EnNcag%MM59_$FG[63j,io_([ZoVKDe81uu\gV>JE/[WI>:Ys.$TSi@@rX(!r/[UnBD01pYV`No+q+D*f^uZsSLukYN2KSO[d7E:%WY0G(4DVErm-3a1YuR/Fpp!h\>Lr(^SUGWV\QS@&dTjHLHE,'THF8uhG3s+2Q9qQ3>6UFe3Oc]Ld1f^fI&g=pDkE*)RAo!!9^cQ*%*p"!cEeCY^Re?p2gkK9:B].F?BF=ZH-CT`68`/K7ql5OH,4JD=afG)M3Une5##61BbIh%-rjOMYk0Z<NItuN.G!]m^6PZr\;9!i*%IF!f>",dFOBW(3,r+7:fTWVO8f<BcE=\HS@pSE]%D?E>OknpF^H=gW:M=P.O;;^V0+%D/iIOe+PH4$OMk<;=sj>?9^V">2G\_hJN%3eK/b]WWLCT_g^uUnW"C8n?9d:7u"R0HMW23A90kP^]PjH6M,kb(A;KNa*HbRIS.M_PYPpJaJmE0^e=#cl,U'VWH-l.utq'0<CR&%@fKJ#QjdC,7LI>"rQFK4s6f*Ao8PN('O5UN_fYK?H&$BkA&0RQAh`TJK&@h2McdeP$*+U*7]mm[N:g5m2=rl_k3occ]I3s]JpH_+%YJO2Q9^R`[8]H64/1k<.,mn#L&-t\5K`lgS5mOX]19UqjdiC!S,)Z[Y6L%+K9N8]%4I.f)>L4_c@DiMUFCDp;N0g>(*F%*9Ba7R!%Bdr(g%Z&1APD_94]ora(QZgrB6\s;I\L3cNQrg\MH';Xd^^5OTS[$Zu#UaL"XEMNX!b,L6Dglh),eC!b,Lo>LR=/pb3Xh<pTB[0/%:_)DmlJK>dp+-A\mrhN6$tU7#gE)Y9qWJV;MH"7)=OT-J3/EUMQ.>V1-3I^Z)"*F7-qYA9?+%*'rUcpg>hV]p,mG"M=U=)[_8*2k%jB5QK1DV(B0oZo`VqR5h:n:,;\D3"D6j,)O82AXLK.&"pRO+85Ig/`;cOP+jf$-e3-AUEO1*daRDlg)lEn<cN4T:`Qo1/'VJBC8U%]ONffen$n90Ho7\:rn4UE?ekq<";+>Y"K9:g-W4Z7KBQs"#d#)EX'5t@1D*i[>lbG9oi0O4Fk9F?d3s:_AZHsqK?R]`aOYLnk^DF%F:L5B@SW`s9.>Kp/Gmkg5Y1anXK3g1lQABS^OC$YH;^T#o>9E"X\.fu"saFcot:q2fYTDaN:;n+'EF!TYI0=1R:e:6X9)U-NBn]G%)&2,gbU9XGCNH.pV+@(l56F:G)/Be@BZs0N=P=F>k=;6=MIf2b+fnH\$o0$Xs8EbI3%5\6`%X2RinuZmF"h<]$5U`DF9Q.[S3_He%pF_"ULp](EJpE5b<+7"T=Oo*mb\dM>)6`n(CPu2(LFGeBX)<K'NMK=Vn'MH^Wj7S2I>[#)IY:!8_*s16gAi?Td!"]UL-+D+o,c@P%_3J.e!q)5kP3H8KhTd_S,?uhdhBa^iQI`Qi$%i91F/_!Te!)ZE]7`JLjXKpV6(B/-BQ9BSqt.c39c;X9:t-CN*Lg%IEl#'lB5Q(%%?(k@hR^0@sd]Qq4&kf-B=YV.JRr"&X1"^`#4u&Al:c5K*I&"k^`p=R_UMK561mrH/h/X9JipG.u6@<*34aWYP@;la0mrWNI./:;g%LWX_Jpt<6<FVXXMe2.t(CW[A^o*(j:3>mXu;[@o"b2(KDdAQq,a1'=[/R:oeLL2Y\Kg6>'#:C"a2As5.b>e[p8c17,K!H>jlLW&f%)ft`QrnW:`RffND`X=&+naG?$+MNMN%BMD`hru^Z->NW`'-%<tMTj9ppUcsP&*g<o!Q/cRO'Fj#.?ctP^sZYKrnJ&7M]f#3c,al_%i87[`RGnc`mJQo#\s/]o:[JtSAdVS`/rDftC>3Udr>GNpcf\62@P`6j4#h7-B51MF&E.75gW?^&WdG3mR\u5MN\!qDI2$Z#ra[<T%"f/sC@KX"^P1._o[Sl=ZEgEO.Z[a>j:4\QHRiNfJ8XY5n5)'0m2r-h"*>\)9M(iY5&nkj+(D?im*l`(^ZB5lT(FdmuQd#L!?&<;2%@db@E8b)U'h&<Xm'R2QPFtPt:!$dM="jp.JQmFT^)GGp6WZg.O4&_`EIda($<`8P12Uhe61-A*leYQ(^.aJO(h?`+A)GBrJ$o.Ve%:P#T>@Z**K?Qmikn:_$[?*eW/i0*^SVs_1n'd:fB0j&+oE*0/T,?Qomo5^FkO7EYrO$a'\a*(Bd#o,*%AeSBP6A]TuoCJoW!-Y`u%]5GImYuEaLMlVBfO/C.>@gEHpiBInjJVDK4UMQ7ak#`K8ZLH,-I^LlS'W90^Xf10D^)ZC4rV_ckTPQlZ#mh:(D/AjT(9#]ep@s@D%@5#ede<kG-=1FkdORHPA,m6E(C9$F,>H6&s+4G`1I:'`=cR\V"%`N&0VlLju'd*3&JCo4;73.*5a6`AuPFr//B[5?ZYpRVJ,8?&E%p5l+IY:emuY?&Em(us$oo0dC(9hDN=CZl,H9$;/)PH4&tMu'Zt6VX_Kb3'<cqL/peQnmeadgLu+/n%sQ,jU.0?*(biI:*50BPL+(%:T0J[l^Eit=m1"1XJNJ])4?puC7V,tL-V.jcCj35P3#tCc4?CRrSKDbi#jCS_k(IpgY:*qMZJ%teF(9U%l!UFG=s2LIHJRZYU/mI%$OdrX+1>h]nBq2f?\9%k1u?;B:ApX"dHH2)2ItS:JCJ'./R?!PqP)=aeT-RV87h":8b:R&K?;e-25qP4`P4<k.1>K>]7h+,8?UHQ%VjMG<q)_&Vb&fHt(NnkT4'SaR330^De=uERn[kKV-d6=?[a_X+9UFWqQkT)1).[ke5hu-<UGRBTDBUgPNm0f^47R-g]Y<9)[u+-.%D!9%\LQ0D+_tDNk,hpiZY);$O^8=^d?kk%04.<S?_9<HcDV/s6jesN)^.6^#A4RZ[F"i:afP6EgiaR\Ji5sT`Cqu8/od_.g*u7!r%L"?h`-&=<`>nVFoXFiVKOG1U+"Tr.O25&X/I)r"*19g'2A3`=9&4VTG<=IP2]"V;4hu?%b_sUN%W08+9g.\Fbq;+Pfnd"lXR$\\p%iZ%7tms:%0DH$K1GRbhUF\;"U)!gX2OPWiZeO,+'^s*Dd-6OfG:XH?<%Xp"h/`poMnTWOM6&7OO3=eZ=A,N$;Z,5*cfo8Q.PL5Gq%L:rX]#M_t'E#[2P_:n;;o1Up+A@dTed5.qne6mihCm>#'crYa.?!I"[m+$QM5.@e@?uhB89u24iZ<$#m9'pqHFoT\m;(,%E&6%$q%Ae9&<Uf:/F1KP\."V"Mh,*tW%1?6p4%7](RU.t(=`h50&$M/TG._q=M#9<nUGQ)!?F62N4N[=O5d1@K`_Ma44;tNsU;6as:?!L27%.L;<NK9_U?nLJ=?P5Rj"Z$<LkXI=@78Lqbh$WFHcfiCkRZ1=-,HOIGIM.Db6U0nO?@NM8Wp>(suGn*:+-9#-T^KAtYb=GW_gM52?%%Y=Sm0M'X2q"NL#,Llk53tZL/6aO&lNbNo%\K1m86H0\)$XiBM0[DXeUF2[3XZsft-+1Za5\=a)V=3jGk!:OC+p\((g/KIe?)tsH%3Gl"i-<hoKl/%kU%sHY7H%Hpq@(>JGE9af`is`E?o=i6k`9r(?0J6Ntd/TLR(R3nDiE%gfN48ATDcCgANeYQH2NAo`#r&b2jHlXs%Ac-*fesVC\mV**rR`6r7J"KNlR"fD@5b$a\_I@h8N[tp(is)e[j9HompiPANVSog"8:50?"I:C\/qe)jLpT]c;[3_P(4.;/r"55?%XN7aKJ;)g)2l>RiP&.M<#>A/6#3LpU9<3Wufs>KalCH!0dYk,PD+IeNm9ji;5QJI:3`lPim!(.dBl,2:O:d=C0#4n6O`VM'b1O-S%VUANkO,R')"FJl+_B_+0>/gJ+XKA]D@1[rW<.N![+A8#ZY?r7/7XlZe%gGYLU,SqiK8VN-rT*KCmFV27"4bmGI?>8[?\R_D[TsWK%%l*+Qb4'FkN<'4LcuBE@>R(17qJ^iSd:2'CB&S:m;.FJrM2M8^QiJ(m([YnF/FEdNS8K?kJ:HZ7V)'`OeW+8pa]CN!o.k0a,1.Z)%+?JNY.W2->%UC.Rmr0F--RCbQa@/pflpBBaN<5aCKk(A1i--,Mm/B)JF%WLOTh^4]hC"$dA:IC<n"<a9!H(\7^^5=iX5,R2>oDOt%le%-BP)J5NRZhI1KJ^P_Q\i]f)Hm6XKA$a'+%427H3aQp12\=2HE_N;`>=@UVT8g1e]!8VQ,gUDESl*WZron<#",G@Y`r"PRNs8b%htm4pp$T[6b>V9.Rs1R5,t$0C6rJN4MkIoi_r;AdM<*7sa/>ni<<#4pJpd5Q@k4.&L"+k1'M[d)q67-^]+,182H\!"M\"#9FYZ*R%MbeOi;YdC%dIaDsds5[sCbRI`O:80L-Nat!MaeRn=]\LudfN?OeXY^7"sS(mh!Ye&JtIVe?mrgV3_*`k;3U.8mmXYkWT`Osep^i+%n3GkeH!:7tVMMWo\.D@+U:=!$)<TB(U!.fIfcX$"co.F^pBXcrBq6LAMViN;Df/JD$_2tZ]F,?Q*qC:ocm0]heuMLe@>Y&c'H*=&%km8tQb1*9F)0<e7>%`R"MhGM$f`UXG(`)\K]?+U:cr0?fNLjFqi_jZ9F&0S4\%Ma'L_&;S=_2p:1@$gcZ`#(++_SfZ,(sNtT_"B[%jH%.el\\N8jEl;\^?Tab(5>RlF_E)JbKH/YAe`7+6RlA4;<A16\$>#k!@f9`ga>;o4^an,outkRk&QdH1;tfA4Y@/UKOF$-]%`%<%+VuLqlDZMu3mqOH`g6;rX/gUc[W,7-./>r3rKBe#]nSj1!8`-mKhXg+I[YS;<+:s3n07F7F%Ujh=bn`R-k]rO2'R-d0<)ZNab9^/%B*40F`FIh'U^"NaBuKa,3h+]Za^o*leinoh5-A.&X+<<b&fb[-s7,8[Q`9)`W8<g>Lb,H0Yt6(O4$p>O])tGo*W(S\(m&<o-%UTF%6+)-PcUb>7!UKH.P=234[iLL,Vpa)Qc,uKVbjn\lVSLof7,\W-LZV8Bo#ZJJBU_N;f#ZS*Hc*RQ[`A+?bKA70o8jiMkG]h,WC"((%S6^(5h7=UY-P9]Um`EVeH;>'G'@9WiU/7e35hq!og(EX/)Gmgd_F2d-.i[0-QAt8lrqXJ\$&QS@/jZ67@XFf:K@L3\iP<6[],CKP%m4'?q'9K=SP3M+uT0/J=K@8Iejfgn4P(.>$j\Z@pn@$U(<=35tW>$[c>k_2oD1fZVe"q;5Rm/X,1X-GgH)"Csf)6:V?Tq-=dK2F#%54AC._GV!&ka*(99'JBfYh!I*c;,^nEJmM'0JH'aHUKF3*;EM5qq..)SA2N^p2?_Zf,dMls6%DC#4o:CifLTRYhioC`EKO[=]$p+%4lP[Y%\_Bor6k;DWZW[r/dpJV0BbOY_t)S"-sWofEj5'%G2T^O[,KQnB5>kt*GN>b]cG25=s4;raEV,lh8t&g"_mH^X@W+*9g-;j%D0TIHTgkZmBT.KI=Tsm7=/d79d#QKb5Lg_j2A$o$aq24A/eg\`-*fS)?aVtPEe2uNnN1Ohj1YU^7gi%hK5REL)jjT9<2TG>[J'?A%VGg7IJUNedW@0`o9^2W%;L]XDd1ea9gW5:J4_<IO$6Qt(LU"?T?`E(CIGjsh+"b;anlT_^>R[_!.cZ!V&6##H0MVgQemka@#7Cg(%0Tegs335"6N%#BZf*"tk0L825!0X[CeC:\#3YR+CTTQt/@[!W+J;@ch&S\W+j82BtY"Ho:4!M`2GSB'R(uXWDB/[d?3Il\UF,-pf%5Y-I-<!9Ko!TRI<ec`3/!a/AF]5e\k5^R4X/KfcfZ>">P+Q]_GCqC%(dWCV>bn$5+Qps^)/92.=$oLN[mEPQrfri<nZX8!rc7MdN%df0XkZWK*GV3h%X2?`0;#8c_7ZW2h&G]'ni8c<YW=`#8n9&467*hn/`kRGVYo#=grU%]"A1u;M9)]6$A&2pKse]I*ChGBDXf.aqO%_hE&dg`tc]H3<Jr4]e_,6W(9u/o+65p(hNKST<`Poi)90/6^1H@\C3e!6dGn@2$KgTB]['g4UBD]:N5H!"%:OT8E`//^@R?+A]eo%pUk=\ZhO-.A%1H:@lg+3qQgnA[H0fbUH"?mCtso#8B,Pd!=UBiHmfK?\<48[cqp*Hk+anDUj=;M>&i2iG:=#KP]+Mak2IBTj[uoA%ATQ2_7aS7Y\_?q[H$lT+.9=iu35f:<'o*EakZ`$TUc,^t#I;%m:W9#dLuF.1HuDYRcJKQU48AVIs8.;\aR8V6!\boD54&jm;OSb<%!ebE)J.[+tn#ekgMG3kb;&HO-l@*2ulhn+D`31+u&U+3q[CGX;as0.WhOjlL<]$1`5UJHr57g(LJF6\5Z^<lVl2VrOW7dN;B+XRN%^IRGhVAN">BBdt8%9:/Wi2GX@H'Ahi+bsF>%Q&9Tr['Q(b'XC;[K)$^i]-9qX'hJ"&un&_g]ZsAPlI++S&M)jDKr6-Lk7te&O9o>%o!!qL#67FH#b\&/G6:2kh="]06rSqmGOaY==n/82PL73`lA6hm#d`ok]:`O5Y2p@s9p?$h+AEgM,.@U+qZH[<`,pk71BbcC0Q]5^%b99iDlfD[N-u,2J5ZuVNkuob%"5rU'hZ2recN*Ga!dfG`C4Oa.0q)JI%J(!;bXFVaDMS/[1MkB#D>9d'EA2`'2Z[$RmeIC7X5rFG%nk*)[>!He^FZAs4H<a,hg+.?G9(OlV*WQh_")&SX:epKd;1i<#%W+ce\H#/HLqR=[.KgcCVW-<KJ*h[4[_S%2]a`2lNu9&A)DX8O%HpC7=ROjU3SZ7T5"bStXlPX/FGTfnFK[N9har6PJ/q@st14f'BqJ-secF=+k)3cnk#Z1,$Uc`]^!3tqnrAh4f!29K;>gtuUqWW[o%Bus9*p,ZMK.Vf%J:Q^%8T:lYOZiV&<2qfbH%jH[uZ2=,[kZ)TS2!]=[SV^;`L0cEbdub+K_o9u-,"6"aaB&FGN?g91>engfXrRe\%N/p0X&/M,7QQcMPl*o^'(8@5i\-[`(ILB?O(\+j4Pc7@&4^0dD0g:bEn@^Hj#r_E"EhWYLf`&-*YJC;40K3VTBrk9^",D;s0ekD&%#fYSi@k+@"5N2E&9mDY&a&K.9k_tf:O*<j1HDr.*'I0<`:R5:7E[MC4RuCqrEY@TT%K`m4,AjDMY(NonQPI&F^cVb=YQ&O^5Q!Og%DB+0S6E^VJ2"&c1l,[so`\P)q#CTQ-HVpj+n]Sua5]eY$_)''MJ\b45,S&S,h%L34rfB7#$-#n"I7u==8%kEL44>7?Qp+Wj=1osu%,]8Zh*)A9=k;:Rc$i?B#"RAD8>S@Ma*b6.0OY2?ZAoA3_C][ONMda#>2so_^66_Y(lKI)7!Q72"qK3qLet3ID4.>P3mJ5^qo4eo>%k-^Zg+om;`Mn^tH8ikEd]L-sTbI9ZU8Jk+'_UIR880#Xc6Lfn*Y/XjTE]&UDP,g>(>9_)"*<!ZOGKJC&h=HTgs0UcCEllj68XEZc%-"-7U/2%rs>4B\!['%Hr;,u`Qj&/CG.>.Da_NqU-L'\&;+9_"bHrBtAH[+gDAUq\6Q6gb;T**(/q>C[ZJ*-J/oL"G>-s/fV]4@bp%@&K&7@%g%P92(-[#)Qi_=]g_a:$&*XU6EY/$%TO!-0:GBr=ZXMcDMopU`Vl^a;JA-"?9XcO,Fr#gT>#gfsTrSShYXa4F/q"ZJ_$X%SN42J7c/P.12\S8d`B`f`G(Wt..T'!pCV7rH1,3[Qde7<1dkZt`bsJ\Q`"fL)'-[HF4WR*X6BGIK$Mjb1>WUFOp+h:2Lmf4I)6(E%j<46nJ<&/(G$oK&p6qE'D4O^ML.[-bE\H`\%io*45Z*\ejA:!sjYSm#<r=#2TFfOZORSF&aapX<['Kl/4<.';X,AD68(6Xabiq7/%'aXOh2>sUf6C%TOh(2&bemDNj(afamK`S1IjmiF+8D??Qe/_l$>@I&YlU<-p;hlaa%U`t<9!LmA6#;ToB\:9f"8NZ@ND"^^`g:#C%rnanMfAD\-,-YRnRul3UIL*Uo`nV-S8!-^PJNsJ6PN3=+,32('LjMIK(c)[",E6EfJW)3FYkEU=$DqTel9hBa;=eXX"R1OTSVPT`%oHR8X<gT<]J2kne9De]-$=OSgg4>,j4ee&YZ!6ai/DeX`2d&GnH8h&Q&M(X8bE$-fTU.AET;f5XDdmgdL4VjNn8_]s0VD@j:j/Er%2t6dLI"fpIS03iCY'\cm"'n6[;&qDPK[>G/3D$8je3als%5p??Cg_@&B_kR;gc'`$.#,]?]-;G`\9XKB"R?\;\#%kHQeZ,]811ZL%rs6KM_U"U2$318^<8CufDV/qjDS/c4[i&QC/pAc(#Rd?@V[u\<:RJcQA(abHmZ",O;O?>u/T2R<_ZcK`L/O?MNiBH[l7u<d]q:5P%P9kCFKL(_qXhZM&CNqMcZKdP&mucTqkC2BpJY7E:5iW5S?o]MF/F,L*%WJ63JLiU+5+p,-7l9!I5S[dbY=e+]K\2nESI6cs,*581%MNCs/,enpJ,ej1)6@4*?,/g?%gI$\R+SU.6Qjdq&`5kf/!:_U)cP/sNdn6mB[M9rNXJ<>MQn)K%nojO[5nFI*QSdO,)>/Wl=^:(J%9[_+rO/X-?`EuQuChi&PmC"\Eq@VC1Gne)i]/Q>m`.)s*K+F@?JUf97`0eG,#K#!>c\EJ]0/?j$(m0e3NTn[40+nGJg<T6gRo&S-%a1bD)O/V@sk9UT7M3aR\4D`#K?P'uo8jkc5IU^IpHC>\NNI1,OYqOSW77aiVDZ>,rA38'1-4LiOp"faK'bAcXAUpf$1r1@'Qe2FM%S=$Sr5nZIl&@W;TEc"eiZ]eqK%+ZX?R0V?-RXs!/J]IDtP7S]Z9&.hAndcmA;6;6qncH^,Km-,hF4tT@`)).9S%(F4gp?G]ej/:K%hWu(1nK?5gER.l+Dpf\Mp?u+R@:1J7jI&#KGNL]jE&^)XP%Vj]?Wq+tF(El"S2h5^=F@BZ#$HG1DnJ(j::/^lVdg.Li1eE/;I%nC%kE9HY`57QF$fY>5O>XXa"M`;eP5Sr,pR!8qEU_6n$_IjS(PHpk6&m%EF0*9qL;rK3\@/-a<W:jERuW5KID,Ur"o/(QW,&*-i"8Zt%LDW[Or,3u.%'"3Wp2;NX\GU$eV5?\B8$0gdrq#Rt0.%Sg%JD`6i?(B,[=l$)ABm\/<bqcRVY^q:)9b&2IV-a0]Gk"R@s(B!%"_X8%]m]h^Pb_"Dp;p?-fp>M4h;LIVQVTlX62U5PXus#X.kC2kFC[mc%5@uF:R/8_-[th\-mu;?Jh3'@VDa"+^G2dL8]rN9J<3$%*rs]N%nEcnZ#]6J2iFmbIm+QPCMQ2DR(sDc+RPe6>q*\>HApguB4Zb"1&sR*"B@&dAP:FPlr!8`p-KI\8hbZ!n+1Qm#KmZ0h'qXYU48Ju8%X&do:W?6Mm0?a*je)?#?S_$FD^<]g.=Y8]On)s+,QMT,!'aK4s:\Q)Wl^pY4=So9J#7*\B/\,8[`#@rZLZr1CTI8F+bg/_2]Of3m%`[0d8Ypf%o[A7cMaQLJI#E?[B]iu.T>5pjlh[?Vq8tKOX0!L8>Uh5M7_eB87JqGHWb&;.&c=kn=/sAi5SmA#PL0PZF3bjOEKNYIO%oH=3SZd(+RN_D%WFm+^MEE;bp9<#F23k<c6Yjr?g0?ieCrs57AcM&`cGa_7r&(sKV*'0`tc$2:%G+fCcdtIo?pF:S2fKVsgW78%P%<qPYXC_#$7"P%]=ThMeT`d9K4I4F=eSVaFd_4Ed;P#]Z6/lKA*p4@!O,l#u^T"m:Ap`?XDS7d`-gLt/$@cgnj>#D$Q)eG!lmA'rf%]!<emA-4MVWTNZ(I%ISXma3FogWVF3]_j<2(b>XU!*6W\FI*@m7fVopg8>lF::bW_Y4.l@rb"K*Od2^E%4qgH)m7B(/]q6$m'<"1%-u0\ZNZ+]EckV&&&)@ff$X$8QTI`LOLPh\(_D7FgDM*<(<g-*OR0.Sg4,d2mCuk:<Rjrr,1+TXYe9QdP5(>suD2d?S_d1>o%4R3U%_^!%!BIdg$/.0`R%WE3DL/@1Kf*>@3J^Lj8E[((Lka(XoA_5X&JVt7sTKs&J-*/s&J'ZMB>*$UHmg5c;-Z+q]F"'("T\gQ=HX'mS%[gYfo('*'\A/s[f;i9Fpks:Q$f'@!#BhK3nHH?`*_O<s.]bJktG"3ZLqe!elfU?'\U%1*&I4pkp/`h,/6JJ";F&ZJMICA28+?a@B%qpbgE_C+.hD]?hC]N!`G']9XZ;ZNUS$c=D4T!AgXE(]gj)cp]4,n4=l[=t-Z!F/_$%;j#I%B0s`)K*-GPAh>RK[&Wr:'!60U*Zi0%$'/u+X9'DL)+IMP361"q8bH4Mf:c0=1K(aCKRNrfYJ,skW"o#2f6&bpB%=ZM56GO.k^9k%Zkq+/?UdpY<N[(JJI+/]-^dD@J><GL%;,b,apcI,c1hH5@'#=?roJ`OJcb;41Lj"hr>8;unccQ@LQ+dQL]"LkEP+E,hXeb\dUPAF<@m:V&+iLt'!KhpKHqZ5`ErH%]'V-PG%&d;Q:.TI!0C%dTkX'*G:rOF!K4&(O")Nl5t+SqSb.4a1(Kr_/]];aUnL`.66KY4TH&8N45ikbQlF[M$\gT>!@4e+Ia,'nG\/!jB`%+^7`ci\CM(+>C7,k+TU(L68jMiK7NtapPEjN$jcc6GECC"3J+b;H4Y1O'k?o03E'E_760`(b\F3Z2:3JP*,"E^#"naC#`@Q>=h<H%5g(2nak2$Qh3&A*R@W^g)5fIH0$2bDW6r(V_n16K`_=hL2Yh/?)7t%'rIh63SgN0WgE@HHRCk/of\6lYOC[_'9A5O@%8Vo)Z/;*h%S!%=K?)5\K1'V\h`XNs1GX7LO/?,!%Oc1qY;0GONhF-&1,pPUiY#n<9prZ5b``QK/YrdP`9?-B\&4aZ]+6,jHN^rnlQXh?r5sA),%BG\3W>;@B;)[Yu"A->l.]Lt!i#F02KGQAs*2\_F;Xh]])Oq@]%X!8M&,@fRV)+UX>+W6COr02LQ,?VPD]*cZiGKc2.f2gXhnSH8u%)',Ar,U88?WEtb8-Dap%RMbci`hd-h+W6WZ7^lo5U)H7Znbn?fq)ab%+-u)PMu`G47l"u?8B)%#ADF;?ADD+7,\(rZP)N%Z)b2YM%OJj0m`[+6H>;@g2JN/g4g"Eh\j'P-7OqD,aej;E=BK!.`V?2Tf%fTc$3C;.&6Rh,MEPrP7&:mSH9P*?&b24a>Hq&mW[Gsln8J@]"%&#TME!#4[:%%+oh6b9%eB`LQ*D:lSmN&B,sR]M]10D"@W/3CH&0]1THR0."$lS5Z).Ke.6_%`T0bT%b@^&%<;B(C"PC%+&;L#\X/%b]X%0oP0]\R>Rj"hg&IZYJ3jYbslk!c%Rj37VtbE@N5j7M_O2!j(J_k,m^Y<r9[<^7>.F&=LQ]8mN[*$kg$X6kQT$6^>29rV^c1d%\;t*h/u)='k%.ML&`<;TR$&[X4_pBaan'g"n\h%h]JqO=;CnNbW.`gcTeE5UJr@+fZp.hH?Jk"i<l=P7.u643`pt*sDDZ5p&.1cS%?)A7=n:K&#?e/j&<QB22o%Q4RW,uJq.3)a)+,\6<_VeO::p"7<Z4.LZ>O+e2lFS:o6W_0;"9CN0+5_C,e>(bSH8?7g_<SPoms>F:%`te`V@H?l`p(Houp3Af"D/bt<mJq`UM$W?GJi$Wh4u%0cj&4fua/*Q(QBNT/an7d/**#!,TiNpa1X-d_`:"#6hKNRAnWD7"/i0P2%7de-="%+QT\"HMKVdt5G-d;3Jl.J8=%,DZPN<>J<%u;o,fJ9"H0Il"-Cbs@s2S`BY@;gkO@:G_k1tD#^/k-Sk2qJ<%<9G-f_pg<'%#k1PffpOh`ps#S8H'fDar&Pp3&*$>/@=%iWPTR&8FK+DEs5S$#R;@ku>@\Lq1iDRrWtA5cL:2WTHt+2]NKl44gI+:WUWYd[7iImf%3[O&95f2NCY?8]N:u`*$$Zs':!cYCtWu@qD;(&3[B[.1V%>80Z";p(k_uq6uJB+8GYX.EEY-;fBfAr+%AlUV7ItL#ZCt??Z1j:qg%Q:hBq*<WdEH,;:$]p@5>3!L.#Of:t3(g)I/62-=h6X2io=sjN7PFPAR*)o%(<[.a-0gg*?d2:hH\jG<T@9ds]*:j>74s=m'S>>rj%JV.ggW@eU1UXct%R<bM+/=c3NVpjSSM0uFHa'ujOi?OIT00eia`SgT=mX1JIZgu"o6Z8SJ8@koS'+aKb$ESS^o"&]h&>/NolEZ#V%=$Gk))n7LN)`j=N$PKKmgRWE+)XuS#d0RIfi%n5PIQ@B:J=KPuIfmIfdFV7\mp8*RD%Fp7J)Q0CI-rYTdb?kD.Ca7K:kW7<^2>T+%Ms1T*^ri-1Z?^_H`(]L2])\fc>q5IU5e$cSTl1_YT&:&HkhC!oTl9Im'DY+=.`D7AHp_h=r?@2J_sXh_Pi$tqYiC.Og"Z.(>W-[*%hj,dY?@d$R>oWSB^<tk#dKt:'0_6=ZL7nOoo8.er0P0oSg`(N+dN/&$gjk^YYW$qFX[tV@NO0ef7(p^SY]eONrqf*s?'(f;U5]G)%gM])<Dn@YMkRCl!p>?t``l*RN@bs'Ono$q?)b3NO0ZC\54N9?(DJ-V+bhGAQe;bnQ[8UTVD+Z)?lNl\UZHano"n0tAdV/5m4I%<q%Bu^n0;(-\8Ni)tq>Q99@G[_oiR+q5N(I@\1f+\$j<=2B_SOFF>:m:Z?aC@?4'T)5AD2Dm:@Q"t(8_6la4eJgBG!1EHT9;BC:PI1m%l+!;pYWX`HZKk)aoY+U,HIKMh:[F#r,3X>^'`j%#mIC3lNl(IBIpfO3j*JRe-jIU$B_E[&%'CuU9hX&W4^h#erQD>kr%5C`>YjPO%o:[,/lNohk4AU2rlF5d[#bqjHnV"&7647Wm/9t&+L1nU@lPnJsW+X1i.jH!5&.[SB>F6F,(h;fdG!*$-!u3INSdo]Tj+coF!l/3$%E'3)Rb[NSm-U<f07aDbE>G*%/iW!\N0$dH^GSUpqO+A%"#2\1H/d(Ej[Xn++G^^:Hb"8:XQ%3qDCg\QrP_CB;IAH-=ff3\R/]iaa%@pgm!nBsbJ#1gYI[M&h@mVqoR[_\8&h2+'=NR1>PJ"ng@03RU'd8Y2I1kA7BGO-`>0qWJ8/GKt'5(pcSTHZ3K'Ge.3'V95sV2taF%qD0uE!m?E7=:?-.)U!]?`c=Ed2$-qC9:ArXo')oR)@NT/fJH1k.Y)0q\cq]jrlS_WNM/>c#oi;-Ck6b]iFLc'cnkaP>8_EdMkQ&l%oofGDPL6P*Z"T/-QkF2.5]L)=hl-_hG?@oQ'R_=1X#FGPl@EbW-'2'Yel;d4imVaM"[q4e@pK8VAGEC3iiABo&nkPS0[%$`ER/g]%9$4inCgF_uUTLS1l[^Sm#QP/O_n$0t_[^XeX+YFoKlrYL7^<^Ps$YghgU^"5#1p)^o!9C:8%,Sc_qI#Oibnu/fXQ6XD-XcJX=`j0%Cg0'kfs]G[R;H.S"9V3I<r%`UY&.Ah^d.1%>NJt,^"Kj:dBjEXFW(1EIlu>OS_XZ#h?OBZ@Vc7/0QYd@enjY0gKB,DS#P?N^4.H=%=n2Cf$qf9>]+kqn\+?K#pIA0D2O:oFIU8t0jGM>OaR/;$9N3uFL1*7<U52>]T+(0aFQU]-8=FPjVP?fgX%OS+AcnG0BR"`$^bdII%@Aa#I<5D[@5pl]=R1:1_44gkidj[>u&hg'+Hqu40R;,Sm5JDsm+.0i0Un?R3JRK%B<?BS3!29S,S5aDfMnnNRBW'dX?:>6$nYW@"%Uk50\n@lPXC%^X,,hS&t>,d;j/*BXqb8Jp-%[+BlI<gJ6"mm#[%MGO%*Wh>g1u&7@`M4VcQt1hO'hkI-ebRRoCJi[&-oV#%Y/iE9%?X-e'pea\6TR-M_o^J01UZa#<Jn=DEU610>nM!Lr,H2r/+^:+KT!!#%2GO11G9X8;`K$E[QZ!L*;Fnu3:qVes`X([S)_S9W;PC)Z%#Yp)af4Wmr/nTbS5`-c">P[q#@=@q@/1$Lqp4RBpKHB)aOV#hI.GBs-QG-'\R0!sW$q?m[HCKA\;@&u;%G%E[UcWZ2Bdk1S-btM-%[JK[VW_F0PHj367V"_s\8%fD;mu!=kSMHH/(g>68+TJr.4?eB$&>2PQJoo9/'3pr3o]Y37itH0FK)c7K>_l^h3Jc]/3&%VB@u^F6%7.RNsbs)JQ:Y2%b9^9@Do0_[0O#;u5J.QJs/_4IX]+IZENtkGK<)@[_"9/58=b+u*B'7Zd>oN6%O/sN77bP,o_1`"BUEor:*:sk7%$E,Lk8H;amoeL(td^%dNJ]rjpnjA4J&hhbU<?tR`UX%'K8HSo=Z?"#J[(lA6>ZuK<6Mr1u8*KMIZ3_<NQrMpBnC'CY9`=ntO60]V%i-i?^B(];eCdsFjl1IU9=;[BXa0^KU@R#Jb,nug#XX('DZsWJ)#g/BS'C*(6.O3a`Yg%]B$E@fE4S5&fMCk2`b1^fd0CAh')Dt>W%l6I(^4=/?P-^K(qhIV8?B"CtB[:M$Q]lF@#Q4$5'.[u_lW`/"$EGTZ.s*Z"F72Qg-p"u.BQ2Cr]FclIs>Q?WMnt+c]JP:aJC1\1X%:"t]<;HWGh<7n9g1;TeGn2FqnIr_>gdiQA%>e7-s'kosb,A)\7KJTD(ZG!LC;(O`Uk@oQ`Q"E!%KJTg4H*RCR>ungrfEVfM9^[<`%Ka7EIg=h(6IB^]b1FSn)mqFT[?Q@:;nK+3IfKF"o7T;DoTl%5dTp5UG\4Ia9`1\J'h)BV8i+^3qLO<P09j51Hr<qQ]LsCfQbi-kQ%`5>@;^4Z.].[rS'Mh2VgRMU9/XYjL8`Grd*^[HiRMA6LhQRNU'fKG/hVp"B+k7r"Fa=.8d!17<<O\/t.Cd@KWVKn4;#\AeeCcnGZ%SgkA-(j,O6Js2&?!Z-c.%6Sb6I/hpLH_0d*moEnW`1*o`'`GkRJ_fY*C_(6j>emR=N2=*9>iIFgJJES#<=bkF+D9P\B4GW[55,pX%'9@d$&Vp4YaNeF=<^7d=lc9EO1*@oEP`#]"7:38eqM,.<\8$SMTV/;0,3bHq^&`nPRf^\CCC:hW(n8iu9[_6k`!O;d_dpcM/dhIZ%7K`(XBsKmu[0Ggn;\db'_"TL$^U"FGGm6S+K?o?Rm$UHX^l0gu,+pn@GQP\ESs,'(MJr[?mSKc+ld]HND7`QGTo6HgfgO=L*G11>%<3W255!c(Amp@Qr!<^4Q3O`"4$[D'[FH3(f0\(b1IB[#p3SG&_0np]].'SD5O3qKK@!Q;<E^ru+ig763:q;.@q2$@k(6XeE>D1V0%a#V?[^k#VVO:Og1.Q`'9]R-%DP^:Td<(rRS@]*f;NF2IPD1o!N)"984j*HMA"^>l%;hXK)h(K0>kc/5bME+Y!UK/-1lPT9Pg_#4q%>YK2Id=JgDBjOCdVg>HpLH<=1M\W?FlW+YEMP;8u4ZEFh&CrSg/b_%REI\-<='#BPO0Ec'Eb]l1d^TcgcR(/fkJ!YV;Pib=dG)'n%[Y31]b%Vl)lV:f.mE;q+HRtb1nD+PnNiQb"=<ag*ao(RNHf;b:@9JCr0ID+8s!%k!+'uXAL1>lL9a1h+o$/4.)*]2SSVI2)`/m>'%HNL.X"&Ynp!J$P18l6,.:*kZM!EP7n_+HWO0QSQ.OA(/>?&W/EY[F2-%+Z.6r.W9>JX'3G^'p.M%pr:b.q+:)@c/%J3C!+kWqO'I%S>%(Te2*?L)>YjC'p#HBd/FX/G+LuN8\81mZ:&I)9j^SmTNU6pH9=Wn.!2^Tq&pu5#D_"WckT"Rl(@(=XBd:#?mK8OU'aC.G5NET%"'FW&Lkg3:QX::afrOF!5]nP->1s^XLHB3YBfktU?!i80WFrXD9_-\u&5.Tc7l4E59)Gs(Y-c73kXp4"XQJjM%R"K$_U4YB7."V2%,qKr`\AZmBkt6:sTY`4,X',M)44K_B&`=.P5W*pI!s5]aZdh_u98'/fLW7VDU%QK9#lr(L;ZdVYWfmYc[kbB79`@K?B0R1H9`o'T%(Z1d==SJud!Q&`I(;08Jj1ec=0mXPt_Y1V(2L@0e(A0CYITPN)Aa].&V)'I1V!6r4dal?e.Y3T?XOm)Ve?8+IcV/6UKU=f^@'BPa%]c`uf(%49V.,I!'8Q2HqYN\bT?'n+sAo3^a.+=C4`[u'^h9A37?U3FLThaM\X]jd4Dbjhch]mULk%=Jd[@s?%hiP8ml+%aW]=c$l%%*p#Y%d)b%3Td%e96JiQX(=IW"2VHI]0H1+[2b^ig+DPCIdiG9)9!5>l]P^3$^[[49k4as)&0o3l=gFNrJZ"p\l]XiH'KOH?gpmX%4R3Ho])mi'aRG3<]L>+f*7]`_7msjs]V)Y#X^F<dr]B2rhGQDEIf;@MG-^+(I<cg]aADg+!?lInM+(Q?8)A2u%Mg)o(fYZGKkK`X%\"7-J^K*SjV68@0N#UQ*p<%8YFXOBChd"+[4B(<fgPr_OkdC7kZ9#<n5;M$",e.ohMIHm;f1jCh,S^FB^ecRnX%Gj54JBQ)<>@[$%gfZNBZ5oAa7]8qhojZo>A7[HZ\Z-nbf#cC+D"+IP";ir@KS9d-=B7jSKk/bg_nup.,]cKc@PSV7@#+N_d601\!arFcAmZ;t*2cIq%r(P*M:YQ=g+Lj8[5*`hr9%e>mO,4gWd<W`Z0MD//\5<rLF\UXVP0>eMM#;^015eV`!A^e]U<*.j\;N._W)DiSQ\!NmiU/b'1i[1E%WR]%N!Jk03Xgpn@DcfZ1'MC\r!#N=H"pF>`9qj=Vn?k=XT!Yh@kQ7cK("PhB77JaQo.^7?Jst0?j+g5b@tiBDL:OYRL'SIlfp=ch%okeqOS5tKs5K^;&M+Y0W)$fW`oa,&+EKR6A;H\b>K.BD)abV&\&;X'dH10(oDnH>m$<Y1937l)5KF3*`A#T7`cNSH^_u(CH6q06<%`Pne8;#5Kf"<TW<@affN_T'\-#[+$b_TR8%VTfZh)DEHDVfsE0*Mil:4qNS^-8J1IROc-9$qLDLjPg[U!"HL[[hUH.307Qe)_RV5%d$u8n4ZHl;BVO_\_HT3%nGr']_@7\1%n>Rh63nS1bn'3?Jb^M#lB]8DKn/%1N=cE21?%&ejoM>mNkTu`-u+r8.m8pkGZ3Lrnof4<%NM_*t;"\QS+lkZQ1SG.!TnjFE(tJR[B]KLLOGu::.dsW'(^:ZY"*CCp/2.:a^bo<s?*f7FW%*'>4t@`b:M4MVS*@/)a?te9L+"8H%n"kk-Q0F!Y84g%mGMYOtULdi:GXVg7EZkkl0`.,<M_s]CdYTh,q\+EI5d^-+lQV$/q;.kY^<FN7)!L@*_q<kR?i]/[#mIE7hIVk@%$0G7g1_PHI7D.ZBRMq:IGSq7$"mn]gRZpDO>4>hDrc(9am&@(A&:t\;?T8M4<6E9gT'/(t,5.@3$(#s$iKfX!/gC@H-D<lOnI>!/%r;*fES5!;Pb69WkQf7JEBac:rj);4Yi:^5@fRR(=5=2gs!*0SgRkGE]aQ7RZ`;&crkjnbC6/,?q_t9enn4U6e$^&hU;/bPLVBGpj%>a27uY/4M.%'VTg=M\\lMqL>C'1/:!-&@GqH&ggQ56m?@pA7oWOW9tQ";"4'<5/pP,@!o8G")d3+ts9;ncra/IdTu3Ua*b9a3lN;%BT.0G/H3q&O='*+/:M`Fi4akh`W!qCrZgVAoDK77#QBI3"\TrHcMq8&\ZKP.'iF`4l5f_u5q`F_k<<H`C,:H<TRrh\daSu5nFqn6%%#StAIVZpZ40.MHrhqsH;]Jk,j?<!3jBTmgQZmeag%fTNXNnr\=?E-!:dc&+Vjh*0]3X?IoJ"GRgl=r=fM;BM]^ph)jC?fecWadO%f_O4+W>dRGjjpk*Y154Zdq0TP`q*p[Lc(91YV[mUqD/DBLtXgFN&r1@rZpG_ic%$:OL/+$e@9Re7M'`XZS'^_mo([d*dr1;H3*K`%11EX#;2K(+r&O+T)&X=W>oo<Z*9aV@ZM\dag?0?oRQt'*11G15P0(?`&qJP3:A5i5QBCZ0PQ^"[bAd[Sli^WZ%Q(C;7J2DY7l[gj%_2pM1X]H'#3K6/md5_9Ao_pE+JDi_h_'9P9']nY22+l@!fa:Vh2lN@@dX=;i$FlU@S8;a-olA#iRptmX;.UYpA8ckR2rhBYC)^7o%'Y9@6`Z7))OAp-)]ge*hkdYuq;kl,bM?N+$DcKmEH,_#LQ]g9U8qV0?eOM!_Fk(3i!Ycf_10d?&Ubh`t_e>7=2o=Ea=PrQ5-@'T6%8#jV0f4%cu7$MQ>g4Q_&L=1D\'eJ$>EZ$eJ5<W$/;O]2;9P2j,S:Cu&kX`WR!K/9XE2N<gBlgo&AZcJ0P07G_XaEO)F<W$:mC%ff%NB2oKWWHAE!)lk)X[\^k,&2?uKO"\WN95:Q8Wp5ORi.d,7-QI4;bpHs'p]:+(9G=i)::l0fAoM77PE?4b+@Q*hF[':KP_t:9iB_o%'JbAX`-Ieq?`m8_Vl$0IjVF+/93C5B53Tf6^^-'&`Vr\TO?m9$FK`NnL<p9J+)$DY-cDtb9PR#6e5_9tb$ce`+*"7S9!SRUJBr2P%DhmgpJ954,[2I?gnF?Y_).@WQ?gu/MS`O"'eN17dSe>nQ07BM\2Tb7SbI-BC^-C(-keQn30G*Ck3TrNf.'ChS?I-oqOuSc\=L8/Y%>C&qeGq*$IInb&a\FGeMoKua2GgiRg,.WlTEf3**AS^]bMu'-5p$2SF8=,3,nR+YCe0i1OOFbrDEs3Ks>R]g**Y<JR\J1T'3#iY)%9nT6bF@G,78$t>%r)RlM]EhM-XJg\^QO/>fqKu-IrD[m*CTJ9_Y&[l<ZVCeCb7PVHl.lY$;dQ%2$2cH)Q1Yji-A%uD!&*Sf97G9X%jkL^E:^HMuJM:#O"pK_XS6`inH#-t"*dWck7F$%M<,ZVfX^m<LF19[pd>2gKF#q-X5".mI\)Y3VC1;>@(E9``2U,i!,QoRoC>t][%gq)/T-ir=Ob>[$qP6jN_N#lqa559duZR.,t(q?6Lf>73e`U>8]\N83s8Fi@/5]RqR,_e8]+eIc^'!_M#!fsbc3=st8X[W\4&g1::%N.cM'"T,i'"u%R*`pRTj%ZlT^Y23,?Xe2sqZHXid`Er;q;beaP)bna%Ie;c1LgliBq#`S)ViY0"\QjS3NgQ(#Fj9T>\t4J8eSHi%%4e,c1fO5mop:fG*"a>&e9kHCMP2)"$Mn)jJQ*0p]>.P4fYtV#sH[&K@iO&mUpDHIT.'3uo6q6UmE>&L&&dD;YIr!N*%Sr:i(G\>8%[-mf-(Wc_pA\5t0&HTQ(GT+1-?E%P/@gBdHRXO2i.Jr@Wf5Wjc4r&VMD<H`I/<XbDZ&bBCl<V$S?poaaS%k3KI%ioQLnqJ;9F@ZS%V3O'"?f`oiD[j.HDL-ELF.n)CNV3I@>:IP$.-gAr3^K^1X,9VY1JKtD7]U8ul8C+iD2LLJT&u?!R.Ng3LM/cE5BYp!FP-smnU[>C%c:"3h@R:WQ?O$G)@laX%OKMa=Z_QI[c!m\J.m#m:U!K0NitNh4[-WQHDLb!&`2'I`#j`Vj[j&`U'EV`"2ON)("*p$IrZ='spH^6T%2>iQ<6#$f2#DS/1VI^9V&tT9=Lj<&Js'+\/Y`"`,h/"O-Mn\(.8EbZre')UXVX1?Sb#h'M]<Bd071OnT?laSn@+96gP4)BfSa.6b%*$\@.0kTJiP1j(4B!&0@1nK]S66MO/.L;2p=O-T0H5Mo18C*2^,UKFOC;G6$b8;M]#,iEB*2H4d1BXFJ$#'ST"Np2fn>JVCRVqPX%!C8.4%Kern'R<\UqXM3Qe7S$?mm[KM4jis+eIRT5+];sXH<BT(FdqZ1s5nSS*2B[R+uLTWk#5HfMtn]3i/g$AILgm;7);7N3WNW>%Gpa/sJW`dGpi%fu1,q*B&u7Z.;S*5C-S8+k?Z82`XRJ+56+AMu+Pi?!nDWOfX?lFL8/$^onR:dMHo_D$"m;^GeRn]]\5@NcVr?!C%Tj4Wt<1rD8C:I)N5#U0ja0oLh35+45_\2_T?/et^,[R5Tb&;F\`KZVTd$&m<2;ln9]#W\E'*hqnV%#*#`B-N@b0>]>&ELOVRh)>d%iqDJJ.DT<G8Q9lVATC8HgMF9ga(upHb=FQE.L9dUc7U%:i&r,YKk92s7,0VpAe2g;!_>3(LRMWW&Pr,eh$D0Vq=HL8.%ElCb<+r,%MVj[#,q0jkcVlH=%qkWp^0"c&]I)'*.fKh?Q\Pc1!JiX6p"Q_0Mhe=Y6;jG.S'!b23L*%t4_74*\I+6,Eal&sq19=X;'!s%D%2d"%n:OT>J&OLg:be2l".QS'08=d@@?s2/8!Hjt:l$?q@*!<rL)dq)LYbWPAab'V#*S`=VsJlLQA]^.O)e0\>4NQn.8o/eZ?WQtPC.*s%HSF7)bb>er!X+"+e0NZh1[p4-neN7=\S8OU:LX^o*!G@o.aWb'^bcW`TetHb-'nb8K$+Iq;,e=l;?@dH#<BM37kiK0$ohjs,pes<%?.0j[2dlqj"+m2q)(gr8:78"S,\`)=]*k)0<_qKcK#7CU1(%0';_uq^3jp(r%j2MURm?Ti'OU*o9T#WC*iqPE65:a+oS5@\g&^fL%\Q$&H(.1,L6,49hM6Ar^k9>/=gbWJIEs?I0L0,TtXa6TIbUgU`A%1HhiOA;54V7Q'P\2@kX"[h5Hj7M]D\i=@knT$3)WRS:$a*Q_%Of)"$l&t-QY5&XJ#a8jp^*plYg\4=e%>*;01HW4=M;Ie-?i.bj+c,EcS$[3J7CI77IaMk.Nq9b'>E@,E:s"aRld&ejdBY1ehs.Mk%EKa;QV+9:'7;2C$q^.LrC'gId4QY(PW]J#MHQ-X6DWgdSJttb4i;;iJ2hW8A?Paqpn8,s@E_M(Nf*0bg;-GPp2q"P$\`kQPVXTs+%RVjuIB[L)!:e$.Z.VK2Q<_ZU<8$CXMJa[EaeZ(N/7J.^X.;!cu>(krH^t]X")Z?[n9(j6[*DH!<I7oQA@^@A3Cr(@@,2?).m`%+=%;_!&K#bH$IQd9I.;Ke4T5]E5U)_[>ka^M:=9i<30.RK:Q,QHg%h4:&J[j2,"Pn0VHfVPh!.]M:KXBJR\pa#8/r///*hQ/r[a.YaP%;Ri%@B^0$QO#S(er>J7F*hks+_n65)Ec-(enP5H>j-E:T!gkQdQmhIU79Vm14%U?U#l:K3>mLN%?m/XJ:dO?9$GHgt&)fA;:'#jU%g[EcZ"-iSTLA/r4<$C3N:4R6WZ5no-<VC5SVE:9jeQ&%q(mQu;,5jOoS;//e*:QdYl5$u+Yh^dj@F"aj2cL]&TnBOa[`C-/I>Z6e%71GPH2%"SfYCV7qE[M<=MPhj044G\bIe?[<6u'0-V+uktA[`F_&]3Q^8Rj1kDb/ks,00loOTIfjbV&32#U**'9GPqJqVpLJ9u__b%_-5RW!lQ`1V%-Rf[PnckE:SiYT>MDQ['28f_f9[1@:Moj5ZDt:RWYufY0Ydr(N$*LXPK#!]:5/[eXEUUW(U_7(Jd%3K/k9%"-PF_%`qO`8S>_tk$f8ck!0sUJ8/7+GWZ@huLlJU,(sF]ph"NT?X75Q(E>Yb3QhrKZrUgUkNB!pVJqZ?@pDNs2Ua)&5WT-cK&S+f*CZWZY%RiOi;DLW]Y=4Eb3jRe5^$jt(d<8C381d#D7K=k4&b';8*lJ6/3j(#5Nn(@d.Y[#dYRe)m,oWN@i$1F$L"7^!1Np_`(J&8+^KVlUm%9'9V]'r_20-l]XYD,?2o&rQZt"(4FV60pf$rg_E,,:5TA+MHIsUJh:]c@:F2:1pYTV*q!sULL^aNd%R/O?o8UhQ8;iqlH<--t^lU%j2kdF?Q7io^1F'!empEBPAKe/$VDRrk;?udGCKtff$1i[I%HFWcF,t#+\H=,6d`!AD3.$Jj1oV40gHdHQV:g0aculWj)dR`Lo<:0%c>Q\p*5'Sk8?HN>3&Xc*4c9$.l6S^"c`c!qnY4hgS.X.G9f-/DEeNu%J/PbEVd4a<m:c;2q8hnq4N-N"/.bc-Zj%/[2`\:H#(S`l%g$1+Hf%9;u]R[^bPSUJfSr3LkGUqfHOf(d@/D+q9-aiAKIEsk#i>$h8!04Y!n701JZAmW'Qb*2I%M:R6.P5CUGpC33kpF;d,`<5A%bh6khSBUbi6QsA=@=rdHn9d404,#Xs/'!+*i?TN?\6+J!kKAlB=GE/5S@o7!P$C1]\08!],/-ggUmhos-_'Lj6Cda4m05/QG,:s4%K>?),7bYF#Kd%3AfqVI:'&o"CQnb-Ugnig$.E1m")$**^k<2j[8TAd5$*m>UY2nYmPN"O<OQ(n7PN"NajbFnih5!"`YNHiRSp,qi%V\IIhbq;S-EK"F0_33f><0(Q\nOhu9A"QYhW=aZ!8b"fF98_%U]h.`Km8O"EKp`!S/Da)*N<NY?`"&/1)8"rV`Q);r8TEH2*IUM!%Fto-K.E,:#U:cWJDCBXkijVi%X75Q0E?,#LFFO#0Da40uDbn]oJ,8rP5Lt=3s5OX9TE"Z^mCVhY5(<G$k:a#grV$%oO4S;G?[i"P%T@XUGJ,Ji7?U"M\qX<`7+23,LrV;eP^:f!jq4BnM(WpmD\GYC-n,N$8VuHi>\E`J~>%AI9_PrivateDataEnd